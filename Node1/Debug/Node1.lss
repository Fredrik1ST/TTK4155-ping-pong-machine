
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015c  00800100  0000190a  0000199e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000190a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  0080025c  0080025c  00001afa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001afa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a70  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001384  00000000  00000000  0000489c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000151a  00000000  00000000  00005c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000620  00000000  00000000  0000713c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b1  00000000  00000000  0000775c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012ba  00000000  00000000  0000800d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  000092c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	ea e0       	ldi	r30, 0x0A	; 10
     6d4:	f9 e1       	ldi	r31, 0x19	; 25
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	ac 35       	cpi	r26, 0x5C	; 92
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	22 e0       	ldi	r18, 0x02	; 2
     6e4:	ac e5       	ldi	r26, 0x5C	; 92
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	af 3f       	cpi	r26, 0xFF	; 255
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 c1 04 	call	0x982	; 0x982 <main>
     6f6:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <adc_init>:
#include <avr/io.h>


void adc_init(){
	// Set pin as output
	DDRD |= (1<<DDD4);
     6fe:	81 b3       	in	r24, 0x11	; 17
     700:	80 61       	ori	r24, 0x10	; 16
     702:	81 bb       	out	0x11, r24	; 17
	
	// Toggle output pin on compare match with counter
	TCCR3A = (1<<COM3A0);
     704:	80 e4       	ldi	r24, 0x40	; 64
     706:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fc08b>
	
	// No clock prescaling on counter (i.e. update every clock cycle)
	// Set counter mode to CTC (clear on match)
	TCCR3B = (1<<WGM32)|(1<<CS30);
     70a:	89 e0       	ldi	r24, 0x09	; 9
     70c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fc08a>
	
	// Value to be matched (0 = toggle output each cycle)
	OCR3A = 0;
     710:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     714:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     718:	08 95       	ret

0000071a <adc_read>:
		uint8_t digitalVal = 0;
		
		// Write anything to the ADC to trigger a conversion
		// Triggers the chip select and write control strobe when external memory interface is active
		volatile char* mem_adc = (char *) DEF_ADR_ADC;
		mem_adc[0] = 0;
     71a:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x1101>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     71e:	97 e2       	ldi	r25, 0x27	; 39
     720:	9a 95       	dec	r25
     722:	f1 f7       	brne	.-4      	; 0x720 <adc_read+0x6>
     724:	00 00       	nop
		uint16_t convTime = DEF_ADC_CONV_TIME;
		_delay_us(convTime);
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
     726:	85 30       	cpi	r24, 0x05	; 5
     728:	40 f0       	brcs	.+16     	; 0x73a <adc_read+0x20>
}


volatile uint8_t adc_read(uint8_t channel){
		// Set up return data
		uint8_t digitalVal = 0;
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e c0       	rjmp	.+28     	; 0x74a <adc_read+0x30>
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
			for (int i = 0; i <= channel; ++i){
				digitalVal = mem_adc[i];
     72e:	f9 01       	movw	r30, r18
     730:	fc 5e       	subi	r31, 0xEC	; 236
     732:	90 81       	ld	r25, Z
		_delay_us(convTime);
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
			for (int i = 0; i <= channel; ++i){
     734:	2f 5f       	subi	r18, 0xFF	; 255
     736:	3f 4f       	sbci	r19, 0xFF	; 255
     738:	03 c0       	rjmp	.+6      	; 0x740 <adc_read+0x26>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	48 2f       	mov	r20, r24
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	42 17       	cp	r20, r18
     746:	53 07       	cpc	r21, r19
     748:	94 f7       	brge	.-28     	; 0x72e <adc_read+0x14>
				digitalVal = mem_adc[i];
			}
		}
		return digitalVal;
     74a:	89 2f       	mov	r24, r25
     74c:	08 95       	ret

0000074e <can_init>:
	msg->len = mcp2515_read(MCP_RXB0DLC);		// Read message length
	for (int i = 0; i<msg->len; i++){
		msg->data[i] = mcp2515_read(MCP_RXB0D0 + i);
	}
	mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0); // Reset receive buffer
}
     74e:	0e 94 a4 05 	call	0xb48	; 0xb48 <mcp2515_init>
     752:	08 95       	ret

00000754 <can_send>:

/*
* Send a CAN message via MCP2515
* @param	msg		CAN message to send
*/
void can_send(CanMsg* msg){
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	8c 01       	movw	r16, r24
	mcp2515_write(TXB0SIDH, msg->id>>3);	// Write top 8 bits of ID
     75e:	fc 01       	movw	r30, r24
     760:	60 81       	ld	r22, Z
     762:	71 81       	ldd	r23, Z+1	; 0x01
     764:	76 95       	lsr	r23
     766:	67 95       	ror	r22
     768:	76 95       	lsr	r23
     76a:	67 95       	ror	r22
     76c:	76 95       	lsr	r23
     76e:	67 95       	ror	r22
     770:	81 e3       	ldi	r24, 0x31	; 49
     772:	0e 94 59 05 	call	0xab2	; 0xab2 <mcp2515_write>
	mcp2515_write(TXB0SIDL, msg->id<<5);	// Write bottom 3 bits of ID (to MSb of register)
     776:	f8 01       	movw	r30, r16
     778:	60 81       	ld	r22, Z
     77a:	62 95       	swap	r22
     77c:	66 0f       	add	r22, r22
     77e:	60 7e       	andi	r22, 0xE0	; 224
     780:	82 e3       	ldi	r24, 0x32	; 50
     782:	0e 94 59 05 	call	0xab2	; 0xab2 <mcp2515_write>
	mcp2515_write(TXB0DLC, msg->len);		// Write length of message
     786:	f8 01       	movw	r30, r16
     788:	62 81       	ldd	r22, Z+2	; 0x02
     78a:	85 e3       	ldi	r24, 0x35	; 53
     78c:	0e 94 59 05 	call	0xab2	; 0xab2 <mcp2515_write>
	for(int i=0; i<msg->len; i++){
     790:	c0 e0       	ldi	r28, 0x00	; 0
     792:	d0 e0       	ldi	r29, 0x00	; 0
     794:	09 c0       	rjmp	.+18     	; 0x7a8 <can_send+0x54>
		mcp2515_write(TXB0D0 + i, msg->data[i]);
     796:	f8 01       	movw	r30, r16
     798:	ec 0f       	add	r30, r28
     79a:	fd 1f       	adc	r31, r29
     79c:	63 81       	ldd	r22, Z+3	; 0x03
     79e:	8c 2f       	mov	r24, r28
     7a0:	8a 5c       	subi	r24, 0xCA	; 202
     7a2:	0e 94 59 05 	call	0xab2	; 0xab2 <mcp2515_write>
*/
void can_send(CanMsg* msg){
	mcp2515_write(TXB0SIDH, msg->id>>3);	// Write top 8 bits of ID
	mcp2515_write(TXB0SIDL, msg->id<<5);	// Write bottom 3 bits of ID (to MSb of register)
	mcp2515_write(TXB0DLC, msg->len);		// Write length of message
	for(int i=0; i<msg->len; i++){
     7a6:	21 96       	adiw	r28, 0x01	; 1
     7a8:	f8 01       	movw	r30, r16
     7aa:	82 81       	ldd	r24, Z+2	; 0x02
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	c8 17       	cp	r28, r24
     7b0:	d9 07       	cpc	r29, r25
     7b2:	8c f3       	brlt	.-30     	; 0x796 <can_send+0x42>
		mcp2515_write(TXB0D0 + i, msg->data[i]);
	}
	mcp2515_request_to_send(MCP_RTS_TX0); // Request to send via transmit buffer 0
     7b4:	81 e8       	ldi	r24, 0x81	; 129
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 6f 05 	call	0xade	; 0xade <mcp2515_request_to_send>
}
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	08 95       	ret

000007c6 <gamepad_init>:
#include "adc.h"
#include "gamepad.h"


void gamepad_init(){
	PORTB |= (1 << PB2); // Set pullup resistor for input
     7c6:	88 b3       	in	r24, 0x18	; 24
     7c8:	84 60       	ori	r24, 0x04	; 4
     7ca:	88 bb       	out	0x18, r24	; 24
	DDRB &= ~(0 << DDB2); // Set PB2 to 0 (input for joystick button)
     7cc:	87 b3       	in	r24, 0x17	; 23
     7ce:	87 bb       	out	0x17, r24	; 23
     7d0:	08 95       	ret

000007d2 <read_gamepad>:
}

Gamepad read_gamepad(){
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	Gamepad gp;
	gp.pos_x = (int16_t)adc_read(CH_JOYSTICK_X);
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	99 83       	std	Y+1, r25	; 0x01
     7e2:	88 83       	st	Y, r24
	gp.pos_y = (int16_t)adc_read(CH_JOYSTICK_Y);
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	9b 83       	std	Y+3, r25	; 0x03
     7ee:	8a 83       	std	Y+2, r24	; 0x02
	gp.pos_left = (int16_t)adc_read(CH_SLIDER_LEFT);
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	9d 83       	std	Y+5, r25	; 0x05
     7fa:	8c 83       	std	Y+4, r24	; 0x04
	gp.pos_right = (int16_t)adc_read(CH_SLIDER_RIGHT);
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	9f 83       	std	Y+7, r25	; 0x07
     806:	8e 83       	std	Y+6, r24	; 0x06
	gp.btn = !((PINB & (1 << PB2)) >> PB2);
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	b2 99       	sbic	0x16, 2	; 22
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	88 87       	std	Y+8, r24	; 0x08
	
	// printf("RAW X: %d    -    Y: %d    -    L: %d    -    R: %d\r\n\r\n", gp.pos_x, gp.pos_y, gp.pos_left, gp.pos_right);

	return gp;
}
     810:	ce 01       	movw	r24, r28
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <calibrate_gamepad>:

Gamepad calibrate_gamepad(Gamepad input){
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	2a 97       	sbiw	r28, 0x0a	; 10
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	fc 01       	movw	r30, r24
     836:	e9 82       	std	Y+1, r14	; 0x01
     838:	fa 82       	std	Y+2, r15	; 0x02
     83a:	0b 83       	std	Y+3, r16	; 0x03
     83c:	1c 83       	std	Y+4, r17	; 0x04
     83e:	2d 83       	std	Y+5, r18	; 0x05
     840:	3e 83       	std	Y+6, r19	; 0x06
     842:	4f 83       	std	Y+7, r20	; 0x07
     844:	58 87       	std	Y+8, r21	; 0x08
     846:	16 2f       	mov	r17, r22
	Gamepad gp;
	
	gp.pos_x = (input.pos_x - 127) * 100 / 127; // Get direction as a percentage between -100 to +100
     848:	29 81       	ldd	r18, Y+1	; 0x01
     84a:	3a 81       	ldd	r19, Y+2	; 0x02
     84c:	2f 57       	subi	r18, 0x7F	; 127
     84e:	31 09       	sbc	r19, r1
     850:	44 e6       	ldi	r20, 0x64	; 100
     852:	42 9f       	mul	r20, r18
     854:	c0 01       	movw	r24, r0
     856:	43 9f       	mul	r20, r19
     858:	90 0d       	add	r25, r0
     85a:	11 24       	eor	r1, r1
     85c:	2f e7       	ldi	r18, 0x7F	; 127
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	b9 01       	movw	r22, r18
     862:	0e 94 be 07 	call	0xf7c	; 0xf7c <__divmodhi4>
     866:	71 83       	std	Z+1, r23	; 0x01
     868:	60 83       	st	Z, r22
	gp.pos_y = (input.pos_y - 127) * 100 / 127;
     86a:	6b 81       	ldd	r22, Y+3	; 0x03
     86c:	7c 81       	ldd	r23, Y+4	; 0x04
     86e:	6f 57       	subi	r22, 0x7F	; 127
     870:	71 09       	sbc	r23, r1
     872:	46 9f       	mul	r20, r22
     874:	c0 01       	movw	r24, r0
     876:	47 9f       	mul	r20, r23
     878:	90 0d       	add	r25, r0
     87a:	11 24       	eor	r1, r1
     87c:	b9 01       	movw	r22, r18
     87e:	0e 94 be 07 	call	0xf7c	; 0xf7c <__divmodhi4>
     882:	73 83       	std	Z+3, r23	; 0x03
     884:	62 83       	std	Z+2, r22	; 0x02
	gp.pos_left = (input.pos_left - 127) * 100 / 127;
     886:	6d 81       	ldd	r22, Y+5	; 0x05
     888:	7e 81       	ldd	r23, Y+6	; 0x06
     88a:	6f 57       	subi	r22, 0x7F	; 127
     88c:	71 09       	sbc	r23, r1
     88e:	46 9f       	mul	r20, r22
     890:	c0 01       	movw	r24, r0
     892:	47 9f       	mul	r20, r23
     894:	90 0d       	add	r25, r0
     896:	11 24       	eor	r1, r1
     898:	b9 01       	movw	r22, r18
     89a:	0e 94 be 07 	call	0xf7c	; 0xf7c <__divmodhi4>
     89e:	75 83       	std	Z+5, r23	; 0x05
     8a0:	64 83       	std	Z+4, r22	; 0x04
	gp.pos_right = (input.pos_right - 127) * 100 / 127;
     8a2:	6f 81       	ldd	r22, Y+7	; 0x07
     8a4:	78 85       	ldd	r23, Y+8	; 0x08
     8a6:	6f 57       	subi	r22, 0x7F	; 127
     8a8:	71 09       	sbc	r23, r1
     8aa:	46 9f       	mul	r20, r22
     8ac:	c0 01       	movw	r24, r0
     8ae:	47 9f       	mul	r20, r23
     8b0:	90 0d       	add	r25, r0
     8b2:	11 24       	eor	r1, r1
     8b4:	b9 01       	movw	r22, r18
     8b6:	0e 94 be 07 	call	0xf7c	; 0xf7c <__divmodhi4>
     8ba:	77 83       	std	Z+7, r23	; 0x07
     8bc:	66 83       	std	Z+6, r22	; 0x06
	
	gp.btn = input.btn;
     8be:	10 87       	std	Z+8, r17	; 0x08
	
	
	// printf("CAL X: %d    -    Y: %d    -    L: %d    -    R: %d\r\n\r\n", gp.pos_x, gp.pos_y, gp.pos_left, gp.pos_right);
	
	return gp;
}
     8c0:	cf 01       	movw	r24, r30
     8c2:	2a 96       	adiw	r28, 0x0a	; 10
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	08 95       	ret

000008dc <getJoystickDir>:

Dir getJoystickDir(Gamepad gp){
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	2a 97       	sbiw	r28, 0x0a	; 10
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	09 83       	std	Y+1, r16	; 0x01
     8f6:	1a 83       	std	Y+2, r17	; 0x02
     8f8:	2b 83       	std	Y+3, r18	; 0x03
     8fa:	3c 83       	std	Y+4, r19	; 0x04
	int16_t deadzone = 40;
	Dir direction = NONE; // Default

	if (gp.pos_x < deadzone && gp.pos_x > -deadzone && gp.pos_y < deadzone && gp.pos_y > -deadzone){
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	9a 81       	ldd	r25, Y+2	; 0x02
     900:	88 32       	cpi	r24, 0x28	; 40
     902:	91 05       	cpc	r25, r1
     904:	64 f4       	brge	.+24     	; 0x91e <getJoystickDir+0x42>
     906:	89 3d       	cpi	r24, 0xD9	; 217
     908:	2f ef       	ldi	r18, 0xFF	; 255
     90a:	92 07       	cpc	r25, r18
     90c:	44 f0       	brlt	.+16     	; 0x91e <getJoystickDir+0x42>
     90e:	2b 81       	ldd	r18, Y+3	; 0x03
     910:	3c 81       	ldd	r19, Y+4	; 0x04
     912:	28 32       	cpi	r18, 0x28	; 40
     914:	31 05       	cpc	r19, r1
     916:	1c f4       	brge	.+6      	; 0x91e <getJoystickDir+0x42>
     918:	29 3d       	cpi	r18, 0xD9	; 217
     91a:	3f 4f       	sbci	r19, 0xFF	; 255
     91c:	04 f5       	brge	.+64     	; 0x95e <getJoystickDir+0x82>
		direction = NONE;

	} else if (abs(gp.pos_x) >= abs(gp.pos_y)){
     91e:	ac 01       	movw	r20, r24
     920:	99 23       	and	r25, r25
     922:	24 f4       	brge	.+8      	; 0x92c <getJoystickDir+0x50>
     924:	44 27       	eor	r20, r20
     926:	55 27       	eor	r21, r21
     928:	48 1b       	sub	r20, r24
     92a:	59 0b       	sbc	r21, r25
     92c:	6b 81       	ldd	r22, Y+3	; 0x03
     92e:	7c 81       	ldd	r23, Y+4	; 0x04
     930:	9b 01       	movw	r18, r22
     932:	77 23       	and	r23, r23
     934:	24 f4       	brge	.+8      	; 0x93e <getJoystickDir+0x62>
     936:	22 27       	eor	r18, r18
     938:	33 27       	eor	r19, r19
     93a:	26 1b       	sub	r18, r22
     93c:	37 0b       	sbc	r19, r23
     93e:	42 17       	cp	r20, r18
     940:	53 07       	cpc	r21, r19
     942:	2c f0       	brlt	.+10     	; 0x94e <getJoystickDir+0x72>
		if (gp.pos_x > 0){
     944:	18 16       	cp	r1, r24
     946:	19 06       	cpc	r1, r25
     948:	64 f4       	brge	.+24     	; 0x962 <getJoystickDir+0x86>
			direction = RIGHT;
     94a:	82 e0       	ldi	r24, 0x02	; 2
     94c:	0f c0       	rjmp	.+30     	; 0x96c <getJoystickDir+0x90>
		} else{
			direction = LEFT;
		}

	} else if (abs(gp.pos_y) > abs(gp.pos_x)){
     94e:	42 17       	cp	r20, r18
     950:	53 07       	cpc	r21, r19
     952:	4c f4       	brge	.+18     	; 0x966 <getJoystickDir+0x8a>
		if (gp.pos_y > 0){
     954:	16 16       	cp	r1, r22
     956:	17 06       	cpc	r1, r23
     958:	44 f4       	brge	.+16     	; 0x96a <getJoystickDir+0x8e>
			direction = UP;
     95a:	83 e0       	ldi	r24, 0x03	; 3
     95c:	07 c0       	rjmp	.+14     	; 0x96c <getJoystickDir+0x90>
Dir getJoystickDir(Gamepad gp){
	int16_t deadzone = 40;
	Dir direction = NONE; // Default

	if (gp.pos_x < deadzone && gp.pos_x > -deadzone && gp.pos_y < deadzone && gp.pos_y > -deadzone){
		direction = NONE;
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	05 c0       	rjmp	.+10     	; 0x96c <getJoystickDir+0x90>

	} else if (abs(gp.pos_x) >= abs(gp.pos_y)){
		if (gp.pos_x > 0){
			direction = RIGHT;
		} else{
			direction = LEFT;
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	03 c0       	rjmp	.+6      	; 0x96c <getJoystickDir+0x90>
	return gp;
}

Dir getJoystickDir(Gamepad gp){
	int16_t deadzone = 40;
	Dir direction = NONE; // Default
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	01 c0       	rjmp	.+2      	; 0x96c <getJoystickDir+0x90>

	} else if (abs(gp.pos_y) > abs(gp.pos_x)){
		if (gp.pos_y > 0){
			direction = UP;
		}else{
			direction = DOWN;
     96a:	84 e0       	ldi	r24, 0x04	; 4
		}
		}
		
	return direction;
}
     96c:	2a 96       	adiw	r28, 0x0a	; 10
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <main>:
#include "menu.h"
#include "spi.h"
#include "mcp2515.h"
#include "can.h"

int main(void) {
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	64 97       	sbiw	r28, 0x14	; 20
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
	UART_init(DEF_UBBR);
     996:	8f e1       	ldi	r24, 0x1F	; 31
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 b1 07 	call	0xf62	; 0xf62 <UART_init>
	SRAM_init();
     99e:	0e 94 a0 07 	call	0xf40	; 0xf40 <SRAM_init>
	adc_init();
     9a2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <adc_init>
	gamepad_init();
     9a6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <gamepad_init>
	oled_init();
     9aa:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_init>
	oled_reset();
     9ae:	0e 94 1c 07 	call	0xe38	; 0xe38 <oled_reset>
	menu_init();
     9b2:	0e 94 37 06 	call	0xc6e	; 0xc6e <menu_init>

	can_init();
     9b6:	0e 94 a7 03 	call	0x74e	; 0x74e <can_init>
	
	while(1){
		// =================================================
		// Read gamepad inputs
		
		gp = read_gamepad();
     9ba:	ce 01       	movw	r24, r28
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <read_gamepad>
		gp = calibrate_gamepad(gp);
     9c2:	e9 80       	ldd	r14, Y+1	; 0x01
     9c4:	fa 80       	ldd	r15, Y+2	; 0x02
     9c6:	0b 81       	ldd	r16, Y+3	; 0x03
     9c8:	1c 81       	ldd	r17, Y+4	; 0x04
     9ca:	2d 81       	ldd	r18, Y+5	; 0x05
     9cc:	3e 81       	ldd	r19, Y+6	; 0x06
     9ce:	4f 81       	ldd	r20, Y+7	; 0x07
     9d0:	58 85       	ldd	r21, Y+8	; 0x08
     9d2:	69 85       	ldd	r22, Y+9	; 0x09
     9d4:	7a 85       	ldd	r23, Y+10	; 0x0a
     9d6:	ce 01       	movw	r24, r28
     9d8:	0b 96       	adiw	r24, 0x0b	; 11
     9da:	0e 94 0c 04 	call	0x818	; 0x818 <calibrate_gamepad>
     9de:	8a e0       	ldi	r24, 0x0A	; 10
     9e0:	fe 01       	movw	r30, r28
     9e2:	3b 96       	adiw	r30, 0x0b	; 11
     9e4:	de 01       	movw	r26, r28
     9e6:	11 96       	adiw	r26, 0x01	; 1
     9e8:	01 90       	ld	r0, Z+
     9ea:	0d 92       	st	X+, r0
     9ec:	8a 95       	dec	r24
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <main+0x66>
		new_gp_dir = getJoystickDir(gp);
     9f0:	09 81       	ldd	r16, Y+1	; 0x01
     9f2:	1a 81       	ldd	r17, Y+2	; 0x02
     9f4:	2b 81       	ldd	r18, Y+3	; 0x03
     9f6:	3c 81       	ldd	r19, Y+4	; 0x04
     9f8:	4d 81       	ldd	r20, Y+5	; 0x05
     9fa:	5e 81       	ldd	r21, Y+6	; 0x06
     9fc:	6f 81       	ldd	r22, Y+7	; 0x07
     9fe:	78 85       	ldd	r23, Y+8	; 0x08
     a00:	89 85       	ldd	r24, Y+9	; 0x09
     a02:	9a 85       	ldd	r25, Y+10	; 0x0a
     a04:	0e 94 6e 04 	call	0x8dc	; 0x8dc <getJoystickDir>
     a08:	f8 2e       	mov	r15, r24
		
		
		// =================================================
		// Display menu on OLED
		
		oled_reset();
     a0a:	0e 94 1c 07 	call	0xe38	; 0xe38 <oled_reset>
		if (new_gp_dir == UP && prev_gp_dir != UP ){
     a0e:	83 e0       	ldi	r24, 0x03	; 3
     a10:	f8 12       	cpse	r15, r24
     a12:	06 c0       	rjmp	.+12     	; 0xa20 <main+0x9e>
     a14:	d8 16       	cp	r13, r24
     a16:	21 f0       	breq	.+8      	; 0xa20 <main+0x9e>
			menu_moveCursor(-1);
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	0e 94 a0 06 	call	0xd40	; 0xd40 <menu_moveCursor>
     a1e:	08 c0       	rjmp	.+16     	; 0xa30 <main+0xae>
		}
		else if (new_gp_dir == DOWN && prev_gp_dir != DOWN ){
     a20:	94 e0       	ldi	r25, 0x04	; 4
     a22:	f9 12       	cpse	r15, r25
     a24:	05 c0       	rjmp	.+10     	; 0xa30 <main+0xae>
     a26:	d9 16       	cp	r13, r25
     a28:	19 f0       	breq	.+6      	; 0xa30 <main+0xae>
			menu_moveCursor(1);
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 a0 06 	call	0xd40	; 0xd40 <menu_moveCursor>
		}
		if(gp.btn){
     a30:	89 85       	ldd	r24, Y+9	; 0x09
     a32:	81 11       	cpse	r24, r1
			menu_selectPage();
     a34:	0e 94 79 06 	call	0xcf2	; 0xcf2 <menu_selectPage>
		
		
		// =================================================
		// Test MCP2515 CAN Controller in loopback mode
		CanMsg* msgOut;
		msgOut->id = 0xA1;
     a38:	00 e0       	ldi	r16, 0x00	; 0
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	81 ea       	ldi	r24, 0xA1	; 161
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	f8 01       	movw	r30, r16
     a42:	91 83       	std	Z+1, r25	; 0x01
     a44:	80 83       	st	Z, r24
		msgOut->len = 2;
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	82 83       	std	Z+2, r24	; 0x02
		msgOut->data[0] = gp.pos_x;
     a4a:	e9 80       	ldd	r14, Y+1	; 0x01
     a4c:	ca 80       	ldd	r12, Y+2	; 0x02
     a4e:	e3 82       	std	Z+3, r14	; 0x03
		msgOut->data[1] = gp.pos_y;
     a50:	db 80       	ldd	r13, Y+3	; 0x03
     a52:	bc 80       	ldd	r11, Y+4	; 0x04
     a54:	d4 82       	std	Z+4, r13	; 0x04
		
		can_send(msgOut);
     a56:	c8 01       	movw	r24, r16
     a58:	0e 94 aa 03 	call	0x754	; 0x754 <can_send>
		printf("Sent: ID: %02X    -    Len: %02X    -    Dat: %d %d \r\n\r\n", msgOut->id, msgOut->len, gp.pos_x, gp.pos_y);
     a5c:	f8 01       	movw	r30, r16
     a5e:	82 81       	ldd	r24, Z+2	; 0x02
     a60:	bf 92       	push	r11
     a62:	df 92       	push	r13
     a64:	cf 92       	push	r12
     a66:	ef 92       	push	r14
     a68:	1f 92       	push	r1
     a6a:	8f 93       	push	r24
     a6c:	81 81       	ldd	r24, Z+1	; 0x01
     a6e:	8f 93       	push	r24
     a70:	80 81       	ld	r24, Z
     a72:	8f 93       	push	r24
     a74:	86 e0       	ldi	r24, 0x06	; 6
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	9f 93       	push	r25
     a7a:	8f 93       	push	r24
     a7c:	0e 94 31 08 	call	0x1062	; 0x1062 <printf>
		uint8_t recSize = msgIn->len;
		_delay_ms(2000);
		printf("Recv: ID: %02X    -    Len: %02X    -    Dat: %d %d \r\n\r\n", msgIn->id, msgIn->len, msgIn->data[0], msgIn->data[1]);
		_delay_ms(2000);
		*/
	}
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
			menu_moveCursor(1);
		}
		if(gp.btn){
			menu_selectPage();
		}
		prev_gp_dir = new_gp_dir;
     a8a:	df 2c       	mov	r13, r15
		uint8_t recSize = msgIn->len;
		_delay_ms(2000);
		printf("Recv: ID: %02X    -    Len: %02X    -    Dat: %d %d \r\n\r\n", msgIn->id, msgIn->len, msgIn->data[0], msgIn->data[1]);
		_delay_ms(2000);
		*/
	}
     a8c:	96 cf       	rjmp	.-212    	; 0x9ba <main+0x38>

00000a8e <mcp2515_read>:
		printf("MCP2515 Entered loopback mode B-)\r\n");
	}
}


uint8_t mcp2515_read(uint8_t adr){
     a8e:	cf 93       	push	r28
     a90:	c8 2f       	mov	r28, r24
	DEF_CAN_CS_ON;
     a92:	88 b3       	in	r24, 0x18	; 24
     a94:	8f 7e       	andi	r24, 0xEF	; 239
     a96:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_READ);
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	0e 94 97 07 	call	0xf2e	; 0xf2e <spi_send>
	spi_send(adr);
     a9e:	8c 2f       	mov	r24, r28
     aa0:	0e 94 97 07 	call	0xf2e	; 0xf2e <spi_send>
	uint8_t result = spi_recv();
     aa4:	0e 94 9b 07 	call	0xf36	; 0xf36 <spi_recv>
	DEF_CAN_CS_OFF;
     aa8:	98 b3       	in	r25, 0x18	; 24
     aaa:	90 61       	ori	r25, 0x10	; 16
     aac:	98 bb       	out	0x18, r25	; 24
	return result ;
}
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <mcp2515_write>:


void mcp2515_write(uint8_t adr, uint8_t data){
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	d8 2f       	mov	r29, r24
     ab8:	c6 2f       	mov	r28, r22
	DEF_CAN_CS_ON;
     aba:	88 b3       	in	r24, 0x18	; 24
     abc:	8f 7e       	andi	r24, 0xEF	; 239
     abe:	88 bb       	out	0x18, r24	; 24
	spi_send( MCP_WRITE );
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	0e 94 97 07 	call	0xf2e	; 0xf2e <spi_send>
	spi_send( adr );
     ac6:	8d 2f       	mov	r24, r29
     ac8:	0e 94 97 07 	call	0xf2e	; 0xf2e <spi_send>
	spi_send( data );
     acc:	8c 2f       	mov	r24, r28
     ace:	0e 94 97 07 	call	0xf2e	; 0xf2e <spi_send>
	DEF_CAN_CS_OFF;
     ad2:	88 b3       	in	r24, 0x18	; 24
     ad4:	80 61       	ori	r24, 0x10	; 16
     ad6:	88 bb       	out	0x18, r24	; 24
}
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <mcp2515_request_to_send>:


void mcp2515_request_to_send(uint8_t buffer){
	DEF_CAN_CS_ON;
     ade:	98 b3       	in	r25, 0x18	; 24
     ae0:	9f 7e       	andi	r25, 0xEF	; 239
     ae2:	98 bb       	out	0x18, r25	; 24
	spi_send(buffer);
     ae4:	0e 94 97 07 	call	0xf2e	; 0xf2e <spi_send>
	DEF_CAN_CS_OFF;
     ae8:	88 b3       	in	r24, 0x18	; 24
     aea:	80 61       	ori	r24, 0x10	; 16
     aec:	88 bb       	out	0x18, r24	; 24
     aee:	08 95       	ret

00000af0 <mcp2515_bit_modify>:
}


void mcp2515_bit_modify(uint8_t adr, uint8_t mask, uint8_t data){
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	18 2f       	mov	r17, r24
     af8:	d6 2f       	mov	r29, r22
     afa:	c4 2f       	mov	r28, r20
	DEF_CAN_CS_ON;
     afc:	88 b3       	in	r24, 0x18	; 24
     afe:	8f 7e       	andi	r24, 0xEF	; 239
     b00:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_BITMOD); 
     b02:	85 e0       	ldi	r24, 0x05	; 5
     b04:	0e 94 97 07 	call	0xf2e	; 0xf2e <spi_send>
	spi_send(adr);
     b08:	81 2f       	mov	r24, r17
     b0a:	0e 94 97 07 	call	0xf2e	; 0xf2e <spi_send>
	spi_send(mask);
     b0e:	8d 2f       	mov	r24, r29
     b10:	0e 94 97 07 	call	0xf2e	; 0xf2e <spi_send>
	spi_send(data);
     b14:	8c 2f       	mov	r24, r28
     b16:	0e 94 97 07 	call	0xf2e	; 0xf2e <spi_send>
	DEF_CAN_CS_OFF;
     b1a:	88 b3       	in	r24, 0x18	; 24
     b1c:	80 61       	ori	r24, 0x10	; 16
     b1e:	88 bb       	out	0x18, r24	; 24
}
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	08 95       	ret

00000b28 <mcp2515_reset>:


void mcp2515_reset(){
	DEF_CAN_CS_ON;
     b28:	88 b3       	in	r24, 0x18	; 24
     b2a:	8f 7e       	andi	r24, 0xEF	; 239
     b2c:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_RESET);
     b2e:	80 ec       	ldi	r24, 0xC0	; 192
     b30:	0e 94 97 07 	call	0xf2e	; 0xf2e <spi_send>
	DEF_CAN_CS_OFF;
     b34:	88 b3       	in	r24, 0x18	; 24
     b36:	80 61       	ori	r24, 0x10	; 16
     b38:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b3a:	83 ec       	ldi	r24, 0xC3	; 195
     b3c:	99 e0       	ldi	r25, 0x09	; 9
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <mcp2515_reset+0x16>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <mcp2515_reset+0x1c>
     b44:	00 00       	nop
     b46:	08 95       	ret

00000b48 <mcp2515_init>:
#define PS1 //TODO					// *TQ - Positive time compensation for edge phase errors 
#define PS2 //TODO					// *TQ - Negative time compensation for edge phase errors


void mcp2515_init(){
	spi_init();
     b48:	0e 94 91 07 	call	0xf22	; 0xf22 <spi_init>
	// Set chip select pin as output, then keep it inactive (pin low)
	DEF_CAN_CS_ENABLE;
     b4c:	87 b3       	in	r24, 0x17	; 23
     b4e:	80 61       	ori	r24, 0x10	; 16
     b50:	87 bb       	out	0x17, r24	; 23
	DEF_CAN_CS_OFF;
     b52:	88 b3       	in	r24, 0x18	; 24
     b54:	80 61       	ori	r24, 0x10	; 16
     b56:	88 bb       	out	0x18, r24	; 24
	
	mcp2515_reset();
     b58:	0e 94 94 05 	call	0xb28	; 0xb28 <mcp2515_reset>
	uint8_t mode = mcp2515_read(MCP_CANSTAT);
     b5c:	8e e0       	ldi	r24, 0x0E	; 14
     b5e:	0e 94 47 05 	call	0xa8e	; 0xa8e <mcp2515_read>
	if ((mode & MODE_MASK) != MODE_CONFIG){
     b62:	80 7e       	andi	r24, 0xE0	; 224
     b64:	80 38       	cpi	r24, 0x80	; 128
     b66:	21 f0       	breq	.+8      	; 0xb70 <mcp2515_init+0x28>
		printf ("ERROR: MCP2515 is NOT in config mode after reset!\r\n");
     b68:	86 e6       	ldi	r24, 0x66	; 102
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 47 08 	call	0x108e	; 0x108e <puts>
	}

	mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 0); // Enable interrupt bit when Receive Buffer 0 has new data
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	8b e2       	ldi	r24, 0x2B	; 43
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0); // Reset interrupt bit in buffer 0 (must be done to receive next 8 bits)
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	8c e2       	ldi	r24, 0x2C	; 44
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <mcp2515_bit_modify>
	
	// Configure bit timing if out of sync with other nodes.
	mcp2515_write(MCP_CNF1, 0x03);	// BRP (Baud Rate Prescaling) set to 4 (3+1 according to data sheet)
     b90:	63 e0       	ldi	r22, 0x03	; 3
     b92:	8a e2       	ldi	r24, 0x2A	; 42
     b94:	0e 94 59 05 	call	0xab2	; 0xab2 <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0xB1);	// Propagation Segment & PS1 (3+1 for PSeg, 3+1 for PS1)
     b98:	61 eb       	ldi	r22, 0xB1	; 177
     b9a:	89 e2       	ldi	r24, 0x29	; 41
     b9c:	0e 94 59 05 	call	0xab2	; 0xab2 <mcp2515_write>
	mcp2515_write(MCP_CNF3, 0x05);	// PS2 (3+1)
     ba0:	65 e0       	ldi	r22, 0x05	; 5
     ba2:	88 e2       	ldi	r24, 0x28	; 40
     ba4:	0e 94 59 05 	call	0xab2	; 0xab2 <mcp2515_write>

	mcp2515_write(MCP_CANCTRL, MODE_NORMAL); // Enter normal mode
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	8f e0       	ldi	r24, 0x0F	; 15
     bac:	0e 94 59 05 	call	0xab2	; 0xab2 <mcp2515_write>
	mode = mcp2515_read(MCP_CANSTAT);
     bb0:	8e e0       	ldi	r24, 0x0E	; 14
     bb2:	0e 94 47 05 	call	0xa8e	; 0xa8e <mcp2515_read>
	if ((mode & MODE_MASK ) != MODE_NORMAL) {
     bb6:	80 7e       	andi	r24, 0xE0	; 224
     bb8:	21 f0       	breq	.+8      	; 0xbc2 <mcp2515_init+0x7a>
		printf ("ERROR: MCP2515 is NOT in normal mode!\n");
     bba:	8f e3       	ldi	r24, 0x3F	; 63
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 47 08 	call	0x108e	; 0x108e <puts>
     bc2:	08 95       	ret

00000bc4 <menu_func0>:
	if (menu.currentPage->parentMenu == NULL){
		return 0;	// Already in main menu (root) do nothing
	}
	menu.currentPage = menu.currentPage->parentMenu;	// Select parent menu of the current page.
	return 1;
}
     bc4:	8b e0       	ldi	r24, 0x0B	; 11
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	0e 94 47 08 	call	0x108e	; 0x108e <puts>
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	8b e0       	ldi	r24, 0x0B	; 11
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	0e 94 7a 07 	call	0xef4	; 0xef4 <oled_print>
     bd6:	2f e9       	ldi	r18, 0x9F	; 159
     bd8:	86 e8       	ldi	r24, 0x86	; 134
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	21 50       	subi	r18, 0x01	; 1
     bde:	80 40       	sbci	r24, 0x00	; 0
     be0:	90 40       	sbci	r25, 0x00	; 0
     be2:	e1 f7       	brne	.-8      	; 0xbdc <menu_func0+0x18>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <menu_func0+0x22>
     be6:	00 00       	nop
     be8:	2f e9       	ldi	r18, 0x9F	; 159
     bea:	86 e8       	ldi	r24, 0x86	; 134
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	80 40       	sbci	r24, 0x00	; 0
     bf2:	90 40       	sbci	r25, 0x00	; 0
     bf4:	e1 f7       	brne	.-8      	; 0xbee <menu_func0+0x2a>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <menu_func0+0x34>
     bf8:	00 00       	nop
     bfa:	2f e9       	ldi	r18, 0x9F	; 159
     bfc:	86 e8       	ldi	r24, 0x86	; 134
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	21 50       	subi	r18, 0x01	; 1
     c02:	80 40       	sbci	r24, 0x00	; 0
     c04:	90 40       	sbci	r25, 0x00	; 0
     c06:	e1 f7       	brne	.-8      	; 0xc00 <menu_func0+0x3c>
     c08:	00 c0       	rjmp	.+0      	; 0xc0a <menu_func0+0x46>
     c0a:	00 00       	nop
     c0c:	2f e9       	ldi	r18, 0x9F	; 159
     c0e:	86 e8       	ldi	r24, 0x86	; 134
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	21 50       	subi	r18, 0x01	; 1
     c14:	80 40       	sbci	r24, 0x00	; 0
     c16:	90 40       	sbci	r25, 0x00	; 0
     c18:	e1 f7       	brne	.-8      	; 0xc12 <menu_func0+0x4e>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <menu_func0+0x58>
     c1c:	00 00       	nop
     c1e:	2f e9       	ldi	r18, 0x9F	; 159
     c20:	86 e8       	ldi	r24, 0x86	; 134
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	21 50       	subi	r18, 0x01	; 1
     c26:	80 40       	sbci	r24, 0x00	; 0
     c28:	90 40       	sbci	r25, 0x00	; 0
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <menu_func0+0x60>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <menu_func0+0x6a>
     c2e:	00 00       	nop
     c30:	2f e9       	ldi	r18, 0x9F	; 159
     c32:	86 e8       	ldi	r24, 0x86	; 134
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	21 50       	subi	r18, 0x01	; 1
     c38:	80 40       	sbci	r24, 0x00	; 0
     c3a:	90 40       	sbci	r25, 0x00	; 0
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <menu_func0+0x72>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <menu_func0+0x7c>
     c40:	00 00       	nop
     c42:	08 95       	ret

00000c44 <menu_func1>:
     c44:	8f e1       	ldi	r24, 0x1F	; 31
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	0e 94 47 08 	call	0x108e	; 0x108e <puts>
     c4c:	0e 94 1c 07 	call	0xe38	; 0xe38 <oled_reset>
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	8f e1       	ldi	r24, 0x1F	; 31
     c54:	92 e0       	ldi	r25, 0x02	; 2
     c56:	0e 94 7a 07 	call	0xef4	; 0xef4 <oled_print>
     c5a:	2f e3       	ldi	r18, 0x3F	; 63
     c5c:	82 e4       	ldi	r24, 0x42	; 66
     c5e:	9f e0       	ldi	r25, 0x0F	; 15
     c60:	21 50       	subi	r18, 0x01	; 1
     c62:	80 40       	sbci	r24, 0x00	; 0
     c64:	90 40       	sbci	r25, 0x00	; 0
     c66:	e1 f7       	brne	.-8      	; 0xc60 <menu_func1+0x1c>
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <menu_func1+0x26>
     c6a:	00 00       	nop
     c6c:	08 95       	ret

00000c6e <menu_init>:
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	8a e0       	ldi	r24, 0x0A	; 10
     c74:	e4 e3       	ldi	r30, 0x34	; 52
     c76:	f2 e0       	ldi	r31, 0x02	; 2
     c78:	a5 e7       	ldi	r26, 0x75	; 117
     c7a:	b2 e0       	ldi	r27, 0x02	; 2
     c7c:	01 90       	ld	r0, Z+
     c7e:	0d 92       	st	X+, r0
     c80:	8a 95       	dec	r24
     c82:	e1 f7       	brne	.-8      	; 0xc7c <menu_init+0xe>
     c84:	cc e5       	ldi	r28, 0x5C	; 92
     c86:	d2 e0       	ldi	r29, 0x02	; 2
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	88 8f       	std	Y+24, r24	; 0x18
     c8c:	8e e5       	ldi	r24, 0x5E	; 94
     c8e:	92 e0       	ldi	r25, 0x02	; 2
     c90:	99 83       	std	Y+1, r25	; 0x01
     c92:	88 83       	st	Y, r24
     c94:	8b e0       	ldi	r24, 0x0B	; 11
     c96:	ee e3       	ldi	r30, 0x3E	; 62
     c98:	f2 e0       	ldi	r31, 0x02	; 2
     c9a:	a7 ea       	ldi	r26, 0xA7	; 167
     c9c:	b2 e0       	ldi	r27, 0x02	; 2
     c9e:	01 90       	ld	r0, Z+
     ca0:	0d 92       	st	X+, r0
     ca2:	8a 95       	dec	r24
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <menu_init+0x30>
     ca6:	82 ee       	ldi	r24, 0xE2	; 226
     ca8:	95 e0       	ldi	r25, 0x05	; 5
     caa:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <__data_end+0x65>
     cae:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <__data_end+0x64>
     cb2:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <__data_end+0x4a>
     cb6:	80 e9       	ldi	r24, 0x90	; 144
     cb8:	92 e0       	ldi	r25, 0x02	; 2
     cba:	9d 83       	std	Y+5, r25	; 0x05
     cbc:	8c 83       	std	Y+4, r24	; 0x04
     cbe:	8b e0       	ldi	r24, 0x0B	; 11
     cc0:	e9 e4       	ldi	r30, 0x49	; 73
     cc2:	f2 e0       	ldi	r31, 0x02	; 2
     cc4:	a9 ed       	ldi	r26, 0xD9	; 217
     cc6:	b2 e0       	ldi	r27, 0x02	; 2
     cc8:	01 90       	ld	r0, Z+
     cca:	0d 92       	st	X+, r0
     ccc:	8a 95       	dec	r24
     cce:	e1 f7       	brne	.-8      	; 0xcc8 <menu_init+0x5a>
     cd0:	82 e2       	ldi	r24, 0x22	; 34
     cd2:	96 e0       	ldi	r25, 0x06	; 6
     cd4:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <__data_end+0x97>
     cd8:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <__data_end+0x96>
     cdc:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <__data_end+0x7c>
     ce0:	82 ec       	ldi	r24, 0xC2	; 194
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	9f 83       	std	Y+7, r25	; 0x07
     ce6:	8e 83       	std	Y+6, r24	; 0x06
     ce8:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <__data_end+0x98>
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <menu_selectPage>:


void menu_selectPage(){
	menu.currentPage->subMenu[menu.cursor]->run();  // run the function for the selected page
     cf2:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end>
     cf6:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <__data_end+0x1>
     cfa:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <__data_end+0x98>
     cfe:	0e 2e       	mov	r0, r30
     d00:	00 0c       	add	r0, r0
     d02:	ff 0b       	sbc	r31, r31
     d04:	31 96       	adiw	r30, 0x01	; 1
     d06:	ee 0f       	add	r30, r30
     d08:	ff 1f       	adc	r31, r31
     d0a:	e8 0f       	add	r30, r24
     d0c:	f9 1f       	adc	r31, r25
     d0e:	01 90       	ld	r0, Z+
     d10:	f0 81       	ld	r31, Z
     d12:	e0 2d       	mov	r30, r0
     d14:	00 a8       	ldd	r0, Z+48	; 0x30
     d16:	f1 a9       	ldd	r31, Z+49	; 0x31
     d18:	e0 2d       	mov	r30, r0
     d1a:	09 95       	icall
     d1c:	08 95       	ret

00000d1e <menu_setCursor>:
}


bool menu_setCursor(int8_t index){
	// check if index is out of range
	if (index < 0){
     d1e:	88 23       	and	r24, r24
     d20:	5c f0       	brlt	.+22     	; 0xd38 <menu_setCursor+0x1a>
		return 0;	// do nothing
	}
	else if(index >= menu.currentPage->totalSubMenu){
     d22:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <__data_end>
     d26:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <__data_end+0x1>
     d2a:	96 89       	ldd	r25, Z+22	; 0x16
     d2c:	89 17       	cp	r24, r25
     d2e:	34 f4       	brge	.+12     	; 0xd3c <menu_setCursor+0x1e>
		return 0;	// do nothing
	}
	menu.cursor = index;	// update cursor location
     d30:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <__data_end+0x98>
	return 1;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	08 95       	ret


bool menu_setCursor(int8_t index){
	// check if index is out of range
	if (index < 0){
		return 0;	// do nothing
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	08 95       	ret
	}
	else if(index >= menu.currentPage->totalSubMenu){
		return 0;	// do nothing
     d3c:	80 e0       	ldi	r24, 0x00	; 0
	}
	menu.cursor = index;	// update cursor location
	return 1;
}
     d3e:	08 95       	ret

00000d40 <menu_moveCursor>:


bool menu_moveCursor(int8_t direction){
	int8_t index = menu.cursor + direction;
     d40:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <__data_end+0x98>
	menu_setCursor(index);
     d44:	89 0f       	add	r24, r25
     d46:	0e 94 8f 06 	call	0xd1e	; 0xd1e <menu_setCursor>
}
     d4a:	08 95       	ret

00000d4c <oled_write_data>:
void oled_write_line(uint8_t page){
	oled_goto_page(page);
	for (uint8_t i = 0; i < 128; i++){
		oled_write_data(0x01);
	}
}
     d4c:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xf01>
     d50:	08 95       	ret

00000d52 <oled_write_cmd>:
     d52:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd01>
     d56:	08 95       	ret

00000d58 <oled_init>:
     d58:	8e ea       	ldi	r24, 0xAE	; 174
     d5a:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     d5e:	81 ea       	ldi	r24, 0xA1	; 161
     d60:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     d64:	8a ed       	ldi	r24, 0xDA	; 218
     d66:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     d6a:	82 e1       	ldi	r24, 0x12	; 18
     d6c:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     d70:	88 ec       	ldi	r24, 0xC8	; 200
     d72:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     d76:	88 ea       	ldi	r24, 0xA8	; 168
     d78:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     d7c:	8f e3       	ldi	r24, 0x3F	; 63
     d7e:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     d82:	85 ed       	ldi	r24, 0xD5	; 213
     d84:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     d88:	80 e8       	ldi	r24, 0x80	; 128
     d8a:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     d8e:	81 e8       	ldi	r24, 0x81	; 129
     d90:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     d94:	80 e5       	ldi	r24, 0x50	; 80
     d96:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     d9a:	89 ed       	ldi	r24, 0xD9	; 217
     d9c:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     da0:	81 e2       	ldi	r24, 0x21	; 33
     da2:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     da6:	80 e2       	ldi	r24, 0x20	; 32
     da8:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     db2:	8b ed       	ldi	r24, 0xDB	; 219
     db4:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     db8:	80 e3       	ldi	r24, 0x30	; 48
     dba:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     dbe:	8d ea       	ldi	r24, 0xAD	; 173
     dc0:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     dca:	84 ea       	ldi	r24, 0xA4	; 164
     dcc:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     dd0:	86 ea       	ldi	r24, 0xA6	; 166
     dd2:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     dd6:	8f ea       	ldi	r24, 0xAF	; 175
     dd8:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     ddc:	08 95       	ret

00000dde <oled_goto_page>:
     dde:	87 70       	andi	r24, 0x07	; 7
     de0:	80 6b       	ori	r24, 0xB0	; 176
     de2:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     de6:	08 95       	ret

00000de8 <oled_goto_col>:
     de8:	cf 93       	push	r28
     dea:	c8 2f       	mov	r28, r24
     dec:	8f 70       	andi	r24, 0x0F	; 15
     dee:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     df2:	8c 2f       	mov	r24, r28
     df4:	82 95       	swap	r24
     df6:	8f 70       	andi	r24, 0x0F	; 15
     df8:	80 61       	ori	r24, 0x10	; 16
     dfa:	0e 94 a9 06 	call	0xd52	; 0xd52 <oled_write_cmd>
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <oled_pos>:
     e02:	cf 93       	push	r28
     e04:	c6 2f       	mov	r28, r22
     e06:	0e 94 ef 06 	call	0xdde	; 0xdde <oled_goto_page>
     e0a:	8c 2f       	mov	r24, r28
     e0c:	0e 94 f4 06 	call	0xde8	; 0xde8 <oled_goto_col>
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <oled_home>:
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 01 07 	call	0xe02	; 0xe02 <oled_pos>
     e1c:	08 95       	ret

00000e1e <oled_clear_line>:


void oled_clear_line(uint8_t page){
     e1e:	cf 93       	push	r28
	oled_goto_page(page);
     e20:	0e 94 ef 06 	call	0xdde	; 0xdde <oled_goto_page>
	for (uint8_t i = 0; i < 128; i++){
     e24:	c0 e0       	ldi	r28, 0x00	; 0
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <oled_clear_line+0x12>
		oled_write_data(0x00);
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <oled_write_data>
}


void oled_clear_line(uint8_t page){
	oled_goto_page(page);
	for (uint8_t i = 0; i < 128; i++){
     e2e:	cf 5f       	subi	r28, 0xFF	; 255
     e30:	cc 23       	and	r28, r28
     e32:	d4 f7       	brge	.-12     	; 0xe28 <oled_clear_line+0xa>
		oled_write_data(0x00);
	}
}
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <oled_reset>:


void oled_reset(){
     e38:	cf 93       	push	r28
	for (uint8_t i=0; i < 8; i++){
     e3a:	c0 e0       	ldi	r28, 0x00	; 0
     e3c:	04 c0       	rjmp	.+8      	; 0xe46 <oled_reset+0xe>
		oled_clear_line(i);
     e3e:	8c 2f       	mov	r24, r28
     e40:	0e 94 0f 07 	call	0xe1e	; 0xe1e <oled_clear_line>
	}
}


void oled_reset(){
	for (uint8_t i=0; i < 8; i++){
     e44:	cf 5f       	subi	r28, 0xFF	; 255
     e46:	c8 30       	cpi	r28, 0x08	; 8
     e48:	d0 f3       	brcs	.-12     	; 0xe3e <oled_reset+0x6>
		oled_clear_line(i);
	}
	oled_home();
     e4a:	0e 94 0a 07 	call	0xe14	; 0xe14 <oled_home>
}
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <oled_printChar>:


void oled_printChar(char c, char font){
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
     e56:	90 ee       	ldi	r25, 0xE0	; 224
     e58:	98 0f       	add	r25, r24
     e5a:	90 36       	cpi	r25, 0x60	; 96
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <oled_printChar+0xe>
     e5e:	47 c0       	rjmp	.+142    	; 0xeee <oled_printChar+0x9c>
     e60:	c8 2f       	mov	r28, r24
		switch (font){
     e62:	64 30       	cpi	r22, 0x04	; 4
     e64:	99 f0       	breq	.+38     	; 0xe8c <oled_printChar+0x3a>
     e66:	68 30       	cpi	r22, 0x08	; 8
     e68:	39 f1       	breq	.+78     	; 0xeb8 <oled_printChar+0x66>
     e6a:	3e c0       	rjmp	.+124    	; 0xee8 <oled_printChar+0x96>
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
     e6c:	ec 2f       	mov	r30, r28
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	b0 97       	sbiw	r30, 0x20	; 32
     e72:	ee 0f       	add	r30, r30
     e74:	ff 1f       	adc	r31, r31
     e76:	ee 0f       	add	r30, r30
     e78:	ff 1f       	adc	r31, r31
     e7a:	ed 0f       	add	r30, r29
     e7c:	f1 1d       	adc	r31, r1
     e7e:	e0 59       	subi	r30, 0x90	; 144
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	84 91       	lpm	r24, Z
     e84:	0e 94 a6 06 	call	0xd4c	; 0xd4c <oled_write_data>
void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
     e88:	df 5f       	subi	r29, 0xFF	; 255
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <oled_printChar+0x3c>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
     e8c:	d0 e0       	ldi	r29, 0x00	; 0
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
     e8e:	d4 30       	cpi	r29, 0x04	; 4
     e90:	68 f3       	brcs	.-38     	; 0xe6c <oled_printChar+0x1a>
     e92:	2d c0       	rjmp	.+90     	; 0xeee <oled_printChar+0x9c>
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
     e94:	ec 2f       	mov	r30, r28
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	b0 97       	sbiw	r30, 0x20	; 32
     e9a:	ee 0f       	add	r30, r30
     e9c:	ff 1f       	adc	r31, r31
     e9e:	ee 0f       	add	r30, r30
     ea0:	ff 1f       	adc	r31, r31
     ea2:	ee 0f       	add	r30, r30
     ea4:	ff 1f       	adc	r31, r31
     ea6:	ed 0f       	add	r30, r29
     ea8:	f1 1d       	adc	r31, r1
     eaa:	e9 53       	subi	r30, 0x39	; 57
     eac:	fc 4f       	sbci	r31, 0xFC	; 252
     eae:	84 91       	lpm	r24, Z
     eb0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <oled_write_data>
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
     eb4:	df 5f       	subi	r29, 0xFF	; 255
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <oled_printChar+0x68>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
     eb8:	d0 e0       	ldi	r29, 0x00	; 0
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
     eba:	d8 30       	cpi	r29, 0x08	; 8
     ebc:	58 f3       	brcs	.-42     	; 0xe94 <oled_printChar+0x42>
     ebe:	17 c0       	rjmp	.+46     	; 0xeee <oled_printChar+0x9c>
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
					oled_write_data(pgm_read_byte(&font5[c-32][i]));
     ec0:	2c 2f       	mov	r18, r28
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	20 52       	subi	r18, 0x20	; 32
     ec6:	31 09       	sbc	r19, r1
     ec8:	f9 01       	movw	r30, r18
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	e2 0f       	add	r30, r18
     ed4:	f3 1f       	adc	r31, r19
     ed6:	ed 0f       	add	r30, r29
     ed8:	f1 1d       	adc	r31, r1
     eda:	e4 51       	subi	r30, 0x14	; 20
     edc:	fe 4f       	sbci	r31, 0xFE	; 254
     ede:	84 91       	lpm	r24, Z
     ee0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <oled_write_data>
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
     ee4:	df 5f       	subi	r29, 0xFF	; 255
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <oled_printChar+0x98>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
     ee8:	d0 e0       	ldi	r29, 0x00	; 0
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
     eea:	d5 30       	cpi	r29, 0x05	; 5
     eec:	48 f3       	brcs	.-46     	; 0xec0 <oled_printChar+0x6e>
					oled_write_data(pgm_read_byte(&font5[c-32][i]));
				}
				break;
		}
	}
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	08 95       	ret

00000ef4 <oled_print>:


// Print strings to OLED
void oled_print(const char* data, char font){
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	8c 01       	movw	r16, r24
	char f = 5; // Default font (5x8 NORMAL)
	if (f == 4 || f == 8){ // Selected fonts 4x8 SMALL or 8x8 LARGE
		f = font;
	}
	
	int i = 0;
     efe:	c0 e0       	ldi	r28, 0x00	; 0
     f00:	d0 e0       	ldi	r29, 0x00	; 0
     f02:	04 c0       	rjmp	.+8      	; 0xf0c <oled_print+0x18>
	while(data[i] != '\0'){
		oled_printChar(data[i], f);
     f04:	65 e0       	ldi	r22, 0x05	; 5
     f06:	0e 94 29 07 	call	0xe52	; 0xe52 <oled_printChar>
		++i;
     f0a:	21 96       	adiw	r28, 0x01	; 1
	if (f == 4 || f == 8){ // Selected fonts 4x8 SMALL or 8x8 LARGE
		f = font;
	}
	
	int i = 0;
	while(data[i] != '\0'){
     f0c:	f8 01       	movw	r30, r16
     f0e:	ec 0f       	add	r30, r28
     f10:	fd 1f       	adc	r31, r29
     f12:	80 81       	ld	r24, Z
     f14:	81 11       	cpse	r24, r1
     f16:	f6 cf       	rjmp	.-20     	; 0xf04 <oled_print+0x10>
		oled_printChar(data[i], f);
		++i;
	}
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	08 95       	ret

00000f22 <spi_init>:
#include <avr/io.h>

// Initialize as master
// Code modified from ATMega162 data sheet
void spi_init(void){
	DDRB |= (1 << PB5)|(1 << PB7); // MOSI out, SCK out
     f22:	87 b3       	in	r24, 0x17	; 23
     f24:	80 6a       	ori	r24, 0xA0	; 160
     f26:	87 bb       	out	0x17, r24	; 23
	// Enable SPI as master (SPE, MSTR)
	// Set clock rate F_CPU/16 (SPR0)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     f28:	81 e5       	ldi	r24, 0x51	; 81
     f2a:	8d b9       	out	0x0d, r24	; 13
     f2c:	08 95       	ret

00000f2e <spi_send>:
}


// Send data as master
void spi_send(char cData){
	SPDR = cData;
     f2e:	8f b9       	out	0x0f, r24	; 15
	
	// Wait for transmission complete
	while(!(SPSR & 1<<SPIF)){
     f30:	77 9b       	sbis	0x0e, 7	; 14
     f32:	fe cf       	rjmp	.-4      	; 0xf30 <spi_send+0x2>
		;
	}
}
     f34:	08 95       	ret

00000f36 <spi_recv>:

// Receive data as master
// Same as sending
// Moves ring buffer by 8 bits to receive 8 bits from slave
uint8_t spi_recv(void){
	spi_send(0);
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	0e 94 97 07 	call	0xf2e	; 0xf2e <spi_send>
	return SPDR;
     f3c:	8f b1       	in	r24, 0x0f	; 15
     f3e:	08 95       	ret

00000f40 <SRAM_init>:
#include <avr/io.h>
#include <inttypes.h> // Needed for uint16_t


void SRAM_init() {
	MCUCR |= (1 << SRE); // Enable SRAM
     f40:	85 b7       	in	r24, 0x35	; 53
     f42:	80 68       	ori	r24, 0x80	; 128
     f44:	85 bf       	out	0x35, r24	; 53
	SFIOR = (1 << XMM2); // Masks PC4-PC7 to make sure JTAG remains untouched
     f46:	80 e2       	ldi	r24, 0x20	; 32
     f48:	80 bf       	out	0x30, r24	; 48
     f4a:	08 95       	ret

00000f4c <UART_receive>:
#include <stdio.h>
#include <avr/io.h>


int UART_receive(FILE * file) {
    while (!(UCSR0A & (1 << RXC0)));  // Wait until data is available to read
     f4c:	5f 9b       	sbis	0x0b, 7	; 11
     f4e:	fe cf       	rjmp	.-4      	; 0xf4c <UART_receive>
    return UDR0;  // Return the received data
     f50:	8c b1       	in	r24, 0x0c	; 12
}
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	08 95       	ret

00000f56 <UART_transmit>:


int UART_transmit(char data, FILE * file) {
    while (!(UCSR0A & (1 << UDRE0)));  // Wait for the data register to be empty
     f56:	5d 9b       	sbis	0x0b, 5	; 11
     f58:	fe cf       	rjmp	.-4      	; 0xf56 <UART_transmit>
    UDR0 = data;  // Load the data into the register for transmission
     f5a:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	08 95       	ret

00000f62 <UART_init>:


void UART_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     f62:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     f64:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     f66:	88 e1       	ldi	r24, 0x18	; 24
     f68:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, synchronous mode */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     f6a:	8e e8       	ldi	r24, 0x8E	; 142
     f6c:	80 bd       	out	0x20, r24	; 32
	// Make the transmit & receive functions write to a stream / file
	fdevopen(UART_transmit, UART_receive);
     f6e:	66 ea       	ldi	r22, 0xA6	; 166
     f70:	77 e0       	ldi	r23, 0x07	; 7
     f72:	8b ea       	ldi	r24, 0xAB	; 171
     f74:	97 e0       	ldi	r25, 0x07	; 7
     f76:	0e 94 e6 07 	call	0xfcc	; 0xfcc <fdevopen>
     f7a:	08 95       	ret

00000f7c <__divmodhi4>:
     f7c:	97 fb       	bst	r25, 7
     f7e:	07 2e       	mov	r0, r23
     f80:	16 f4       	brtc	.+4      	; 0xf86 <__divmodhi4+0xa>
     f82:	00 94       	com	r0
     f84:	07 d0       	rcall	.+14     	; 0xf94 <__divmodhi4_neg1>
     f86:	77 fd       	sbrc	r23, 7
     f88:	09 d0       	rcall	.+18     	; 0xf9c <__divmodhi4_neg2>
     f8a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__udivmodhi4>
     f8e:	07 fc       	sbrc	r0, 7
     f90:	05 d0       	rcall	.+10     	; 0xf9c <__divmodhi4_neg2>
     f92:	3e f4       	brtc	.+14     	; 0xfa2 <__divmodhi4_exit>

00000f94 <__divmodhi4_neg1>:
     f94:	90 95       	com	r25
     f96:	81 95       	neg	r24
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	08 95       	ret

00000f9c <__divmodhi4_neg2>:
     f9c:	70 95       	com	r23
     f9e:	61 95       	neg	r22
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255

00000fa2 <__divmodhi4_exit>:
     fa2:	08 95       	ret

00000fa4 <__udivmodhi4>:
     fa4:	aa 1b       	sub	r26, r26
     fa6:	bb 1b       	sub	r27, r27
     fa8:	51 e1       	ldi	r21, 0x11	; 17
     faa:	07 c0       	rjmp	.+14     	; 0xfba <__udivmodhi4_ep>

00000fac <__udivmodhi4_loop>:
     fac:	aa 1f       	adc	r26, r26
     fae:	bb 1f       	adc	r27, r27
     fb0:	a6 17       	cp	r26, r22
     fb2:	b7 07       	cpc	r27, r23
     fb4:	10 f0       	brcs	.+4      	; 0xfba <__udivmodhi4_ep>
     fb6:	a6 1b       	sub	r26, r22
     fb8:	b7 0b       	sbc	r27, r23

00000fba <__udivmodhi4_ep>:
     fba:	88 1f       	adc	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	5a 95       	dec	r21
     fc0:	a9 f7       	brne	.-22     	; 0xfac <__udivmodhi4_loop>
     fc2:	80 95       	com	r24
     fc4:	90 95       	com	r25
     fc6:	bc 01       	movw	r22, r24
     fc8:	cd 01       	movw	r24, r26
     fca:	08 95       	ret

00000fcc <fdevopen>:
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	31 f4       	brne	.+12     	; 0xfe4 <fdevopen+0x18>
     fd8:	61 15       	cp	r22, r1
     fda:	71 05       	cpc	r23, r1
     fdc:	19 f4       	brne	.+6      	; 0xfe4 <fdevopen+0x18>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	3a c0       	rjmp	.+116    	; 0x1058 <fdevopen+0x8c>
     fe4:	8b 01       	movw	r16, r22
     fe6:	ec 01       	movw	r28, r24
     fe8:	6e e0       	ldi	r22, 0x0E	; 14
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <calloc>
     ff4:	fc 01       	movw	r30, r24
     ff6:	89 2b       	or	r24, r25
     ff8:	91 f3       	breq	.-28     	; 0xfde <fdevopen+0x12>
     ffa:	80 e8       	ldi	r24, 0x80	; 128
     ffc:	83 83       	std	Z+3, r24	; 0x03
     ffe:	01 15       	cp	r16, r1
    1000:	11 05       	cpc	r17, r1
    1002:	71 f0       	breq	.+28     	; 0x1020 <fdevopen+0x54>
    1004:	13 87       	std	Z+11, r17	; 0x0b
    1006:	02 87       	std	Z+10, r16	; 0x0a
    1008:	81 e8       	ldi	r24, 0x81	; 129
    100a:	83 83       	std	Z+3, r24	; 0x03
    100c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <__iob>
    1010:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <__iob+0x1>
    1014:	89 2b       	or	r24, r25
    1016:	21 f4       	brne	.+8      	; 0x1020 <fdevopen+0x54>
    1018:	f0 93 f6 02 	sts	0x02F6, r31	; 0x8002f6 <__iob+0x1>
    101c:	e0 93 f5 02 	sts	0x02F5, r30	; 0x8002f5 <__iob>
    1020:	20 97       	sbiw	r28, 0x00	; 0
    1022:	c9 f0       	breq	.+50     	; 0x1056 <fdevopen+0x8a>
    1024:	d1 87       	std	Z+9, r29	; 0x09
    1026:	c0 87       	std	Z+8, r28	; 0x08
    1028:	83 81       	ldd	r24, Z+3	; 0x03
    102a:	82 60       	ori	r24, 0x02	; 2
    102c:	83 83       	std	Z+3, r24	; 0x03
    102e:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <__iob+0x2>
    1032:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <__iob+0x3>
    1036:	89 2b       	or	r24, r25
    1038:	71 f4       	brne	.+28     	; 0x1056 <fdevopen+0x8a>
    103a:	f0 93 f8 02 	sts	0x02F8, r31	; 0x8002f8 <__iob+0x3>
    103e:	e0 93 f7 02 	sts	0x02F7, r30	; 0x8002f7 <__iob+0x2>
    1042:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <__iob+0x4>
    1046:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <__iob+0x5>
    104a:	89 2b       	or	r24, r25
    104c:	21 f4       	brne	.+8      	; 0x1056 <fdevopen+0x8a>
    104e:	f0 93 fa 02 	sts	0x02FA, r31	; 0x8002fa <__iob+0x5>
    1052:	e0 93 f9 02 	sts	0x02F9, r30	; 0x8002f9 <__iob+0x4>
    1056:	cf 01       	movw	r24, r30
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	08 95       	ret

00001062 <printf>:
    1062:	a0 e0       	ldi	r26, 0x00	; 0
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e7 e3       	ldi	r30, 0x37	; 55
    1068:	f8 e0       	ldi	r31, 0x08	; 8
    106a:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__prologue_saves__+0x20>
    106e:	ae 01       	movw	r20, r28
    1070:	4b 5f       	subi	r20, 0xFB	; 251
    1072:	5f 4f       	sbci	r21, 0xFF	; 255
    1074:	fa 01       	movw	r30, r20
    1076:	61 91       	ld	r22, Z+
    1078:	71 91       	ld	r23, Z+
    107a:	af 01       	movw	r20, r30
    107c:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <__iob+0x2>
    1080:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <__iob+0x3>
    1084:	0e 94 77 08 	call	0x10ee	; 0x10ee <vfprintf>
    1088:	e2 e0       	ldi	r30, 0x02	; 2
    108a:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__epilogue_restores__+0x20>

0000108e <puts>:
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	e0 91 f7 02 	lds	r30, 0x02F7	; 0x8002f7 <__iob+0x2>
    109a:	f0 91 f8 02 	lds	r31, 0x02F8	; 0x8002f8 <__iob+0x3>
    109e:	23 81       	ldd	r18, Z+3	; 0x03
    10a0:	21 ff       	sbrs	r18, 1
    10a2:	1b c0       	rjmp	.+54     	; 0x10da <puts+0x4c>
    10a4:	8c 01       	movw	r16, r24
    10a6:	d0 e0       	ldi	r29, 0x00	; 0
    10a8:	c0 e0       	ldi	r28, 0x00	; 0
    10aa:	f8 01       	movw	r30, r16
    10ac:	81 91       	ld	r24, Z+
    10ae:	8f 01       	movw	r16, r30
    10b0:	60 91 f7 02 	lds	r22, 0x02F7	; 0x8002f7 <__iob+0x2>
    10b4:	70 91 f8 02 	lds	r23, 0x02F8	; 0x8002f8 <__iob+0x3>
    10b8:	db 01       	movw	r26, r22
    10ba:	18 96       	adiw	r26, 0x08	; 8
    10bc:	ed 91       	ld	r30, X+
    10be:	fc 91       	ld	r31, X
    10c0:	19 97       	sbiw	r26, 0x09	; 9
    10c2:	88 23       	and	r24, r24
    10c4:	31 f0       	breq	.+12     	; 0x10d2 <puts+0x44>
    10c6:	09 95       	icall
    10c8:	89 2b       	or	r24, r25
    10ca:	79 f3       	breq	.-34     	; 0x10aa <puts+0x1c>
    10cc:	df ef       	ldi	r29, 0xFF	; 255
    10ce:	cf ef       	ldi	r28, 0xFF	; 255
    10d0:	ec cf       	rjmp	.-40     	; 0x10aa <puts+0x1c>
    10d2:	8a e0       	ldi	r24, 0x0A	; 10
    10d4:	09 95       	icall
    10d6:	89 2b       	or	r24, r25
    10d8:	19 f0       	breq	.+6      	; 0x10e0 <puts+0x52>
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	9f ef       	ldi	r25, 0xFF	; 255
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <puts+0x56>
    10e0:	8d 2f       	mov	r24, r29
    10e2:	9c 2f       	mov	r25, r28
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret

000010ee <vfprintf>:
    10ee:	ab e0       	ldi	r26, 0x0B	; 11
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ed e7       	ldi	r30, 0x7D	; 125
    10f4:	f8 e0       	ldi	r31, 0x08	; 8
    10f6:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__prologue_saves__>
    10fa:	6c 01       	movw	r12, r24
    10fc:	7b 01       	movw	r14, r22
    10fe:	8a 01       	movw	r16, r20
    1100:	fc 01       	movw	r30, r24
    1102:	17 82       	std	Z+7, r1	; 0x07
    1104:	16 82       	std	Z+6, r1	; 0x06
    1106:	83 81       	ldd	r24, Z+3	; 0x03
    1108:	81 ff       	sbrs	r24, 1
    110a:	cc c1       	rjmp	.+920    	; 0x14a4 <vfprintf+0x3b6>
    110c:	ce 01       	movw	r24, r28
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	3c 01       	movw	r6, r24
    1112:	f6 01       	movw	r30, r12
    1114:	93 81       	ldd	r25, Z+3	; 0x03
    1116:	f7 01       	movw	r30, r14
    1118:	93 fd       	sbrc	r25, 3
    111a:	85 91       	lpm	r24, Z+
    111c:	93 ff       	sbrs	r25, 3
    111e:	81 91       	ld	r24, Z+
    1120:	7f 01       	movw	r14, r30
    1122:	88 23       	and	r24, r24
    1124:	09 f4       	brne	.+2      	; 0x1128 <vfprintf+0x3a>
    1126:	ba c1       	rjmp	.+884    	; 0x149c <vfprintf+0x3ae>
    1128:	85 32       	cpi	r24, 0x25	; 37
    112a:	39 f4       	brne	.+14     	; 0x113a <vfprintf+0x4c>
    112c:	93 fd       	sbrc	r25, 3
    112e:	85 91       	lpm	r24, Z+
    1130:	93 ff       	sbrs	r25, 3
    1132:	81 91       	ld	r24, Z+
    1134:	7f 01       	movw	r14, r30
    1136:	85 32       	cpi	r24, 0x25	; 37
    1138:	29 f4       	brne	.+10     	; 0x1144 <vfprintf+0x56>
    113a:	b6 01       	movw	r22, r12
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    1142:	e7 cf       	rjmp	.-50     	; 0x1112 <vfprintf+0x24>
    1144:	91 2c       	mov	r9, r1
    1146:	21 2c       	mov	r2, r1
    1148:	31 2c       	mov	r3, r1
    114a:	ff e1       	ldi	r31, 0x1F	; 31
    114c:	f3 15       	cp	r31, r3
    114e:	d8 f0       	brcs	.+54     	; 0x1186 <vfprintf+0x98>
    1150:	8b 32       	cpi	r24, 0x2B	; 43
    1152:	79 f0       	breq	.+30     	; 0x1172 <vfprintf+0x84>
    1154:	38 f4       	brcc	.+14     	; 0x1164 <vfprintf+0x76>
    1156:	80 32       	cpi	r24, 0x20	; 32
    1158:	79 f0       	breq	.+30     	; 0x1178 <vfprintf+0x8a>
    115a:	83 32       	cpi	r24, 0x23	; 35
    115c:	a1 f4       	brne	.+40     	; 0x1186 <vfprintf+0x98>
    115e:	23 2d       	mov	r18, r3
    1160:	20 61       	ori	r18, 0x10	; 16
    1162:	1d c0       	rjmp	.+58     	; 0x119e <vfprintf+0xb0>
    1164:	8d 32       	cpi	r24, 0x2D	; 45
    1166:	61 f0       	breq	.+24     	; 0x1180 <vfprintf+0x92>
    1168:	80 33       	cpi	r24, 0x30	; 48
    116a:	69 f4       	brne	.+26     	; 0x1186 <vfprintf+0x98>
    116c:	23 2d       	mov	r18, r3
    116e:	21 60       	ori	r18, 0x01	; 1
    1170:	16 c0       	rjmp	.+44     	; 0x119e <vfprintf+0xb0>
    1172:	83 2d       	mov	r24, r3
    1174:	82 60       	ori	r24, 0x02	; 2
    1176:	38 2e       	mov	r3, r24
    1178:	e3 2d       	mov	r30, r3
    117a:	e4 60       	ori	r30, 0x04	; 4
    117c:	3e 2e       	mov	r3, r30
    117e:	2a c0       	rjmp	.+84     	; 0x11d4 <vfprintf+0xe6>
    1180:	f3 2d       	mov	r31, r3
    1182:	f8 60       	ori	r31, 0x08	; 8
    1184:	1d c0       	rjmp	.+58     	; 0x11c0 <vfprintf+0xd2>
    1186:	37 fc       	sbrc	r3, 7
    1188:	2d c0       	rjmp	.+90     	; 0x11e4 <vfprintf+0xf6>
    118a:	20 ed       	ldi	r18, 0xD0	; 208
    118c:	28 0f       	add	r18, r24
    118e:	2a 30       	cpi	r18, 0x0A	; 10
    1190:	40 f0       	brcs	.+16     	; 0x11a2 <vfprintf+0xb4>
    1192:	8e 32       	cpi	r24, 0x2E	; 46
    1194:	b9 f4       	brne	.+46     	; 0x11c4 <vfprintf+0xd6>
    1196:	36 fc       	sbrc	r3, 6
    1198:	81 c1       	rjmp	.+770    	; 0x149c <vfprintf+0x3ae>
    119a:	23 2d       	mov	r18, r3
    119c:	20 64       	ori	r18, 0x40	; 64
    119e:	32 2e       	mov	r3, r18
    11a0:	19 c0       	rjmp	.+50     	; 0x11d4 <vfprintf+0xe6>
    11a2:	36 fe       	sbrs	r3, 6
    11a4:	06 c0       	rjmp	.+12     	; 0x11b2 <vfprintf+0xc4>
    11a6:	8a e0       	ldi	r24, 0x0A	; 10
    11a8:	98 9e       	mul	r9, r24
    11aa:	20 0d       	add	r18, r0
    11ac:	11 24       	eor	r1, r1
    11ae:	92 2e       	mov	r9, r18
    11b0:	11 c0       	rjmp	.+34     	; 0x11d4 <vfprintf+0xe6>
    11b2:	ea e0       	ldi	r30, 0x0A	; 10
    11b4:	2e 9e       	mul	r2, r30
    11b6:	20 0d       	add	r18, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	22 2e       	mov	r2, r18
    11bc:	f3 2d       	mov	r31, r3
    11be:	f0 62       	ori	r31, 0x20	; 32
    11c0:	3f 2e       	mov	r3, r31
    11c2:	08 c0       	rjmp	.+16     	; 0x11d4 <vfprintf+0xe6>
    11c4:	8c 36       	cpi	r24, 0x6C	; 108
    11c6:	21 f4       	brne	.+8      	; 0x11d0 <vfprintf+0xe2>
    11c8:	83 2d       	mov	r24, r3
    11ca:	80 68       	ori	r24, 0x80	; 128
    11cc:	38 2e       	mov	r3, r24
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <vfprintf+0xe6>
    11d0:	88 36       	cpi	r24, 0x68	; 104
    11d2:	41 f4       	brne	.+16     	; 0x11e4 <vfprintf+0xf6>
    11d4:	f7 01       	movw	r30, r14
    11d6:	93 fd       	sbrc	r25, 3
    11d8:	85 91       	lpm	r24, Z+
    11da:	93 ff       	sbrs	r25, 3
    11dc:	81 91       	ld	r24, Z+
    11de:	7f 01       	movw	r14, r30
    11e0:	81 11       	cpse	r24, r1
    11e2:	b3 cf       	rjmp	.-154    	; 0x114a <vfprintf+0x5c>
    11e4:	98 2f       	mov	r25, r24
    11e6:	9f 7d       	andi	r25, 0xDF	; 223
    11e8:	95 54       	subi	r25, 0x45	; 69
    11ea:	93 30       	cpi	r25, 0x03	; 3
    11ec:	28 f4       	brcc	.+10     	; 0x11f8 <vfprintf+0x10a>
    11ee:	0c 5f       	subi	r16, 0xFC	; 252
    11f0:	1f 4f       	sbci	r17, 0xFF	; 255
    11f2:	9f e3       	ldi	r25, 0x3F	; 63
    11f4:	99 83       	std	Y+1, r25	; 0x01
    11f6:	0d c0       	rjmp	.+26     	; 0x1212 <vfprintf+0x124>
    11f8:	83 36       	cpi	r24, 0x63	; 99
    11fa:	31 f0       	breq	.+12     	; 0x1208 <vfprintf+0x11a>
    11fc:	83 37       	cpi	r24, 0x73	; 115
    11fe:	71 f0       	breq	.+28     	; 0x121c <vfprintf+0x12e>
    1200:	83 35       	cpi	r24, 0x53	; 83
    1202:	09 f0       	breq	.+2      	; 0x1206 <vfprintf+0x118>
    1204:	59 c0       	rjmp	.+178    	; 0x12b8 <vfprintf+0x1ca>
    1206:	21 c0       	rjmp	.+66     	; 0x124a <vfprintf+0x15c>
    1208:	f8 01       	movw	r30, r16
    120a:	80 81       	ld	r24, Z
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	0e 5f       	subi	r16, 0xFE	; 254
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	88 24       	eor	r8, r8
    1214:	83 94       	inc	r8
    1216:	91 2c       	mov	r9, r1
    1218:	53 01       	movw	r10, r6
    121a:	13 c0       	rjmp	.+38     	; 0x1242 <vfprintf+0x154>
    121c:	28 01       	movw	r4, r16
    121e:	f2 e0       	ldi	r31, 0x02	; 2
    1220:	4f 0e       	add	r4, r31
    1222:	51 1c       	adc	r5, r1
    1224:	f8 01       	movw	r30, r16
    1226:	a0 80       	ld	r10, Z
    1228:	b1 80       	ldd	r11, Z+1	; 0x01
    122a:	36 fe       	sbrs	r3, 6
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <vfprintf+0x146>
    122e:	69 2d       	mov	r22, r9
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <vfprintf+0x14a>
    1234:	6f ef       	ldi	r22, 0xFF	; 255
    1236:	7f ef       	ldi	r23, 0xFF	; 255
    1238:	c5 01       	movw	r24, r10
    123a:	0e 94 a7 0b 	call	0x174e	; 0x174e <strnlen>
    123e:	4c 01       	movw	r8, r24
    1240:	82 01       	movw	r16, r4
    1242:	f3 2d       	mov	r31, r3
    1244:	ff 77       	andi	r31, 0x7F	; 127
    1246:	3f 2e       	mov	r3, r31
    1248:	16 c0       	rjmp	.+44     	; 0x1276 <vfprintf+0x188>
    124a:	28 01       	movw	r4, r16
    124c:	22 e0       	ldi	r18, 0x02	; 2
    124e:	42 0e       	add	r4, r18
    1250:	51 1c       	adc	r5, r1
    1252:	f8 01       	movw	r30, r16
    1254:	a0 80       	ld	r10, Z
    1256:	b1 80       	ldd	r11, Z+1	; 0x01
    1258:	36 fe       	sbrs	r3, 6
    125a:	03 c0       	rjmp	.+6      	; 0x1262 <vfprintf+0x174>
    125c:	69 2d       	mov	r22, r9
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <vfprintf+0x178>
    1262:	6f ef       	ldi	r22, 0xFF	; 255
    1264:	7f ef       	ldi	r23, 0xFF	; 255
    1266:	c5 01       	movw	r24, r10
    1268:	0e 94 95 0b 	call	0x172a	; 0x172a <strnlen_P>
    126c:	4c 01       	movw	r8, r24
    126e:	f3 2d       	mov	r31, r3
    1270:	f0 68       	ori	r31, 0x80	; 128
    1272:	3f 2e       	mov	r3, r31
    1274:	82 01       	movw	r16, r4
    1276:	33 fc       	sbrc	r3, 3
    1278:	1b c0       	rjmp	.+54     	; 0x12b0 <vfprintf+0x1c2>
    127a:	82 2d       	mov	r24, r2
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	88 16       	cp	r8, r24
    1280:	99 06       	cpc	r9, r25
    1282:	b0 f4       	brcc	.+44     	; 0x12b0 <vfprintf+0x1c2>
    1284:	b6 01       	movw	r22, r12
    1286:	80 e2       	ldi	r24, 0x20	; 32
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    128e:	2a 94       	dec	r2
    1290:	f4 cf       	rjmp	.-24     	; 0x127a <vfprintf+0x18c>
    1292:	f5 01       	movw	r30, r10
    1294:	37 fc       	sbrc	r3, 7
    1296:	85 91       	lpm	r24, Z+
    1298:	37 fe       	sbrs	r3, 7
    129a:	81 91       	ld	r24, Z+
    129c:	5f 01       	movw	r10, r30
    129e:	b6 01       	movw	r22, r12
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    12a6:	21 10       	cpse	r2, r1
    12a8:	2a 94       	dec	r2
    12aa:	21 e0       	ldi	r18, 0x01	; 1
    12ac:	82 1a       	sub	r8, r18
    12ae:	91 08       	sbc	r9, r1
    12b0:	81 14       	cp	r8, r1
    12b2:	91 04       	cpc	r9, r1
    12b4:	71 f7       	brne	.-36     	; 0x1292 <vfprintf+0x1a4>
    12b6:	e8 c0       	rjmp	.+464    	; 0x1488 <vfprintf+0x39a>
    12b8:	84 36       	cpi	r24, 0x64	; 100
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <vfprintf+0x1d2>
    12bc:	89 36       	cpi	r24, 0x69	; 105
    12be:	41 f5       	brne	.+80     	; 0x1310 <vfprintf+0x222>
    12c0:	f8 01       	movw	r30, r16
    12c2:	37 fe       	sbrs	r3, 7
    12c4:	07 c0       	rjmp	.+14     	; 0x12d4 <vfprintf+0x1e6>
    12c6:	60 81       	ld	r22, Z
    12c8:	71 81       	ldd	r23, Z+1	; 0x01
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	93 81       	ldd	r25, Z+3	; 0x03
    12ce:	0c 5f       	subi	r16, 0xFC	; 252
    12d0:	1f 4f       	sbci	r17, 0xFF	; 255
    12d2:	08 c0       	rjmp	.+16     	; 0x12e4 <vfprintf+0x1f6>
    12d4:	60 81       	ld	r22, Z
    12d6:	71 81       	ldd	r23, Z+1	; 0x01
    12d8:	07 2e       	mov	r0, r23
    12da:	00 0c       	add	r0, r0
    12dc:	88 0b       	sbc	r24, r24
    12de:	99 0b       	sbc	r25, r25
    12e0:	0e 5f       	subi	r16, 0xFE	; 254
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	f3 2d       	mov	r31, r3
    12e6:	ff 76       	andi	r31, 0x6F	; 111
    12e8:	3f 2e       	mov	r3, r31
    12ea:	97 ff       	sbrs	r25, 7
    12ec:	09 c0       	rjmp	.+18     	; 0x1300 <vfprintf+0x212>
    12ee:	90 95       	com	r25
    12f0:	80 95       	com	r24
    12f2:	70 95       	com	r23
    12f4:	61 95       	neg	r22
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	8f 4f       	sbci	r24, 0xFF	; 255
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	f0 68       	ori	r31, 0x80	; 128
    12fe:	3f 2e       	mov	r3, r31
    1300:	2a e0       	ldi	r18, 0x0A	; 10
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	a3 01       	movw	r20, r6
    1306:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__ultoa_invert>
    130a:	88 2e       	mov	r8, r24
    130c:	86 18       	sub	r8, r6
    130e:	45 c0       	rjmp	.+138    	; 0x139a <vfprintf+0x2ac>
    1310:	85 37       	cpi	r24, 0x75	; 117
    1312:	31 f4       	brne	.+12     	; 0x1320 <vfprintf+0x232>
    1314:	23 2d       	mov	r18, r3
    1316:	2f 7e       	andi	r18, 0xEF	; 239
    1318:	b2 2e       	mov	r11, r18
    131a:	2a e0       	ldi	r18, 0x0A	; 10
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	25 c0       	rjmp	.+74     	; 0x136a <vfprintf+0x27c>
    1320:	93 2d       	mov	r25, r3
    1322:	99 7f       	andi	r25, 0xF9	; 249
    1324:	b9 2e       	mov	r11, r25
    1326:	8f 36       	cpi	r24, 0x6F	; 111
    1328:	c1 f0       	breq	.+48     	; 0x135a <vfprintf+0x26c>
    132a:	18 f4       	brcc	.+6      	; 0x1332 <vfprintf+0x244>
    132c:	88 35       	cpi	r24, 0x58	; 88
    132e:	79 f0       	breq	.+30     	; 0x134e <vfprintf+0x260>
    1330:	b5 c0       	rjmp	.+362    	; 0x149c <vfprintf+0x3ae>
    1332:	80 37       	cpi	r24, 0x70	; 112
    1334:	19 f0       	breq	.+6      	; 0x133c <vfprintf+0x24e>
    1336:	88 37       	cpi	r24, 0x78	; 120
    1338:	21 f0       	breq	.+8      	; 0x1342 <vfprintf+0x254>
    133a:	b0 c0       	rjmp	.+352    	; 0x149c <vfprintf+0x3ae>
    133c:	e9 2f       	mov	r30, r25
    133e:	e0 61       	ori	r30, 0x10	; 16
    1340:	be 2e       	mov	r11, r30
    1342:	b4 fe       	sbrs	r11, 4
    1344:	0d c0       	rjmp	.+26     	; 0x1360 <vfprintf+0x272>
    1346:	fb 2d       	mov	r31, r11
    1348:	f4 60       	ori	r31, 0x04	; 4
    134a:	bf 2e       	mov	r11, r31
    134c:	09 c0       	rjmp	.+18     	; 0x1360 <vfprintf+0x272>
    134e:	34 fe       	sbrs	r3, 4
    1350:	0a c0       	rjmp	.+20     	; 0x1366 <vfprintf+0x278>
    1352:	29 2f       	mov	r18, r25
    1354:	26 60       	ori	r18, 0x06	; 6
    1356:	b2 2e       	mov	r11, r18
    1358:	06 c0       	rjmp	.+12     	; 0x1366 <vfprintf+0x278>
    135a:	28 e0       	ldi	r18, 0x08	; 8
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	05 c0       	rjmp	.+10     	; 0x136a <vfprintf+0x27c>
    1360:	20 e1       	ldi	r18, 0x10	; 16
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	02 c0       	rjmp	.+4      	; 0x136a <vfprintf+0x27c>
    1366:	20 e1       	ldi	r18, 0x10	; 16
    1368:	32 e0       	ldi	r19, 0x02	; 2
    136a:	f8 01       	movw	r30, r16
    136c:	b7 fe       	sbrs	r11, 7
    136e:	07 c0       	rjmp	.+14     	; 0x137e <vfprintf+0x290>
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	82 81       	ldd	r24, Z+2	; 0x02
    1376:	93 81       	ldd	r25, Z+3	; 0x03
    1378:	0c 5f       	subi	r16, 0xFC	; 252
    137a:	1f 4f       	sbci	r17, 0xFF	; 255
    137c:	06 c0       	rjmp	.+12     	; 0x138a <vfprintf+0x29c>
    137e:	60 81       	ld	r22, Z
    1380:	71 81       	ldd	r23, Z+1	; 0x01
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 5f       	subi	r16, 0xFE	; 254
    1388:	1f 4f       	sbci	r17, 0xFF	; 255
    138a:	a3 01       	movw	r20, r6
    138c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__ultoa_invert>
    1390:	88 2e       	mov	r8, r24
    1392:	86 18       	sub	r8, r6
    1394:	fb 2d       	mov	r31, r11
    1396:	ff 77       	andi	r31, 0x7F	; 127
    1398:	3f 2e       	mov	r3, r31
    139a:	36 fe       	sbrs	r3, 6
    139c:	0d c0       	rjmp	.+26     	; 0x13b8 <vfprintf+0x2ca>
    139e:	23 2d       	mov	r18, r3
    13a0:	2e 7f       	andi	r18, 0xFE	; 254
    13a2:	a2 2e       	mov	r10, r18
    13a4:	89 14       	cp	r8, r9
    13a6:	58 f4       	brcc	.+22     	; 0x13be <vfprintf+0x2d0>
    13a8:	34 fe       	sbrs	r3, 4
    13aa:	0b c0       	rjmp	.+22     	; 0x13c2 <vfprintf+0x2d4>
    13ac:	32 fc       	sbrc	r3, 2
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <vfprintf+0x2d4>
    13b0:	83 2d       	mov	r24, r3
    13b2:	8e 7e       	andi	r24, 0xEE	; 238
    13b4:	a8 2e       	mov	r10, r24
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <vfprintf+0x2d4>
    13b8:	b8 2c       	mov	r11, r8
    13ba:	a3 2c       	mov	r10, r3
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <vfprintf+0x2d6>
    13be:	b8 2c       	mov	r11, r8
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <vfprintf+0x2d6>
    13c2:	b9 2c       	mov	r11, r9
    13c4:	a4 fe       	sbrs	r10, 4
    13c6:	0f c0       	rjmp	.+30     	; 0x13e6 <vfprintf+0x2f8>
    13c8:	fe 01       	movw	r30, r28
    13ca:	e8 0d       	add	r30, r8
    13cc:	f1 1d       	adc	r31, r1
    13ce:	80 81       	ld	r24, Z
    13d0:	80 33       	cpi	r24, 0x30	; 48
    13d2:	21 f4       	brne	.+8      	; 0x13dc <vfprintf+0x2ee>
    13d4:	9a 2d       	mov	r25, r10
    13d6:	99 7e       	andi	r25, 0xE9	; 233
    13d8:	a9 2e       	mov	r10, r25
    13da:	09 c0       	rjmp	.+18     	; 0x13ee <vfprintf+0x300>
    13dc:	a2 fe       	sbrs	r10, 2
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <vfprintf+0x2fe>
    13e0:	b3 94       	inc	r11
    13e2:	b3 94       	inc	r11
    13e4:	04 c0       	rjmp	.+8      	; 0x13ee <vfprintf+0x300>
    13e6:	8a 2d       	mov	r24, r10
    13e8:	86 78       	andi	r24, 0x86	; 134
    13ea:	09 f0       	breq	.+2      	; 0x13ee <vfprintf+0x300>
    13ec:	b3 94       	inc	r11
    13ee:	a3 fc       	sbrc	r10, 3
    13f0:	11 c0       	rjmp	.+34     	; 0x1414 <vfprintf+0x326>
    13f2:	a0 fe       	sbrs	r10, 0
    13f4:	06 c0       	rjmp	.+12     	; 0x1402 <vfprintf+0x314>
    13f6:	b2 14       	cp	r11, r2
    13f8:	88 f4       	brcc	.+34     	; 0x141c <vfprintf+0x32e>
    13fa:	28 0c       	add	r2, r8
    13fc:	92 2c       	mov	r9, r2
    13fe:	9b 18       	sub	r9, r11
    1400:	0e c0       	rjmp	.+28     	; 0x141e <vfprintf+0x330>
    1402:	b2 14       	cp	r11, r2
    1404:	60 f4       	brcc	.+24     	; 0x141e <vfprintf+0x330>
    1406:	b6 01       	movw	r22, r12
    1408:	80 e2       	ldi	r24, 0x20	; 32
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    1410:	b3 94       	inc	r11
    1412:	f7 cf       	rjmp	.-18     	; 0x1402 <vfprintf+0x314>
    1414:	b2 14       	cp	r11, r2
    1416:	18 f4       	brcc	.+6      	; 0x141e <vfprintf+0x330>
    1418:	2b 18       	sub	r2, r11
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <vfprintf+0x332>
    141c:	98 2c       	mov	r9, r8
    141e:	21 2c       	mov	r2, r1
    1420:	a4 fe       	sbrs	r10, 4
    1422:	10 c0       	rjmp	.+32     	; 0x1444 <vfprintf+0x356>
    1424:	b6 01       	movw	r22, r12
    1426:	80 e3       	ldi	r24, 0x30	; 48
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    142e:	a2 fe       	sbrs	r10, 2
    1430:	17 c0       	rjmp	.+46     	; 0x1460 <vfprintf+0x372>
    1432:	a1 fc       	sbrc	r10, 1
    1434:	03 c0       	rjmp	.+6      	; 0x143c <vfprintf+0x34e>
    1436:	88 e7       	ldi	r24, 0x78	; 120
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <vfprintf+0x352>
    143c:	88 e5       	ldi	r24, 0x58	; 88
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	b6 01       	movw	r22, r12
    1442:	0c c0       	rjmp	.+24     	; 0x145c <vfprintf+0x36e>
    1444:	8a 2d       	mov	r24, r10
    1446:	86 78       	andi	r24, 0x86	; 134
    1448:	59 f0       	breq	.+22     	; 0x1460 <vfprintf+0x372>
    144a:	a1 fe       	sbrs	r10, 1
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <vfprintf+0x364>
    144e:	8b e2       	ldi	r24, 0x2B	; 43
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <vfprintf+0x366>
    1452:	80 e2       	ldi	r24, 0x20	; 32
    1454:	a7 fc       	sbrc	r10, 7
    1456:	8d e2       	ldi	r24, 0x2D	; 45
    1458:	b6 01       	movw	r22, r12
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    1460:	89 14       	cp	r8, r9
    1462:	38 f4       	brcc	.+14     	; 0x1472 <vfprintf+0x384>
    1464:	b6 01       	movw	r22, r12
    1466:	80 e3       	ldi	r24, 0x30	; 48
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    146e:	9a 94       	dec	r9
    1470:	f7 cf       	rjmp	.-18     	; 0x1460 <vfprintf+0x372>
    1472:	8a 94       	dec	r8
    1474:	f3 01       	movw	r30, r6
    1476:	e8 0d       	add	r30, r8
    1478:	f1 1d       	adc	r31, r1
    147a:	80 81       	ld	r24, Z
    147c:	b6 01       	movw	r22, r12
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    1484:	81 10       	cpse	r8, r1
    1486:	f5 cf       	rjmp	.-22     	; 0x1472 <vfprintf+0x384>
    1488:	22 20       	and	r2, r2
    148a:	09 f4       	brne	.+2      	; 0x148e <vfprintf+0x3a0>
    148c:	42 ce       	rjmp	.-892    	; 0x1112 <vfprintf+0x24>
    148e:	b6 01       	movw	r22, r12
    1490:	80 e2       	ldi	r24, 0x20	; 32
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    1498:	2a 94       	dec	r2
    149a:	f6 cf       	rjmp	.-20     	; 0x1488 <vfprintf+0x39a>
    149c:	f6 01       	movw	r30, r12
    149e:	86 81       	ldd	r24, Z+6	; 0x06
    14a0:	97 81       	ldd	r25, Z+7	; 0x07
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <vfprintf+0x3ba>
    14a4:	8f ef       	ldi	r24, 0xFF	; 255
    14a6:	9f ef       	ldi	r25, 0xFF	; 255
    14a8:	2b 96       	adiw	r28, 0x0b	; 11
    14aa:	e2 e1       	ldi	r30, 0x12	; 18
    14ac:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <__epilogue_restores__>

000014b0 <calloc>:
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	86 9f       	mul	r24, r22
    14ba:	80 01       	movw	r16, r0
    14bc:	87 9f       	mul	r24, r23
    14be:	10 0d       	add	r17, r0
    14c0:	96 9f       	mul	r25, r22
    14c2:	10 0d       	add	r17, r0
    14c4:	11 24       	eor	r1, r1
    14c6:	c8 01       	movw	r24, r16
    14c8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <malloc>
    14cc:	ec 01       	movw	r28, r24
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	29 f0       	breq	.+10     	; 0x14dc <calloc+0x2c>
    14d2:	a8 01       	movw	r20, r16
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	0e 94 a0 0b 	call	0x1740	; 0x1740 <memset>
    14dc:	ce 01       	movw	r24, r28
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	08 95       	ret

000014e8 <malloc>:
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	82 30       	cpi	r24, 0x02	; 2
    14f2:	91 05       	cpc	r25, r1
    14f4:	10 f4       	brcc	.+4      	; 0x14fa <malloc+0x12>
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	e0 91 fd 02 	lds	r30, 0x02FD	; 0x8002fd <__flp>
    14fe:	f0 91 fe 02 	lds	r31, 0x02FE	; 0x8002fe <__flp+0x1>
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	a0 e0       	ldi	r26, 0x00	; 0
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	30 97       	sbiw	r30, 0x00	; 0
    150c:	19 f1       	breq	.+70     	; 0x1554 <malloc+0x6c>
    150e:	40 81       	ld	r20, Z
    1510:	51 81       	ldd	r21, Z+1	; 0x01
    1512:	02 81       	ldd	r16, Z+2	; 0x02
    1514:	13 81       	ldd	r17, Z+3	; 0x03
    1516:	48 17       	cp	r20, r24
    1518:	59 07       	cpc	r21, r25
    151a:	c8 f0       	brcs	.+50     	; 0x154e <malloc+0x66>
    151c:	84 17       	cp	r24, r20
    151e:	95 07       	cpc	r25, r21
    1520:	69 f4       	brne	.+26     	; 0x153c <malloc+0x54>
    1522:	10 97       	sbiw	r26, 0x00	; 0
    1524:	31 f0       	breq	.+12     	; 0x1532 <malloc+0x4a>
    1526:	12 96       	adiw	r26, 0x02	; 2
    1528:	0c 93       	st	X, r16
    152a:	12 97       	sbiw	r26, 0x02	; 2
    152c:	13 96       	adiw	r26, 0x03	; 3
    152e:	1c 93       	st	X, r17
    1530:	27 c0       	rjmp	.+78     	; 0x1580 <malloc+0x98>
    1532:	00 93 fd 02 	sts	0x02FD, r16	; 0x8002fd <__flp>
    1536:	10 93 fe 02 	sts	0x02FE, r17	; 0x8002fe <__flp+0x1>
    153a:	22 c0       	rjmp	.+68     	; 0x1580 <malloc+0x98>
    153c:	21 15       	cp	r18, r1
    153e:	31 05       	cpc	r19, r1
    1540:	19 f0       	breq	.+6      	; 0x1548 <malloc+0x60>
    1542:	42 17       	cp	r20, r18
    1544:	53 07       	cpc	r21, r19
    1546:	18 f4       	brcc	.+6      	; 0x154e <malloc+0x66>
    1548:	9a 01       	movw	r18, r20
    154a:	bd 01       	movw	r22, r26
    154c:	ef 01       	movw	r28, r30
    154e:	df 01       	movw	r26, r30
    1550:	f8 01       	movw	r30, r16
    1552:	db cf       	rjmp	.-74     	; 0x150a <malloc+0x22>
    1554:	21 15       	cp	r18, r1
    1556:	31 05       	cpc	r19, r1
    1558:	f9 f0       	breq	.+62     	; 0x1598 <malloc+0xb0>
    155a:	28 1b       	sub	r18, r24
    155c:	39 0b       	sbc	r19, r25
    155e:	24 30       	cpi	r18, 0x04	; 4
    1560:	31 05       	cpc	r19, r1
    1562:	80 f4       	brcc	.+32     	; 0x1584 <malloc+0x9c>
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	9b 81       	ldd	r25, Y+3	; 0x03
    1568:	61 15       	cp	r22, r1
    156a:	71 05       	cpc	r23, r1
    156c:	21 f0       	breq	.+8      	; 0x1576 <malloc+0x8e>
    156e:	fb 01       	movw	r30, r22
    1570:	93 83       	std	Z+3, r25	; 0x03
    1572:	82 83       	std	Z+2, r24	; 0x02
    1574:	04 c0       	rjmp	.+8      	; 0x157e <malloc+0x96>
    1576:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <__flp+0x1>
    157a:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <__flp>
    157e:	fe 01       	movw	r30, r28
    1580:	32 96       	adiw	r30, 0x02	; 2
    1582:	44 c0       	rjmp	.+136    	; 0x160c <malloc+0x124>
    1584:	fe 01       	movw	r30, r28
    1586:	e2 0f       	add	r30, r18
    1588:	f3 1f       	adc	r31, r19
    158a:	81 93       	st	Z+, r24
    158c:	91 93       	st	Z+, r25
    158e:	22 50       	subi	r18, 0x02	; 2
    1590:	31 09       	sbc	r19, r1
    1592:	39 83       	std	Y+1, r19	; 0x01
    1594:	28 83       	st	Y, r18
    1596:	3a c0       	rjmp	.+116    	; 0x160c <malloc+0x124>
    1598:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <__brkval>
    159c:	30 91 fc 02 	lds	r19, 0x02FC	; 0x8002fc <__brkval+0x1>
    15a0:	23 2b       	or	r18, r19
    15a2:	41 f4       	brne	.+16     	; 0x15b4 <malloc+0xcc>
    15a4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    15a8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    15ac:	30 93 fc 02 	sts	0x02FC, r19	; 0x8002fc <__brkval+0x1>
    15b0:	20 93 fb 02 	sts	0x02FB, r18	; 0x8002fb <__brkval>
    15b4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    15b8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    15bc:	21 15       	cp	r18, r1
    15be:	31 05       	cpc	r19, r1
    15c0:	41 f4       	brne	.+16     	; 0x15d2 <malloc+0xea>
    15c2:	2d b7       	in	r18, 0x3d	; 61
    15c4:	3e b7       	in	r19, 0x3e	; 62
    15c6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    15ca:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    15ce:	24 1b       	sub	r18, r20
    15d0:	35 0b       	sbc	r19, r21
    15d2:	e0 91 fb 02 	lds	r30, 0x02FB	; 0x8002fb <__brkval>
    15d6:	f0 91 fc 02 	lds	r31, 0x02FC	; 0x8002fc <__brkval+0x1>
    15da:	e2 17       	cp	r30, r18
    15dc:	f3 07       	cpc	r31, r19
    15de:	a0 f4       	brcc	.+40     	; 0x1608 <malloc+0x120>
    15e0:	2e 1b       	sub	r18, r30
    15e2:	3f 0b       	sbc	r19, r31
    15e4:	28 17       	cp	r18, r24
    15e6:	39 07       	cpc	r19, r25
    15e8:	78 f0       	brcs	.+30     	; 0x1608 <malloc+0x120>
    15ea:	ac 01       	movw	r20, r24
    15ec:	4e 5f       	subi	r20, 0xFE	; 254
    15ee:	5f 4f       	sbci	r21, 0xFF	; 255
    15f0:	24 17       	cp	r18, r20
    15f2:	35 07       	cpc	r19, r21
    15f4:	48 f0       	brcs	.+18     	; 0x1608 <malloc+0x120>
    15f6:	4e 0f       	add	r20, r30
    15f8:	5f 1f       	adc	r21, r31
    15fa:	50 93 fc 02 	sts	0x02FC, r21	; 0x8002fc <__brkval+0x1>
    15fe:	40 93 fb 02 	sts	0x02FB, r20	; 0x8002fb <__brkval>
    1602:	81 93       	st	Z+, r24
    1604:	91 93       	st	Z+, r25
    1606:	02 c0       	rjmp	.+4      	; 0x160c <malloc+0x124>
    1608:	e0 e0       	ldi	r30, 0x00	; 0
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	cf 01       	movw	r24, r30
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <free>:
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	09 f4       	brne	.+2      	; 0x1622 <free+0xa>
    1620:	81 c0       	rjmp	.+258    	; 0x1724 <free+0x10c>
    1622:	fc 01       	movw	r30, r24
    1624:	32 97       	sbiw	r30, 0x02	; 2
    1626:	13 82       	std	Z+3, r1	; 0x03
    1628:	12 82       	std	Z+2, r1	; 0x02
    162a:	a0 91 fd 02 	lds	r26, 0x02FD	; 0x8002fd <__flp>
    162e:	b0 91 fe 02 	lds	r27, 0x02FE	; 0x8002fe <__flp+0x1>
    1632:	10 97       	sbiw	r26, 0x00	; 0
    1634:	81 f4       	brne	.+32     	; 0x1656 <free+0x3e>
    1636:	20 81       	ld	r18, Z
    1638:	31 81       	ldd	r19, Z+1	; 0x01
    163a:	82 0f       	add	r24, r18
    163c:	93 1f       	adc	r25, r19
    163e:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <__brkval>
    1642:	30 91 fc 02 	lds	r19, 0x02FC	; 0x8002fc <__brkval+0x1>
    1646:	28 17       	cp	r18, r24
    1648:	39 07       	cpc	r19, r25
    164a:	51 f5       	brne	.+84     	; 0x16a0 <free+0x88>
    164c:	f0 93 fc 02 	sts	0x02FC, r31	; 0x8002fc <__brkval+0x1>
    1650:	e0 93 fb 02 	sts	0x02FB, r30	; 0x8002fb <__brkval>
    1654:	67 c0       	rjmp	.+206    	; 0x1724 <free+0x10c>
    1656:	ed 01       	movw	r28, r26
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	ce 17       	cp	r28, r30
    165e:	df 07       	cpc	r29, r31
    1660:	40 f4       	brcc	.+16     	; 0x1672 <free+0x5a>
    1662:	4a 81       	ldd	r20, Y+2	; 0x02
    1664:	5b 81       	ldd	r21, Y+3	; 0x03
    1666:	9e 01       	movw	r18, r28
    1668:	41 15       	cp	r20, r1
    166a:	51 05       	cpc	r21, r1
    166c:	f1 f0       	breq	.+60     	; 0x16aa <free+0x92>
    166e:	ea 01       	movw	r28, r20
    1670:	f5 cf       	rjmp	.-22     	; 0x165c <free+0x44>
    1672:	d3 83       	std	Z+3, r29	; 0x03
    1674:	c2 83       	std	Z+2, r28	; 0x02
    1676:	40 81       	ld	r20, Z
    1678:	51 81       	ldd	r21, Z+1	; 0x01
    167a:	84 0f       	add	r24, r20
    167c:	95 1f       	adc	r25, r21
    167e:	c8 17       	cp	r28, r24
    1680:	d9 07       	cpc	r29, r25
    1682:	59 f4       	brne	.+22     	; 0x169a <free+0x82>
    1684:	88 81       	ld	r24, Y
    1686:	99 81       	ldd	r25, Y+1	; 0x01
    1688:	84 0f       	add	r24, r20
    168a:	95 1f       	adc	r25, r21
    168c:	02 96       	adiw	r24, 0x02	; 2
    168e:	91 83       	std	Z+1, r25	; 0x01
    1690:	80 83       	st	Z, r24
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	9b 81       	ldd	r25, Y+3	; 0x03
    1696:	93 83       	std	Z+3, r25	; 0x03
    1698:	82 83       	std	Z+2, r24	; 0x02
    169a:	21 15       	cp	r18, r1
    169c:	31 05       	cpc	r19, r1
    169e:	29 f4       	brne	.+10     	; 0x16aa <free+0x92>
    16a0:	f0 93 fe 02 	sts	0x02FE, r31	; 0x8002fe <__flp+0x1>
    16a4:	e0 93 fd 02 	sts	0x02FD, r30	; 0x8002fd <__flp>
    16a8:	3d c0       	rjmp	.+122    	; 0x1724 <free+0x10c>
    16aa:	e9 01       	movw	r28, r18
    16ac:	fb 83       	std	Y+3, r31	; 0x03
    16ae:	ea 83       	std	Y+2, r30	; 0x02
    16b0:	49 91       	ld	r20, Y+
    16b2:	59 91       	ld	r21, Y+
    16b4:	c4 0f       	add	r28, r20
    16b6:	d5 1f       	adc	r29, r21
    16b8:	ec 17       	cp	r30, r28
    16ba:	fd 07       	cpc	r31, r29
    16bc:	61 f4       	brne	.+24     	; 0x16d6 <free+0xbe>
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	84 0f       	add	r24, r20
    16c4:	95 1f       	adc	r25, r21
    16c6:	02 96       	adiw	r24, 0x02	; 2
    16c8:	e9 01       	movw	r28, r18
    16ca:	99 83       	std	Y+1, r25	; 0x01
    16cc:	88 83       	st	Y, r24
    16ce:	82 81       	ldd	r24, Z+2	; 0x02
    16d0:	93 81       	ldd	r25, Z+3	; 0x03
    16d2:	9b 83       	std	Y+3, r25	; 0x03
    16d4:	8a 83       	std	Y+2, r24	; 0x02
    16d6:	e0 e0       	ldi	r30, 0x00	; 0
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	12 96       	adiw	r26, 0x02	; 2
    16dc:	8d 91       	ld	r24, X+
    16de:	9c 91       	ld	r25, X
    16e0:	13 97       	sbiw	r26, 0x03	; 3
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	19 f0       	breq	.+6      	; 0x16ec <free+0xd4>
    16e6:	fd 01       	movw	r30, r26
    16e8:	dc 01       	movw	r26, r24
    16ea:	f7 cf       	rjmp	.-18     	; 0x16da <free+0xc2>
    16ec:	8d 91       	ld	r24, X+
    16ee:	9c 91       	ld	r25, X
    16f0:	11 97       	sbiw	r26, 0x01	; 1
    16f2:	9d 01       	movw	r18, r26
    16f4:	2e 5f       	subi	r18, 0xFE	; 254
    16f6:	3f 4f       	sbci	r19, 0xFF	; 255
    16f8:	82 0f       	add	r24, r18
    16fa:	93 1f       	adc	r25, r19
    16fc:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <__brkval>
    1700:	30 91 fc 02 	lds	r19, 0x02FC	; 0x8002fc <__brkval+0x1>
    1704:	28 17       	cp	r18, r24
    1706:	39 07       	cpc	r19, r25
    1708:	69 f4       	brne	.+26     	; 0x1724 <free+0x10c>
    170a:	30 97       	sbiw	r30, 0x00	; 0
    170c:	29 f4       	brne	.+10     	; 0x1718 <free+0x100>
    170e:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <__flp+0x1>
    1712:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <__flp>
    1716:	02 c0       	rjmp	.+4      	; 0x171c <free+0x104>
    1718:	13 82       	std	Z+3, r1	; 0x03
    171a:	12 82       	std	Z+2, r1	; 0x02
    171c:	b0 93 fc 02 	sts	0x02FC, r27	; 0x8002fc <__brkval+0x1>
    1720:	a0 93 fb 02 	sts	0x02FB, r26	; 0x8002fb <__brkval>
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	08 95       	ret

0000172a <strnlen_P>:
    172a:	fc 01       	movw	r30, r24
    172c:	05 90       	lpm	r0, Z+
    172e:	61 50       	subi	r22, 0x01	; 1
    1730:	70 40       	sbci	r23, 0x00	; 0
    1732:	01 10       	cpse	r0, r1
    1734:	d8 f7       	brcc	.-10     	; 0x172c <strnlen_P+0x2>
    1736:	80 95       	com	r24
    1738:	90 95       	com	r25
    173a:	8e 0f       	add	r24, r30
    173c:	9f 1f       	adc	r25, r31
    173e:	08 95       	ret

00001740 <memset>:
    1740:	dc 01       	movw	r26, r24
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <memset+0x6>
    1744:	6d 93       	st	X+, r22
    1746:	41 50       	subi	r20, 0x01	; 1
    1748:	50 40       	sbci	r21, 0x00	; 0
    174a:	e0 f7       	brcc	.-8      	; 0x1744 <memset+0x4>
    174c:	08 95       	ret

0000174e <strnlen>:
    174e:	fc 01       	movw	r30, r24
    1750:	61 50       	subi	r22, 0x01	; 1
    1752:	70 40       	sbci	r23, 0x00	; 0
    1754:	01 90       	ld	r0, Z+
    1756:	01 10       	cpse	r0, r1
    1758:	d8 f7       	brcc	.-10     	; 0x1750 <strnlen+0x2>
    175a:	80 95       	com	r24
    175c:	90 95       	com	r25
    175e:	8e 0f       	add	r24, r30
    1760:	9f 1f       	adc	r25, r31
    1762:	08 95       	ret

00001764 <fputc>:
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	fb 01       	movw	r30, r22
    176e:	23 81       	ldd	r18, Z+3	; 0x03
    1770:	21 fd       	sbrc	r18, 1
    1772:	03 c0       	rjmp	.+6      	; 0x177a <fputc+0x16>
    1774:	8f ef       	ldi	r24, 0xFF	; 255
    1776:	9f ef       	ldi	r25, 0xFF	; 255
    1778:	2c c0       	rjmp	.+88     	; 0x17d2 <fputc+0x6e>
    177a:	22 ff       	sbrs	r18, 2
    177c:	16 c0       	rjmp	.+44     	; 0x17aa <fputc+0x46>
    177e:	46 81       	ldd	r20, Z+6	; 0x06
    1780:	57 81       	ldd	r21, Z+7	; 0x07
    1782:	24 81       	ldd	r18, Z+4	; 0x04
    1784:	35 81       	ldd	r19, Z+5	; 0x05
    1786:	42 17       	cp	r20, r18
    1788:	53 07       	cpc	r21, r19
    178a:	44 f4       	brge	.+16     	; 0x179c <fputc+0x38>
    178c:	a0 81       	ld	r26, Z
    178e:	b1 81       	ldd	r27, Z+1	; 0x01
    1790:	9d 01       	movw	r18, r26
    1792:	2f 5f       	subi	r18, 0xFF	; 255
    1794:	3f 4f       	sbci	r19, 0xFF	; 255
    1796:	31 83       	std	Z+1, r19	; 0x01
    1798:	20 83       	st	Z, r18
    179a:	8c 93       	st	X, r24
    179c:	26 81       	ldd	r18, Z+6	; 0x06
    179e:	37 81       	ldd	r19, Z+7	; 0x07
    17a0:	2f 5f       	subi	r18, 0xFF	; 255
    17a2:	3f 4f       	sbci	r19, 0xFF	; 255
    17a4:	37 83       	std	Z+7, r19	; 0x07
    17a6:	26 83       	std	Z+6, r18	; 0x06
    17a8:	14 c0       	rjmp	.+40     	; 0x17d2 <fputc+0x6e>
    17aa:	8b 01       	movw	r16, r22
    17ac:	ec 01       	movw	r28, r24
    17ae:	fb 01       	movw	r30, r22
    17b0:	00 84       	ldd	r0, Z+8	; 0x08
    17b2:	f1 85       	ldd	r31, Z+9	; 0x09
    17b4:	e0 2d       	mov	r30, r0
    17b6:	09 95       	icall
    17b8:	89 2b       	or	r24, r25
    17ba:	e1 f6       	brne	.-72     	; 0x1774 <fputc+0x10>
    17bc:	d8 01       	movw	r26, r16
    17be:	16 96       	adiw	r26, 0x06	; 6
    17c0:	8d 91       	ld	r24, X+
    17c2:	9c 91       	ld	r25, X
    17c4:	17 97       	sbiw	r26, 0x07	; 7
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	17 96       	adiw	r26, 0x07	; 7
    17ca:	9c 93       	st	X, r25
    17cc:	8e 93       	st	-X, r24
    17ce:	16 97       	sbiw	r26, 0x06	; 6
    17d0:	ce 01       	movw	r24, r28
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	08 95       	ret

000017dc <__ultoa_invert>:
    17dc:	fa 01       	movw	r30, r20
    17de:	aa 27       	eor	r26, r26
    17e0:	28 30       	cpi	r18, 0x08	; 8
    17e2:	51 f1       	breq	.+84     	; 0x1838 <__ultoa_invert+0x5c>
    17e4:	20 31       	cpi	r18, 0x10	; 16
    17e6:	81 f1       	breq	.+96     	; 0x1848 <__ultoa_invert+0x6c>
    17e8:	e8 94       	clt
    17ea:	6f 93       	push	r22
    17ec:	6e 7f       	andi	r22, 0xFE	; 254
    17ee:	6e 5f       	subi	r22, 0xFE	; 254
    17f0:	7f 4f       	sbci	r23, 0xFF	; 255
    17f2:	8f 4f       	sbci	r24, 0xFF	; 255
    17f4:	9f 4f       	sbci	r25, 0xFF	; 255
    17f6:	af 4f       	sbci	r26, 0xFF	; 255
    17f8:	b1 e0       	ldi	r27, 0x01	; 1
    17fa:	3e d0       	rcall	.+124    	; 0x1878 <__ultoa_invert+0x9c>
    17fc:	b4 e0       	ldi	r27, 0x04	; 4
    17fe:	3c d0       	rcall	.+120    	; 0x1878 <__ultoa_invert+0x9c>
    1800:	67 0f       	add	r22, r23
    1802:	78 1f       	adc	r23, r24
    1804:	89 1f       	adc	r24, r25
    1806:	9a 1f       	adc	r25, r26
    1808:	a1 1d       	adc	r26, r1
    180a:	68 0f       	add	r22, r24
    180c:	79 1f       	adc	r23, r25
    180e:	8a 1f       	adc	r24, r26
    1810:	91 1d       	adc	r25, r1
    1812:	a1 1d       	adc	r26, r1
    1814:	6a 0f       	add	r22, r26
    1816:	71 1d       	adc	r23, r1
    1818:	81 1d       	adc	r24, r1
    181a:	91 1d       	adc	r25, r1
    181c:	a1 1d       	adc	r26, r1
    181e:	20 d0       	rcall	.+64     	; 0x1860 <__ultoa_invert+0x84>
    1820:	09 f4       	brne	.+2      	; 0x1824 <__ultoa_invert+0x48>
    1822:	68 94       	set
    1824:	3f 91       	pop	r19
    1826:	2a e0       	ldi	r18, 0x0A	; 10
    1828:	26 9f       	mul	r18, r22
    182a:	11 24       	eor	r1, r1
    182c:	30 19       	sub	r19, r0
    182e:	30 5d       	subi	r19, 0xD0	; 208
    1830:	31 93       	st	Z+, r19
    1832:	de f6       	brtc	.-74     	; 0x17ea <__ultoa_invert+0xe>
    1834:	cf 01       	movw	r24, r30
    1836:	08 95       	ret
    1838:	46 2f       	mov	r20, r22
    183a:	47 70       	andi	r20, 0x07	; 7
    183c:	40 5d       	subi	r20, 0xD0	; 208
    183e:	41 93       	st	Z+, r20
    1840:	b3 e0       	ldi	r27, 0x03	; 3
    1842:	0f d0       	rcall	.+30     	; 0x1862 <__ultoa_invert+0x86>
    1844:	c9 f7       	brne	.-14     	; 0x1838 <__ultoa_invert+0x5c>
    1846:	f6 cf       	rjmp	.-20     	; 0x1834 <__ultoa_invert+0x58>
    1848:	46 2f       	mov	r20, r22
    184a:	4f 70       	andi	r20, 0x0F	; 15
    184c:	40 5d       	subi	r20, 0xD0	; 208
    184e:	4a 33       	cpi	r20, 0x3A	; 58
    1850:	18 f0       	brcs	.+6      	; 0x1858 <__ultoa_invert+0x7c>
    1852:	49 5d       	subi	r20, 0xD9	; 217
    1854:	31 fd       	sbrc	r19, 1
    1856:	40 52       	subi	r20, 0x20	; 32
    1858:	41 93       	st	Z+, r20
    185a:	02 d0       	rcall	.+4      	; 0x1860 <__ultoa_invert+0x84>
    185c:	a9 f7       	brne	.-22     	; 0x1848 <__ultoa_invert+0x6c>
    185e:	ea cf       	rjmp	.-44     	; 0x1834 <__ultoa_invert+0x58>
    1860:	b4 e0       	ldi	r27, 0x04	; 4
    1862:	a6 95       	lsr	r26
    1864:	97 95       	ror	r25
    1866:	87 95       	ror	r24
    1868:	77 95       	ror	r23
    186a:	67 95       	ror	r22
    186c:	ba 95       	dec	r27
    186e:	c9 f7       	brne	.-14     	; 0x1862 <__ultoa_invert+0x86>
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	61 05       	cpc	r22, r1
    1874:	71 05       	cpc	r23, r1
    1876:	08 95       	ret
    1878:	9b 01       	movw	r18, r22
    187a:	ac 01       	movw	r20, r24
    187c:	0a 2e       	mov	r0, r26
    187e:	06 94       	lsr	r0
    1880:	57 95       	ror	r21
    1882:	47 95       	ror	r20
    1884:	37 95       	ror	r19
    1886:	27 95       	ror	r18
    1888:	ba 95       	dec	r27
    188a:	c9 f7       	brne	.-14     	; 0x187e <__ultoa_invert+0xa2>
    188c:	62 0f       	add	r22, r18
    188e:	73 1f       	adc	r23, r19
    1890:	84 1f       	adc	r24, r20
    1892:	95 1f       	adc	r25, r21
    1894:	a0 1d       	adc	r26, r0
    1896:	08 95       	ret

00001898 <__prologue_saves__>:
    1898:	2f 92       	push	r2
    189a:	3f 92       	push	r3
    189c:	4f 92       	push	r4
    189e:	5f 92       	push	r5
    18a0:	6f 92       	push	r6
    18a2:	7f 92       	push	r7
    18a4:	8f 92       	push	r8
    18a6:	9f 92       	push	r9
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	ca 1b       	sub	r28, r26
    18c2:	db 0b       	sbc	r29, r27
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	09 94       	ijmp

000018d0 <__epilogue_restores__>:
    18d0:	2a 88       	ldd	r2, Y+18	; 0x12
    18d2:	39 88       	ldd	r3, Y+17	; 0x11
    18d4:	48 88       	ldd	r4, Y+16	; 0x10
    18d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    18d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    18da:	7d 84       	ldd	r7, Y+13	; 0x0d
    18dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    18de:	9b 84       	ldd	r9, Y+11	; 0x0b
    18e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    18e2:	b9 84       	ldd	r11, Y+9	; 0x09
    18e4:	c8 84       	ldd	r12, Y+8	; 0x08
    18e6:	df 80       	ldd	r13, Y+7	; 0x07
    18e8:	ee 80       	ldd	r14, Y+6	; 0x06
    18ea:	fd 80       	ldd	r15, Y+5	; 0x05
    18ec:	0c 81       	ldd	r16, Y+4	; 0x04
    18ee:	1b 81       	ldd	r17, Y+3	; 0x03
    18f0:	aa 81       	ldd	r26, Y+2	; 0x02
    18f2:	b9 81       	ldd	r27, Y+1	; 0x01
    18f4:	ce 0f       	add	r28, r30
    18f6:	d1 1d       	adc	r29, r1
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	ed 01       	movw	r28, r26
    1904:	08 95       	ret

00001906 <_exit>:
    1906:	f8 94       	cli

00001908 <__stop_program>:
    1908:	ff cf       	rjmp	.-2      	; 0x1908 <__stop_program>
