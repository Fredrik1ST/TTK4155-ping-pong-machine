
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800100  0000182a  000018be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000182a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  0080024a  0080024a  00001a08  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002798  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000129d  00000000  00000000  00004490  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013f6  00000000  00000000  0000572d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  00006b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000879  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011e2  00000000  00000000  0000790d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  00008aef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	ea e2       	ldi	r30, 0x2A	; 42
     6d4:	f8 e1       	ldi	r31, 0x18	; 24
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	aa 34       	cpi	r26, 0x4A	; 74
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	22 e0       	ldi	r18, 0x02	; 2
     6e4:	aa e4       	ldi	r26, 0x4A	; 74
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	ad 3e       	cpi	r26, 0xED	; 237
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 85 04 	call	0x90a	; 0x90a <main>
     6f6:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <adc_init>:
#include <avr/io.h>


void adc_init(){
	// Set pin as output
	DDRD |= (1<<DDD4);
     6fe:	81 b3       	in	r24, 0x11	; 17
     700:	80 61       	ori	r24, 0x10	; 16
     702:	81 bb       	out	0x11, r24	; 17
	
	// Toggle output pin on compare match with counter
	TCCR3A = (1<<COM3A0);
     704:	80 e4       	ldi	r24, 0x40	; 64
     706:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fc08b>
	
	// No clock prescaling on counter (i.e. update every clock cycle)
	// Set counter mode to CTC (clear on match)
	TCCR3B = (1<<WGM32)|(1<<CS30);
     70a:	89 e0       	ldi	r24, 0x09	; 9
     70c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fc08a>
	
	// Value to be matched (0 = toggle output each cycle)
	OCR3A = 0;
     710:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     714:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     718:	08 95       	ret

0000071a <adc_read>:
		uint8_t digitalVal = 0;
		
		// Write anything to the ADC to trigger a conversion
		// Triggers the chip select and write control strobe when external memory interface is active
		volatile char* mem_adc = (char *) DEF_ADR_ADC;
		mem_adc[0] = 0;
     71a:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x1113>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     71e:	97 e2       	ldi	r25, 0x27	; 39
     720:	9a 95       	dec	r25
     722:	f1 f7       	brne	.-4      	; 0x720 <adc_read+0x6>
     724:	00 00       	nop
		uint16_t convTime = DEF_ADC_CONV_TIME;
		_delay_us(convTime);
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
     726:	85 30       	cpi	r24, 0x05	; 5
     728:	40 f0       	brcs	.+16     	; 0x73a <adc_read+0x20>
}


volatile uint8_t adc_read(uint8_t channel){
		// Set up return data
		uint8_t digitalVal = 0;
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e c0       	rjmp	.+28     	; 0x74a <adc_read+0x30>
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
			for (int i = 0; i <= channel; ++i){
				digitalVal = mem_adc[i];
     72e:	f9 01       	movw	r30, r18
     730:	fc 5e       	subi	r31, 0xEC	; 236
     732:	90 81       	ld	r25, Z
		_delay_us(convTime);
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
			for (int i = 0; i <= channel; ++i){
     734:	2f 5f       	subi	r18, 0xFF	; 255
     736:	3f 4f       	sbci	r19, 0xFF	; 255
     738:	03 c0       	rjmp	.+6      	; 0x740 <adc_read+0x26>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	48 2f       	mov	r20, r24
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	42 17       	cp	r20, r18
     746:	53 07       	cpc	r21, r19
     748:	94 f7       	brge	.-28     	; 0x72e <adc_read+0x14>
				digitalVal = mem_adc[i];
			}
		}
		return digitalVal;
     74a:	89 2f       	mov	r24, r25
     74c:	08 95       	ret

0000074e <gamepad_init>:
#include "adc.h"
#include "gamepad.h"


void gamepad_init(){
	PORTB |= (1 << PB2); // Set pullup resistor for input
     74e:	88 b3       	in	r24, 0x18	; 24
     750:	84 60       	ori	r24, 0x04	; 4
     752:	88 bb       	out	0x18, r24	; 24
	DDRB &= ~(0 << DDB2); // Set PB2 to 0 (input for joystick button)
     754:	87 b3       	in	r24, 0x17	; 23
     756:	87 bb       	out	0x17, r24	; 23
     758:	08 95       	ret

0000075a <read_gamepad>:
}

Gamepad read_gamepad(){
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	ec 01       	movw	r28, r24
	Gamepad gp;
	gp.pos_x = (int16_t)adc_read(CH_JOYSTICK_X);
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	99 83       	std	Y+1, r25	; 0x01
     76a:	88 83       	st	Y, r24
	gp.pos_y = (int16_t)adc_read(CH_JOYSTICK_Y);
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	9b 83       	std	Y+3, r25	; 0x03
     776:	8a 83       	std	Y+2, r24	; 0x02
	gp.pos_left = (int16_t)adc_read(CH_SLIDER_LEFT);
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	9d 83       	std	Y+5, r25	; 0x05
     782:	8c 83       	std	Y+4, r24	; 0x04
	gp.pos_right = (int16_t)adc_read(CH_SLIDER_RIGHT);
     784:	83 e0       	ldi	r24, 0x03	; 3
     786:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	9f 83       	std	Y+7, r25	; 0x07
     78e:	8e 83       	std	Y+6, r24	; 0x06
	gp.btn = !((PINB & (1 << PB2)) >> PB2);
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	b2 99       	sbic	0x16, 2	; 22
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	88 87       	std	Y+8, r24	; 0x08
	
	// printf("RAW X: %d    -    Y: %d    -    L: %d    -    R: %d\r\n\r\n", gp.pos_x, gp.pos_y, gp.pos_left, gp.pos_right);

	return gp;
}
     798:	ce 01       	movw	r24, r28
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <calibrate_gamepad>:

Gamepad calibrate_gamepad(Gamepad input){
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	2a 97       	sbiw	r28, 0x0a	; 10
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	fc 01       	movw	r30, r24
     7be:	e9 82       	std	Y+1, r14	; 0x01
     7c0:	fa 82       	std	Y+2, r15	; 0x02
     7c2:	0b 83       	std	Y+3, r16	; 0x03
     7c4:	1c 83       	std	Y+4, r17	; 0x04
     7c6:	2d 83       	std	Y+5, r18	; 0x05
     7c8:	3e 83       	std	Y+6, r19	; 0x06
     7ca:	4f 83       	std	Y+7, r20	; 0x07
     7cc:	58 87       	std	Y+8, r21	; 0x08
     7ce:	16 2f       	mov	r17, r22
	Gamepad gp;
	
	gp.pos_x = (input.pos_x - 127) * 100 / 127; // Get direction as a percentage between -100 to +100
     7d0:	29 81       	ldd	r18, Y+1	; 0x01
     7d2:	3a 81       	ldd	r19, Y+2	; 0x02
     7d4:	2f 57       	subi	r18, 0x7F	; 127
     7d6:	31 09       	sbc	r19, r1
     7d8:	44 e6       	ldi	r20, 0x64	; 100
     7da:	42 9f       	mul	r20, r18
     7dc:	c0 01       	movw	r24, r0
     7de:	43 9f       	mul	r20, r19
     7e0:	90 0d       	add	r25, r0
     7e2:	11 24       	eor	r1, r1
     7e4:	2f e7       	ldi	r18, 0x7F	; 127
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	b9 01       	movw	r22, r18
     7ea:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__divmodhi4>
     7ee:	71 83       	std	Z+1, r23	; 0x01
     7f0:	60 83       	st	Z, r22
	gp.pos_y = (input.pos_y - 127) * 100 / 127;
     7f2:	6b 81       	ldd	r22, Y+3	; 0x03
     7f4:	7c 81       	ldd	r23, Y+4	; 0x04
     7f6:	6f 57       	subi	r22, 0x7F	; 127
     7f8:	71 09       	sbc	r23, r1
     7fa:	46 9f       	mul	r20, r22
     7fc:	c0 01       	movw	r24, r0
     7fe:	47 9f       	mul	r20, r23
     800:	90 0d       	add	r25, r0
     802:	11 24       	eor	r1, r1
     804:	b9 01       	movw	r22, r18
     806:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__divmodhi4>
     80a:	73 83       	std	Z+3, r23	; 0x03
     80c:	62 83       	std	Z+2, r22	; 0x02
	gp.pos_left = (input.pos_left - 127) * 100 / 127;
     80e:	6d 81       	ldd	r22, Y+5	; 0x05
     810:	7e 81       	ldd	r23, Y+6	; 0x06
     812:	6f 57       	subi	r22, 0x7F	; 127
     814:	71 09       	sbc	r23, r1
     816:	46 9f       	mul	r20, r22
     818:	c0 01       	movw	r24, r0
     81a:	47 9f       	mul	r20, r23
     81c:	90 0d       	add	r25, r0
     81e:	11 24       	eor	r1, r1
     820:	b9 01       	movw	r22, r18
     822:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__divmodhi4>
     826:	75 83       	std	Z+5, r23	; 0x05
     828:	64 83       	std	Z+4, r22	; 0x04
	gp.pos_right = (input.pos_right - 127) * 100 / 127;
     82a:	6f 81       	ldd	r22, Y+7	; 0x07
     82c:	78 85       	ldd	r23, Y+8	; 0x08
     82e:	6f 57       	subi	r22, 0x7F	; 127
     830:	71 09       	sbc	r23, r1
     832:	46 9f       	mul	r20, r22
     834:	c0 01       	movw	r24, r0
     836:	47 9f       	mul	r20, r23
     838:	90 0d       	add	r25, r0
     83a:	11 24       	eor	r1, r1
     83c:	b9 01       	movw	r22, r18
     83e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__divmodhi4>
     842:	77 83       	std	Z+7, r23	; 0x07
     844:	66 83       	std	Z+6, r22	; 0x06
	
	gp.btn = input.btn;
     846:	10 87       	std	Z+8, r17	; 0x08
	
	
	// printf("CAL X: %d    -    Y: %d    -    L: %d    -    R: %d\r\n\r\n", gp.pos_x, gp.pos_y, gp.pos_left, gp.pos_right);
	
	return gp;
}
     848:	cf 01       	movw	r24, r30
     84a:	2a 96       	adiw	r28, 0x0a	; 10
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	08 95       	ret

00000864 <getJoystickDir>:

Dir getJoystickDir(Gamepad gp){
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	2a 97       	sbiw	r28, 0x0a	; 10
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	09 83       	std	Y+1, r16	; 0x01
     87e:	1a 83       	std	Y+2, r17	; 0x02
     880:	2b 83       	std	Y+3, r18	; 0x03
     882:	3c 83       	std	Y+4, r19	; 0x04
	int16_t deadzone = 40;
	Dir direction = NONE; // Default

	if (gp.pos_x < deadzone && gp.pos_x > -deadzone && gp.pos_y < deadzone && gp.pos_y > -deadzone){
     884:	89 81       	ldd	r24, Y+1	; 0x01
     886:	9a 81       	ldd	r25, Y+2	; 0x02
     888:	88 32       	cpi	r24, 0x28	; 40
     88a:	91 05       	cpc	r25, r1
     88c:	64 f4       	brge	.+24     	; 0x8a6 <getJoystickDir+0x42>
     88e:	89 3d       	cpi	r24, 0xD9	; 217
     890:	2f ef       	ldi	r18, 0xFF	; 255
     892:	92 07       	cpc	r25, r18
     894:	44 f0       	brlt	.+16     	; 0x8a6 <getJoystickDir+0x42>
     896:	2b 81       	ldd	r18, Y+3	; 0x03
     898:	3c 81       	ldd	r19, Y+4	; 0x04
     89a:	28 32       	cpi	r18, 0x28	; 40
     89c:	31 05       	cpc	r19, r1
     89e:	1c f4       	brge	.+6      	; 0x8a6 <getJoystickDir+0x42>
     8a0:	29 3d       	cpi	r18, 0xD9	; 217
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
     8a4:	04 f5       	brge	.+64     	; 0x8e6 <getJoystickDir+0x82>
		direction = NONE;

	} else if (abs(gp.pos_x) >= abs(gp.pos_y)){
     8a6:	ac 01       	movw	r20, r24
     8a8:	99 23       	and	r25, r25
     8aa:	24 f4       	brge	.+8      	; 0x8b4 <getJoystickDir+0x50>
     8ac:	44 27       	eor	r20, r20
     8ae:	55 27       	eor	r21, r21
     8b0:	48 1b       	sub	r20, r24
     8b2:	59 0b       	sbc	r21, r25
     8b4:	6b 81       	ldd	r22, Y+3	; 0x03
     8b6:	7c 81       	ldd	r23, Y+4	; 0x04
     8b8:	9b 01       	movw	r18, r22
     8ba:	77 23       	and	r23, r23
     8bc:	24 f4       	brge	.+8      	; 0x8c6 <getJoystickDir+0x62>
     8be:	22 27       	eor	r18, r18
     8c0:	33 27       	eor	r19, r19
     8c2:	26 1b       	sub	r18, r22
     8c4:	37 0b       	sbc	r19, r23
     8c6:	42 17       	cp	r20, r18
     8c8:	53 07       	cpc	r21, r19
     8ca:	2c f0       	brlt	.+10     	; 0x8d6 <getJoystickDir+0x72>
		if (gp.pos_x > 0){
     8cc:	18 16       	cp	r1, r24
     8ce:	19 06       	cpc	r1, r25
     8d0:	64 f4       	brge	.+24     	; 0x8ea <getJoystickDir+0x86>
			direction = RIGHT;
     8d2:	82 e0       	ldi	r24, 0x02	; 2
     8d4:	0f c0       	rjmp	.+30     	; 0x8f4 <getJoystickDir+0x90>
		} else{
			direction = LEFT;
		}

	} else if (abs(gp.pos_y) > abs(gp.pos_x)){
     8d6:	42 17       	cp	r20, r18
     8d8:	53 07       	cpc	r21, r19
     8da:	4c f4       	brge	.+18     	; 0x8ee <getJoystickDir+0x8a>
		if (gp.pos_y > 0){
     8dc:	16 16       	cp	r1, r22
     8de:	17 06       	cpc	r1, r23
     8e0:	44 f4       	brge	.+16     	; 0x8f2 <getJoystickDir+0x8e>
			direction = UP;
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <getJoystickDir+0x90>
Dir getJoystickDir(Gamepad gp){
	int16_t deadzone = 40;
	Dir direction = NONE; // Default

	if (gp.pos_x < deadzone && gp.pos_x > -deadzone && gp.pos_y < deadzone && gp.pos_y > -deadzone){
		direction = NONE;
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <getJoystickDir+0x90>

	} else if (abs(gp.pos_x) >= abs(gp.pos_y)){
		if (gp.pos_x > 0){
			direction = RIGHT;
		} else{
			direction = LEFT;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <getJoystickDir+0x90>
	return gp;
}

Dir getJoystickDir(Gamepad gp){
	int16_t deadzone = 40;
	Dir direction = NONE; // Default
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <getJoystickDir+0x90>

	} else if (abs(gp.pos_y) > abs(gp.pos_x)){
		if (gp.pos_y > 0){
			direction = UP;
		}else{
			direction = DOWN;
     8f2:	84 e0       	ldi	r24, 0x04	; 4
		}
		}
		
	return direction;
}
     8f4:	2a 96       	adiw	r28, 0x0a	; 10
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	08 95       	ret

0000090a <main>:
#include "oled.h"
#include "menu.h"
#include "spi.h"
#include "mcp2515.h"

int main(void) {
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	64 97       	sbiw	r28, 0x14	; 20
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
	UART_init(DEF_UBBR);
     91e:	8f e1       	ldi	r24, 0x1F	; 31
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 41 07 	call	0xe82	; 0xe82 <UART_init>
	SRAM_init();
     926:	0e 94 30 07 	call	0xe60	; 0xe60 <SRAM_init>
	adc_init();
     92a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <adc_init>
	gamepad_init();
     92e:	0e 94 a7 03 	call	0x74e	; 0x74e <gamepad_init>
	oled_init();
     932:	0e 94 3c 06 	call	0xc78	; 0xc78 <oled_init>
	oled_reset();
     936:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_reset>
	menu_init();
     93a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <menu_init>
	//mcp2515_init();
	mcp2515_init_loopback(); // TODO - Delete and replace with mcp2515_init(); after CAN controller test
     93e:	0e 94 45 05 	call	0xa8a	; 0xa8a <mcp2515_init_loopback>
	
	uint8_t sendVal = 0; // TODO: Delete after CAN controller test
     942:	d1 2c       	mov	r13, r1
	
	while(1){
		// =================================================
		// Read gamepad inputs
		
		gp = read_gamepad();
     944:	ce 01       	movw	r24, r28
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	0e 94 ad 03 	call	0x75a	; 0x75a <read_gamepad>
		gp = calibrate_gamepad(gp);
     94c:	e9 80       	ldd	r14, Y+1	; 0x01
     94e:	fa 80       	ldd	r15, Y+2	; 0x02
     950:	0b 81       	ldd	r16, Y+3	; 0x03
     952:	1c 81       	ldd	r17, Y+4	; 0x04
     954:	2d 81       	ldd	r18, Y+5	; 0x05
     956:	3e 81       	ldd	r19, Y+6	; 0x06
     958:	4f 81       	ldd	r20, Y+7	; 0x07
     95a:	58 85       	ldd	r21, Y+8	; 0x08
     95c:	69 85       	ldd	r22, Y+9	; 0x09
     95e:	7a 85       	ldd	r23, Y+10	; 0x0a
     960:	ce 01       	movw	r24, r28
     962:	0b 96       	adiw	r24, 0x0b	; 11
     964:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <calibrate_gamepad>
     968:	8a e0       	ldi	r24, 0x0A	; 10
     96a:	fe 01       	movw	r30, r28
     96c:	3b 96       	adiw	r30, 0x0b	; 11
     96e:	de 01       	movw	r26, r28
     970:	11 96       	adiw	r26, 0x01	; 1
     972:	01 90       	ld	r0, Z+
     974:	0d 92       	st	X+, r0
     976:	8a 95       	dec	r24
     978:	e1 f7       	brne	.-8      	; 0x972 <main+0x68>
		new_gp_dir = getJoystickDir(gp);
     97a:	09 81       	ldd	r16, Y+1	; 0x01
     97c:	1a 81       	ldd	r17, Y+2	; 0x02
     97e:	2b 81       	ldd	r18, Y+3	; 0x03
     980:	3c 81       	ldd	r19, Y+4	; 0x04
     982:	4d 81       	ldd	r20, Y+5	; 0x05
     984:	5e 81       	ldd	r21, Y+6	; 0x06
     986:	6f 81       	ldd	r22, Y+7	; 0x07
     988:	78 85       	ldd	r23, Y+8	; 0x08
     98a:	89 85       	ldd	r24, Y+9	; 0x09
     98c:	9a 85       	ldd	r25, Y+10	; 0x0a
     98e:	0e 94 32 04 	call	0x864	; 0x864 <getJoystickDir>
     992:	18 2f       	mov	r17, r24
		
		
		// =================================================
		// Display menu on OLED
		
		oled_reset();
     994:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_reset>
		if (new_gp_dir == UP && prev_gp_dir != UP ){
     998:	13 30       	cpi	r17, 0x03	; 3
     99a:	39 f4       	brne	.+14     	; 0x9aa <main+0xa0>
     99c:	23 e0       	ldi	r18, 0x03	; 3
     99e:	c2 16       	cp	r12, r18
     9a0:	21 f0       	breq	.+8      	; 0x9aa <main+0xa0>
			menu_moveCursor(-1);
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	0e 94 30 06 	call	0xc60	; 0xc60 <menu_moveCursor>
     9a8:	08 c0       	rjmp	.+16     	; 0x9ba <main+0xb0>
		}
		else if (new_gp_dir == DOWN && prev_gp_dir != DOWN ){
     9aa:	14 30       	cpi	r17, 0x04	; 4
     9ac:	31 f4       	brne	.+12     	; 0x9ba <main+0xb0>
     9ae:	84 e0       	ldi	r24, 0x04	; 4
     9b0:	c8 16       	cp	r12, r24
     9b2:	19 f0       	breq	.+6      	; 0x9ba <main+0xb0>
			menu_moveCursor(1);
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	0e 94 30 06 	call	0xc60	; 0xc60 <menu_moveCursor>
		}
		if(gp.btn){
     9ba:	89 85       	ldd	r24, Y+9	; 0x09
     9bc:	81 11       	cpse	r24, r1
			menu_selectPage();
     9be:	0e 94 09 06 	call	0xc12	; 0xc12 <menu_selectPage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c2:	9f e9       	ldi	r25, 0x9F	; 159
     9c4:	26 e8       	ldi	r18, 0x86	; 134
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	91 50       	subi	r25, 0x01	; 1
     9ca:	20 40       	sbci	r18, 0x00	; 0
     9cc:	80 40       	sbci	r24, 0x00	; 0
     9ce:	e1 f7       	brne	.-8      	; 0x9c8 <main+0xbe>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <main+0xc8>
     9d2:	00 00       	nop
		
		
		// =================================================
		// Test MCP2515 CAN Controller in loopback mode
		_delay_ms(500);
		sendVal += 1;
     9d4:	d3 94       	inc	r13
		mcp2515_write(0xAA, sendVal);
     9d6:	6d 2d       	mov	r22, r13
     9d8:	8a ea       	ldi	r24, 0xAA	; 170
     9da:	0e 94 1f 05 	call	0xa3e	; 0xa3e <mcp2515_write>
     9de:	9f e9       	ldi	r25, 0x9F	; 159
     9e0:	26 e8       	ldi	r18, 0x86	; 134
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	91 50       	subi	r25, 0x01	; 1
     9e6:	20 40       	sbci	r18, 0x00	; 0
     9e8:	80 40       	sbci	r24, 0x00	; 0
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <main+0xda>
     9ec:	00 c0       	rjmp	.+0      	; 0x9ee <main+0xe4>
     9ee:	00 00       	nop
		_delay_ms(500);
		uint8_t recVal = mcp2515_read(0xAA);
     9f0:	8a ea       	ldi	r24, 0xAA	; 170
     9f2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <mcp2515_read>
		printf("Sent: %02X    -    Received: %02X \r\n\r\n", sendVal, recVal);
     9f6:	1f 92       	push	r1
     9f8:	8f 93       	push	r24
     9fa:	1f 92       	push	r1
     9fc:	df 92       	push	r13
     9fe:	86 e0       	ldi	r24, 0x06	; 6
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	9f 93       	push	r25
     a04:	8f 93       	push	r24
     a06:	0e 94 c1 07 	call	0xf82	; 0xf82 <printf>
			menu_moveCursor(1);
		}
		if(gp.btn){
			menu_selectPage();
		}
		prev_gp_dir = new_gp_dir;
     a0a:	c1 2e       	mov	r12, r17
		mcp2515_write(0xAA, sendVal);
		_delay_ms(500);
		uint8_t recVal = mcp2515_read(0xAA);
		printf("Sent: %02X    -    Received: %02X \r\n\r\n", sendVal, recVal);
		
	}
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	95 cf       	rjmp	.-214    	; 0x944 <main+0x3a>

00000a1a <mcp2515_read>:
	//mcp2515_write(MCP_CNF3, TODO);	// PS2

	mcp2515_write(MCP_CANCTRL, MODE_NORMAL); // Enter normal mode
	mode = mcp2515_read(MCP_CANSTAT);
	if ((mode & MODE_MASK ) != MODE_NORMAL) {
		printf ("ERROR: MCP2515 is NOT in normal mode!\n");
     a1a:	cf 93       	push	r28
     a1c:	c8 2f       	mov	r28, r24
     a1e:	88 b3       	in	r24, 0x18	; 24
     a20:	8f 7e       	andi	r24, 0xEF	; 239
     a22:	88 bb       	out	0x18, r24	; 24
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	0e 94 27 07 	call	0xe4e	; 0xe4e <spi_send>
     a2a:	8c 2f       	mov	r24, r28
     a2c:	0e 94 27 07 	call	0xe4e	; 0xe4e <spi_send>
     a30:	0e 94 2b 07 	call	0xe56	; 0xe56 <spi_recv>
     a34:	98 b3       	in	r25, 0x18	; 24
     a36:	90 61       	ori	r25, 0x10	; 16
     a38:	98 bb       	out	0x18, r25	; 24
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <mcp2515_write>:
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	d8 2f       	mov	r29, r24
     a44:	c6 2f       	mov	r28, r22
     a46:	88 b3       	in	r24, 0x18	; 24
     a48:	8f 7e       	andi	r24, 0xEF	; 239
     a4a:	88 bb       	out	0x18, r24	; 24
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	0e 94 27 07 	call	0xe4e	; 0xe4e <spi_send>
     a52:	8d 2f       	mov	r24, r29
     a54:	0e 94 27 07 	call	0xe4e	; 0xe4e <spi_send>
     a58:	8c 2f       	mov	r24, r28
     a5a:	0e 94 27 07 	call	0xe4e	; 0xe4e <spi_send>
     a5e:	88 b3       	in	r24, 0x18	; 24
     a60:	80 61       	ori	r24, 0x10	; 16
     a62:	88 bb       	out	0x18, r24	; 24
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <mcp2515_reset>:
     a6a:	88 b3       	in	r24, 0x18	; 24
     a6c:	8f 7e       	andi	r24, 0xEF	; 239
     a6e:	88 bb       	out	0x18, r24	; 24
     a70:	80 ec       	ldi	r24, 0xC0	; 192
     a72:	0e 94 27 07 	call	0xe4e	; 0xe4e <spi_send>
     a76:	88 b3       	in	r24, 0x18	; 24
     a78:	80 61       	ori	r24, 0x10	; 16
     a7a:	88 bb       	out	0x18, r24	; 24
     a7c:	83 ec       	ldi	r24, 0xC3	; 195
     a7e:	99 e0       	ldi	r25, 0x09	; 9
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <mcp2515_reset+0x16>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <mcp2515_reset+0x1c>
     a86:	00 00       	nop
     a88:	08 95       	ret

00000a8a <mcp2515_init_loopback>:
	}
}


void mcp2515_init_loopback(){ // Init MCP in loopback mode (for testing)
	spi_init();
     a8a:	0e 94 21 07 	call	0xe42	; 0xe42 <spi_init>
	DEF_CAN_CS_ENABLE;
     a8e:	87 b3       	in	r24, 0x17	; 23
     a90:	80 61       	ori	r24, 0x10	; 16
     a92:	87 bb       	out	0x17, r24	; 23
	DEF_CAN_CS_OFF;
     a94:	88 b3       	in	r24, 0x18	; 24
     a96:	80 61       	ori	r24, 0x10	; 16
     a98:	88 bb       	out	0x18, r24	; 24
	
	// Reset and verify config mode
	mcp2515_reset();
     a9a:	0e 94 35 05 	call	0xa6a	; 0xa6a <mcp2515_reset>
	uint8_t mode = mcp2515_read(MCP_CANSTAT);
     a9e:	8e e0       	ldi	r24, 0x0E	; 14
     aa0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <mcp2515_read>
	if ((mode & MODE_MASK) != MODE_CONFIG){
     aa4:	80 7e       	andi	r24, 0xE0	; 224
     aa6:	80 38       	cpi	r24, 0x80	; 128
     aa8:	29 f0       	breq	.+10     	; 0xab4 <mcp2515_init_loopback+0x2a>
		printf (" ERROR: MCP2515 is NOT in config mode after reset!\r\n");
     aaa:	83 e5       	ldi	r24, 0x53	; 83
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	0e 94 d7 07 	call	0xfae	; 0xfae <puts>
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <mcp2515_init_loopback+0x32>
	}else{
		printf(" MCP2515 is working my dudes! :) \r\n");
     ab4:	87 e8       	ldi	r24, 0x87	; 135
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 d7 07 	call	0xfae	; 0xfae <puts>
	}
	
	// Set to loopback mode and verify
	mcp2515_write(0xF, MODE_LOOPBACK);
     abc:	60 e4       	ldi	r22, 0x40	; 64
     abe:	8f e0       	ldi	r24, 0x0F	; 15
     ac0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <mcp2515_write>
	mode = mcp2515_read(MCP_CANSTAT);
     ac4:	8e e0       	ldi	r24, 0x0E	; 14
     ac6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <mcp2515_read>
	if ((mode & MODE_MASK) != MODE_LOOPBACK){
     aca:	80 7e       	andi	r24, 0xE0	; 224
     acc:	80 34       	cpi	r24, 0x40	; 64
     ace:	29 f0       	breq	.+10     	; 0xada <mcp2515_init_loopback+0x50>
		printf ("ERROR: MCP2515 did not enter loopback mode\r\n");
     ad0:	8a ea       	ldi	r24, 0xAA	; 170
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 d7 07 	call	0xfae	; 0xfae <puts>
     ad8:	08 95       	ret
	}else{
		printf("MCP2515 Entered loopback mode B-)\r\n");
     ada:	86 ed       	ldi	r24, 0xD6	; 214
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	0e 94 d7 07 	call	0xfae	; 0xfae <puts>
     ae2:	08 95       	ret

00000ae4 <menu_func0>:
	if (menu.currentPage->parentMenu == NULL){
		return 0;	// Already in main menu (root) do nothing
	}
	menu.currentPage = menu.currentPage->parentMenu;	// Select parent menu of the current page.
	return 1;
}
     ae4:	89 ef       	ldi	r24, 0xF9	; 249
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	0e 94 d7 07 	call	0xfae	; 0xfae <puts>
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	89 ef       	ldi	r24, 0xF9	; 249
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 0a 07 	call	0xe14	; 0xe14 <oled_print>
     af6:	2f e9       	ldi	r18, 0x9F	; 159
     af8:	86 e8       	ldi	r24, 0x86	; 134
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	21 50       	subi	r18, 0x01	; 1
     afe:	80 40       	sbci	r24, 0x00	; 0
     b00:	90 40       	sbci	r25, 0x00	; 0
     b02:	e1 f7       	brne	.-8      	; 0xafc <menu_func0+0x18>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <menu_func0+0x22>
     b06:	00 00       	nop
     b08:	2f e9       	ldi	r18, 0x9F	; 159
     b0a:	86 e8       	ldi	r24, 0x86	; 134
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	21 50       	subi	r18, 0x01	; 1
     b10:	80 40       	sbci	r24, 0x00	; 0
     b12:	90 40       	sbci	r25, 0x00	; 0
     b14:	e1 f7       	brne	.-8      	; 0xb0e <menu_func0+0x2a>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <menu_func0+0x34>
     b18:	00 00       	nop
     b1a:	2f e9       	ldi	r18, 0x9F	; 159
     b1c:	86 e8       	ldi	r24, 0x86	; 134
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	21 50       	subi	r18, 0x01	; 1
     b22:	80 40       	sbci	r24, 0x00	; 0
     b24:	90 40       	sbci	r25, 0x00	; 0
     b26:	e1 f7       	brne	.-8      	; 0xb20 <menu_func0+0x3c>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <menu_func0+0x46>
     b2a:	00 00       	nop
     b2c:	2f e9       	ldi	r18, 0x9F	; 159
     b2e:	86 e8       	ldi	r24, 0x86	; 134
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	21 50       	subi	r18, 0x01	; 1
     b34:	80 40       	sbci	r24, 0x00	; 0
     b36:	90 40       	sbci	r25, 0x00	; 0
     b38:	e1 f7       	brne	.-8      	; 0xb32 <menu_func0+0x4e>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <menu_func0+0x58>
     b3c:	00 00       	nop
     b3e:	2f e9       	ldi	r18, 0x9F	; 159
     b40:	86 e8       	ldi	r24, 0x86	; 134
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	21 50       	subi	r18, 0x01	; 1
     b46:	80 40       	sbci	r24, 0x00	; 0
     b48:	90 40       	sbci	r25, 0x00	; 0
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <menu_func0+0x60>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <menu_func0+0x6a>
     b4e:	00 00       	nop
     b50:	2f e9       	ldi	r18, 0x9F	; 159
     b52:	86 e8       	ldi	r24, 0x86	; 134
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	21 50       	subi	r18, 0x01	; 1
     b58:	80 40       	sbci	r24, 0x00	; 0
     b5a:	90 40       	sbci	r25, 0x00	; 0
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <menu_func0+0x72>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <menu_func0+0x7c>
     b60:	00 00       	nop
     b62:	08 95       	ret

00000b64 <menu_func1>:
     b64:	8d e0       	ldi	r24, 0x0D	; 13
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	0e 94 d7 07 	call	0xfae	; 0xfae <puts>
     b6c:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_reset>
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	8d e0       	ldi	r24, 0x0D	; 13
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	0e 94 0a 07 	call	0xe14	; 0xe14 <oled_print>
     b7a:	2f e3       	ldi	r18, 0x3F	; 63
     b7c:	82 e4       	ldi	r24, 0x42	; 66
     b7e:	9f e0       	ldi	r25, 0x0F	; 15
     b80:	21 50       	subi	r18, 0x01	; 1
     b82:	80 40       	sbci	r24, 0x00	; 0
     b84:	90 40       	sbci	r25, 0x00	; 0
     b86:	e1 f7       	brne	.-8      	; 0xb80 <menu_func1+0x1c>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <menu_func1+0x26>
     b8a:	00 00       	nop
     b8c:	08 95       	ret

00000b8e <menu_init>:
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	8a e0       	ldi	r24, 0x0A	; 10
     b94:	e2 e2       	ldi	r30, 0x22	; 34
     b96:	f2 e0       	ldi	r31, 0x02	; 2
     b98:	a3 e6       	ldi	r26, 0x63	; 99
     b9a:	b2 e0       	ldi	r27, 0x02	; 2
     b9c:	01 90       	ld	r0, Z+
     b9e:	0d 92       	st	X+, r0
     ba0:	8a 95       	dec	r24
     ba2:	e1 f7       	brne	.-8      	; 0xb9c <menu_init+0xe>
     ba4:	ca e4       	ldi	r28, 0x4A	; 74
     ba6:	d2 e0       	ldi	r29, 0x02	; 2
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	88 8f       	std	Y+24, r24	; 0x18
     bac:	8c e4       	ldi	r24, 0x4C	; 76
     bae:	92 e0       	ldi	r25, 0x02	; 2
     bb0:	99 83       	std	Y+1, r25	; 0x01
     bb2:	88 83       	st	Y, r24
     bb4:	8b e0       	ldi	r24, 0x0B	; 11
     bb6:	ec e2       	ldi	r30, 0x2C	; 44
     bb8:	f2 e0       	ldi	r31, 0x02	; 2
     bba:	a5 e9       	ldi	r26, 0x95	; 149
     bbc:	b2 e0       	ldi	r27, 0x02	; 2
     bbe:	01 90       	ld	r0, Z+
     bc0:	0d 92       	st	X+, r0
     bc2:	8a 95       	dec	r24
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <menu_init+0x30>
     bc6:	82 e7       	ldi	r24, 0x72	; 114
     bc8:	95 e0       	ldi	r25, 0x05	; 5
     bca:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <__data_end+0x65>
     bce:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <__data_end+0x64>
     bd2:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <__data_end+0x4a>
     bd6:	8e e7       	ldi	r24, 0x7E	; 126
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	9d 83       	std	Y+5, r25	; 0x05
     bdc:	8c 83       	std	Y+4, r24	; 0x04
     bde:	8b e0       	ldi	r24, 0x0B	; 11
     be0:	e7 e3       	ldi	r30, 0x37	; 55
     be2:	f2 e0       	ldi	r31, 0x02	; 2
     be4:	a7 ec       	ldi	r26, 0xC7	; 199
     be6:	b2 e0       	ldi	r27, 0x02	; 2
     be8:	01 90       	ld	r0, Z+
     bea:	0d 92       	st	X+, r0
     bec:	8a 95       	dec	r24
     bee:	e1 f7       	brne	.-8      	; 0xbe8 <menu_init+0x5a>
     bf0:	82 eb       	ldi	r24, 0xB2	; 178
     bf2:	95 e0       	ldi	r25, 0x05	; 5
     bf4:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <__data_end+0x97>
     bf8:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <__data_end+0x96>
     bfc:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <__data_end+0x7c>
     c00:	80 eb       	ldi	r24, 0xB0	; 176
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	9f 83       	std	Y+7, r25	; 0x07
     c06:	8e 83       	std	Y+6, r24	; 0x06
     c08:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <__data_end+0x98>
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <menu_selectPage>:


void menu_selectPage(){
	menu.currentPage->subMenu[menu.cursor]->run();  // run the function for the selected page
     c12:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     c16:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <__data_end+0x1>
     c1a:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <__data_end+0x98>
     c1e:	0e 2e       	mov	r0, r30
     c20:	00 0c       	add	r0, r0
     c22:	ff 0b       	sbc	r31, r31
     c24:	31 96       	adiw	r30, 0x01	; 1
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	e8 0f       	add	r30, r24
     c2c:	f9 1f       	adc	r31, r25
     c2e:	01 90       	ld	r0, Z+
     c30:	f0 81       	ld	r31, Z
     c32:	e0 2d       	mov	r30, r0
     c34:	00 a8       	ldd	r0, Z+48	; 0x30
     c36:	f1 a9       	ldd	r31, Z+49	; 0x31
     c38:	e0 2d       	mov	r30, r0
     c3a:	09 95       	icall
     c3c:	08 95       	ret

00000c3e <menu_setCursor>:
}


bool menu_setCursor(int8_t index){
	// check if index is out of range
	if (index < 0){
     c3e:	88 23       	and	r24, r24
     c40:	5c f0       	brlt	.+22     	; 0xc58 <menu_setCursor+0x1a>
		return 0;	// do nothing
	}
	else if(index >= menu.currentPage->totalSubMenu){
     c42:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <__data_end>
     c46:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <__data_end+0x1>
     c4a:	96 89       	ldd	r25, Z+22	; 0x16
     c4c:	89 17       	cp	r24, r25
     c4e:	34 f4       	brge	.+12     	; 0xc5c <menu_setCursor+0x1e>
		return 0;	// do nothing
	}
	menu.cursor = index;	// update cursor location
     c50:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <__data_end+0x98>
	return 1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	08 95       	ret


bool menu_setCursor(int8_t index){
	// check if index is out of range
	if (index < 0){
		return 0;	// do nothing
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	08 95       	ret
	}
	else if(index >= menu.currentPage->totalSubMenu){
		return 0;	// do nothing
     c5c:	80 e0       	ldi	r24, 0x00	; 0
	}
	menu.cursor = index;	// update cursor location
	return 1;
}
     c5e:	08 95       	ret

00000c60 <menu_moveCursor>:


bool menu_moveCursor(int8_t direction){
	int8_t index = menu.cursor + direction;
     c60:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <__data_end+0x98>
	menu_setCursor(index);
     c64:	89 0f       	add	r24, r25
     c66:	0e 94 1f 06 	call	0xc3e	; 0xc3e <menu_setCursor>
}
     c6a:	08 95       	ret

00000c6c <oled_write_data>:
void oled_write_line(uint8_t page){
	oled_goto_page(page);
	for (uint8_t i = 0; i < 128; i++){
		oled_write_data(0x01);
	}
}
     c6c:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xf13>
     c70:	08 95       	ret

00000c72 <oled_write_cmd>:
     c72:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd13>
     c76:	08 95       	ret

00000c78 <oled_init>:
     c78:	8e ea       	ldi	r24, 0xAE	; 174
     c7a:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     c7e:	81 ea       	ldi	r24, 0xA1	; 161
     c80:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     c84:	8a ed       	ldi	r24, 0xDA	; 218
     c86:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     c8a:	82 e1       	ldi	r24, 0x12	; 18
     c8c:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     c90:	88 ec       	ldi	r24, 0xC8	; 200
     c92:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     c96:	88 ea       	ldi	r24, 0xA8	; 168
     c98:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     c9c:	8f e3       	ldi	r24, 0x3F	; 63
     c9e:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     ca2:	85 ed       	ldi	r24, 0xD5	; 213
     ca4:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     ca8:	80 e8       	ldi	r24, 0x80	; 128
     caa:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     cae:	81 e8       	ldi	r24, 0x81	; 129
     cb0:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     cb4:	80 e5       	ldi	r24, 0x50	; 80
     cb6:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     cba:	89 ed       	ldi	r24, 0xD9	; 217
     cbc:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     cc0:	81 e2       	ldi	r24, 0x21	; 33
     cc2:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     cc6:	80 e2       	ldi	r24, 0x20	; 32
     cc8:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     cd2:	8b ed       	ldi	r24, 0xDB	; 219
     cd4:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     cd8:	80 e3       	ldi	r24, 0x30	; 48
     cda:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     cde:	8d ea       	ldi	r24, 0xAD	; 173
     ce0:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     cea:	84 ea       	ldi	r24, 0xA4	; 164
     cec:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     cf0:	86 ea       	ldi	r24, 0xA6	; 166
     cf2:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     cf6:	8f ea       	ldi	r24, 0xAF	; 175
     cf8:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     cfc:	08 95       	ret

00000cfe <oled_goto_page>:
     cfe:	87 70       	andi	r24, 0x07	; 7
     d00:	80 6b       	ori	r24, 0xB0	; 176
     d02:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     d06:	08 95       	ret

00000d08 <oled_goto_col>:
     d08:	cf 93       	push	r28
     d0a:	c8 2f       	mov	r28, r24
     d0c:	8f 70       	andi	r24, 0x0F	; 15
     d0e:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     d12:	8c 2f       	mov	r24, r28
     d14:	82 95       	swap	r24
     d16:	8f 70       	andi	r24, 0x0F	; 15
     d18:	80 61       	ori	r24, 0x10	; 16
     d1a:	0e 94 39 06 	call	0xc72	; 0xc72 <oled_write_cmd>
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <oled_pos>:
     d22:	cf 93       	push	r28
     d24:	c6 2f       	mov	r28, r22
     d26:	0e 94 7f 06 	call	0xcfe	; 0xcfe <oled_goto_page>
     d2a:	8c 2f       	mov	r24, r28
     d2c:	0e 94 84 06 	call	0xd08	; 0xd08 <oled_goto_col>
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <oled_home>:
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	0e 94 91 06 	call	0xd22	; 0xd22 <oled_pos>
     d3c:	08 95       	ret

00000d3e <oled_clear_line>:


void oled_clear_line(uint8_t page){
     d3e:	cf 93       	push	r28
	oled_goto_page(page);
     d40:	0e 94 7f 06 	call	0xcfe	; 0xcfe <oled_goto_page>
	for (uint8_t i = 0; i < 128; i++){
     d44:	c0 e0       	ldi	r28, 0x00	; 0
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <oled_clear_line+0x12>
		oled_write_data(0x00);
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	0e 94 36 06 	call	0xc6c	; 0xc6c <oled_write_data>
}


void oled_clear_line(uint8_t page){
	oled_goto_page(page);
	for (uint8_t i = 0; i < 128; i++){
     d4e:	cf 5f       	subi	r28, 0xFF	; 255
     d50:	cc 23       	and	r28, r28
     d52:	d4 f7       	brge	.-12     	; 0xd48 <oled_clear_line+0xa>
		oled_write_data(0x00);
	}
}
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <oled_reset>:


void oled_reset(){
     d58:	cf 93       	push	r28
	for (uint8_t i=0; i < 8; i++){
     d5a:	c0 e0       	ldi	r28, 0x00	; 0
     d5c:	04 c0       	rjmp	.+8      	; 0xd66 <oled_reset+0xe>
		oled_clear_line(i);
     d5e:	8c 2f       	mov	r24, r28
     d60:	0e 94 9f 06 	call	0xd3e	; 0xd3e <oled_clear_line>
	}
}


void oled_reset(){
	for (uint8_t i=0; i < 8; i++){
     d64:	cf 5f       	subi	r28, 0xFF	; 255
     d66:	c8 30       	cpi	r28, 0x08	; 8
     d68:	d0 f3       	brcs	.-12     	; 0xd5e <oled_reset+0x6>
		oled_clear_line(i);
	}
	oled_home();
     d6a:	0e 94 9a 06 	call	0xd34	; 0xd34 <oled_home>
}
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <oled_printChar>:


void oled_printChar(char c, char font){
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
     d76:	90 ee       	ldi	r25, 0xE0	; 224
     d78:	98 0f       	add	r25, r24
     d7a:	90 36       	cpi	r25, 0x60	; 96
     d7c:	08 f0       	brcs	.+2      	; 0xd80 <oled_printChar+0xe>
     d7e:	47 c0       	rjmp	.+142    	; 0xe0e <oled_printChar+0x9c>
     d80:	c8 2f       	mov	r28, r24
		switch (font){
     d82:	64 30       	cpi	r22, 0x04	; 4
     d84:	99 f0       	breq	.+38     	; 0xdac <oled_printChar+0x3a>
     d86:	68 30       	cpi	r22, 0x08	; 8
     d88:	39 f1       	breq	.+78     	; 0xdd8 <oled_printChar+0x66>
     d8a:	3e c0       	rjmp	.+124    	; 0xe08 <oled_printChar+0x96>
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
     d8c:	ec 2f       	mov	r30, r28
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	b0 97       	sbiw	r30, 0x20	; 32
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	ee 0f       	add	r30, r30
     d98:	ff 1f       	adc	r31, r31
     d9a:	ed 0f       	add	r30, r29
     d9c:	f1 1d       	adc	r31, r1
     d9e:	e0 59       	subi	r30, 0x90	; 144
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	84 91       	lpm	r24, Z
     da4:	0e 94 36 06 	call	0xc6c	; 0xc6c <oled_write_data>
void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
     da8:	df 5f       	subi	r29, 0xFF	; 255
     daa:	01 c0       	rjmp	.+2      	; 0xdae <oled_printChar+0x3c>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
     dac:	d0 e0       	ldi	r29, 0x00	; 0
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
     dae:	d4 30       	cpi	r29, 0x04	; 4
     db0:	68 f3       	brcs	.-38     	; 0xd8c <oled_printChar+0x1a>
     db2:	2d c0       	rjmp	.+90     	; 0xe0e <oled_printChar+0x9c>
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
     db4:	ec 2f       	mov	r30, r28
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	b0 97       	sbiw	r30, 0x20	; 32
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	ee 0f       	add	r30, r30
     dc0:	ff 1f       	adc	r31, r31
     dc2:	ee 0f       	add	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	ed 0f       	add	r30, r29
     dc8:	f1 1d       	adc	r31, r1
     dca:	e9 53       	subi	r30, 0x39	; 57
     dcc:	fc 4f       	sbci	r31, 0xFC	; 252
     dce:	84 91       	lpm	r24, Z
     dd0:	0e 94 36 06 	call	0xc6c	; 0xc6c <oled_write_data>
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
     dd4:	df 5f       	subi	r29, 0xFF	; 255
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <oled_printChar+0x68>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
     dd8:	d0 e0       	ldi	r29, 0x00	; 0
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
     dda:	d8 30       	cpi	r29, 0x08	; 8
     ddc:	58 f3       	brcs	.-42     	; 0xdb4 <oled_printChar+0x42>
     dde:	17 c0       	rjmp	.+46     	; 0xe0e <oled_printChar+0x9c>
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
					oled_write_data(pgm_read_byte(&font5[c-32][i]));
     de0:	2c 2f       	mov	r18, r28
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	20 52       	subi	r18, 0x20	; 32
     de6:	31 09       	sbc	r19, r1
     de8:	f9 01       	movw	r30, r18
     dea:	ee 0f       	add	r30, r30
     dec:	ff 1f       	adc	r31, r31
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	e2 0f       	add	r30, r18
     df4:	f3 1f       	adc	r31, r19
     df6:	ed 0f       	add	r30, r29
     df8:	f1 1d       	adc	r31, r1
     dfa:	e4 51       	subi	r30, 0x14	; 20
     dfc:	fe 4f       	sbci	r31, 0xFE	; 254
     dfe:	84 91       	lpm	r24, Z
     e00:	0e 94 36 06 	call	0xc6c	; 0xc6c <oled_write_data>
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
     e04:	df 5f       	subi	r29, 0xFF	; 255
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <oled_printChar+0x98>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
     e08:	d0 e0       	ldi	r29, 0x00	; 0
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
     e0a:	d5 30       	cpi	r29, 0x05	; 5
     e0c:	48 f3       	brcs	.-46     	; 0xde0 <oled_printChar+0x6e>
					oled_write_data(pgm_read_byte(&font5[c-32][i]));
				}
				break;
		}
	}
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <oled_print>:


// Print strings to OLED
void oled_print(const char* data, char font){
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	8c 01       	movw	r16, r24
	char f = 5; // Default font (5x8 NORMAL)
	if (f == 4 || f == 8){ // Selected fonts 4x8 SMALL or 8x8 LARGE
		f = font;
	}
	
	int i = 0;
     e1e:	c0 e0       	ldi	r28, 0x00	; 0
     e20:	d0 e0       	ldi	r29, 0x00	; 0
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <oled_print+0x18>
	while(data[i] != '\0'){
		oled_printChar(data[i], f);
     e24:	65 e0       	ldi	r22, 0x05	; 5
     e26:	0e 94 b9 06 	call	0xd72	; 0xd72 <oled_printChar>
		++i;
     e2a:	21 96       	adiw	r28, 0x01	; 1
	if (f == 4 || f == 8){ // Selected fonts 4x8 SMALL or 8x8 LARGE
		f = font;
	}
	
	int i = 0;
	while(data[i] != '\0'){
     e2c:	f8 01       	movw	r30, r16
     e2e:	ec 0f       	add	r30, r28
     e30:	fd 1f       	adc	r31, r29
     e32:	80 81       	ld	r24, Z
     e34:	81 11       	cpse	r24, r1
     e36:	f6 cf       	rjmp	.-20     	; 0xe24 <oled_print+0x10>
		oled_printChar(data[i], f);
		++i;
	}
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	08 95       	ret

00000e42 <spi_init>:
#include <avr/io.h>

// Initialize as master
// Code modified from ATMega162 data sheet
void spi_init(void){
	DDRB |= (1 << PB5)|(1 << PB7); // MOSI out, SCK out
     e42:	87 b3       	in	r24, 0x17	; 23
     e44:	80 6a       	ori	r24, 0xA0	; 160
     e46:	87 bb       	out	0x17, r24	; 23
	// Enable SPI as master (SPE, MSTR)
	// Set clock rate F_CPU/16 (SPR0)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     e48:	81 e5       	ldi	r24, 0x51	; 81
     e4a:	8d b9       	out	0x0d, r24	; 13
     e4c:	08 95       	ret

00000e4e <spi_send>:
}


// Send data as master
void spi_send(char cData){
	SPDR = cData;
     e4e:	8f b9       	out	0x0f, r24	; 15
	
	// Wait for transmission complete
	while(!(SPSR & 1<<SPIF)){
     e50:	77 9b       	sbis	0x0e, 7	; 14
     e52:	fe cf       	rjmp	.-4      	; 0xe50 <spi_send+0x2>
		;
	}
}
     e54:	08 95       	ret

00000e56 <spi_recv>:

// Receive data as master
// Same as sending
// Moves ring buffer by 8 bits to receive 8 bits from slave
uint8_t spi_recv(void){
	spi_send(0);
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	0e 94 27 07 	call	0xe4e	; 0xe4e <spi_send>
	return SPDR;
     e5c:	8f b1       	in	r24, 0x0f	; 15
     e5e:	08 95       	ret

00000e60 <SRAM_init>:
#include <avr/io.h>
#include <inttypes.h> // Needed for uint16_t


void SRAM_init() {
	MCUCR |= (1 << SRE); // Enable SRAM
     e60:	85 b7       	in	r24, 0x35	; 53
     e62:	80 68       	ori	r24, 0x80	; 128
     e64:	85 bf       	out	0x35, r24	; 53
	SFIOR = (1 << XMM2); // Masks PC4-PC7 to make sure JTAG remains untouched
     e66:	80 e2       	ldi	r24, 0x20	; 32
     e68:	80 bf       	out	0x30, r24	; 48
     e6a:	08 95       	ret

00000e6c <UART_receive>:
#include <stdio.h>
#include <avr/io.h>


int UART_receive(FILE * file) {
    while (!(UCSR0A & (1 << RXC0)));  // Wait until data is available to read
     e6c:	5f 9b       	sbis	0x0b, 7	; 11
     e6e:	fe cf       	rjmp	.-4      	; 0xe6c <UART_receive>
    return UDR0;  // Return the received data
     e70:	8c b1       	in	r24, 0x0c	; 12
}
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	08 95       	ret

00000e76 <UART_transmit>:


int UART_transmit(char data, FILE * file) {
    while (!(UCSR0A & (1 << UDRE0)));  // Wait for the data register to be empty
     e76:	5d 9b       	sbis	0x0b, 5	; 11
     e78:	fe cf       	rjmp	.-4      	; 0xe76 <UART_transmit>
    UDR0 = data;  // Load the data into the register for transmission
     e7a:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	08 95       	ret

00000e82 <UART_init>:


void UART_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     e82:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     e84:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     e86:	88 e1       	ldi	r24, 0x18	; 24
     e88:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, synchronous mode */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     e8a:	8e e8       	ldi	r24, 0x8E	; 142
     e8c:	80 bd       	out	0x20, r24	; 32
	// Make the transmit & receive functions write to a stream / file
	fdevopen(UART_transmit, UART_receive);
     e8e:	66 e3       	ldi	r22, 0x36	; 54
     e90:	77 e0       	ldi	r23, 0x07	; 7
     e92:	8b e3       	ldi	r24, 0x3B	; 59
     e94:	97 e0       	ldi	r25, 0x07	; 7
     e96:	0e 94 76 07 	call	0xeec	; 0xeec <fdevopen>
     e9a:	08 95       	ret

00000e9c <__divmodhi4>:
     e9c:	97 fb       	bst	r25, 7
     e9e:	07 2e       	mov	r0, r23
     ea0:	16 f4       	brtc	.+4      	; 0xea6 <__divmodhi4+0xa>
     ea2:	00 94       	com	r0
     ea4:	07 d0       	rcall	.+14     	; 0xeb4 <__divmodhi4_neg1>
     ea6:	77 fd       	sbrc	r23, 7
     ea8:	09 d0       	rcall	.+18     	; 0xebc <__divmodhi4_neg2>
     eaa:	0e 94 62 07 	call	0xec4	; 0xec4 <__udivmodhi4>
     eae:	07 fc       	sbrc	r0, 7
     eb0:	05 d0       	rcall	.+10     	; 0xebc <__divmodhi4_neg2>
     eb2:	3e f4       	brtc	.+14     	; 0xec2 <__divmodhi4_exit>

00000eb4 <__divmodhi4_neg1>:
     eb4:	90 95       	com	r25
     eb6:	81 95       	neg	r24
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	08 95       	ret

00000ebc <__divmodhi4_neg2>:
     ebc:	70 95       	com	r23
     ebe:	61 95       	neg	r22
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255

00000ec2 <__divmodhi4_exit>:
     ec2:	08 95       	ret

00000ec4 <__udivmodhi4>:
     ec4:	aa 1b       	sub	r26, r26
     ec6:	bb 1b       	sub	r27, r27
     ec8:	51 e1       	ldi	r21, 0x11	; 17
     eca:	07 c0       	rjmp	.+14     	; 0xeda <__udivmodhi4_ep>

00000ecc <__udivmodhi4_loop>:
     ecc:	aa 1f       	adc	r26, r26
     ece:	bb 1f       	adc	r27, r27
     ed0:	a6 17       	cp	r26, r22
     ed2:	b7 07       	cpc	r27, r23
     ed4:	10 f0       	brcs	.+4      	; 0xeda <__udivmodhi4_ep>
     ed6:	a6 1b       	sub	r26, r22
     ed8:	b7 0b       	sbc	r27, r23

00000eda <__udivmodhi4_ep>:
     eda:	88 1f       	adc	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	5a 95       	dec	r21
     ee0:	a9 f7       	brne	.-22     	; 0xecc <__udivmodhi4_loop>
     ee2:	80 95       	com	r24
     ee4:	90 95       	com	r25
     ee6:	bc 01       	movw	r22, r24
     ee8:	cd 01       	movw	r24, r26
     eea:	08 95       	ret

00000eec <fdevopen>:
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	31 f4       	brne	.+12     	; 0xf04 <fdevopen+0x18>
     ef8:	61 15       	cp	r22, r1
     efa:	71 05       	cpc	r23, r1
     efc:	19 f4       	brne	.+6      	; 0xf04 <fdevopen+0x18>
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	3a c0       	rjmp	.+116    	; 0xf78 <fdevopen+0x8c>
     f04:	8b 01       	movw	r16, r22
     f06:	ec 01       	movw	r28, r24
     f08:	6e e0       	ldi	r22, 0x0E	; 14
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <calloc>
     f14:	fc 01       	movw	r30, r24
     f16:	89 2b       	or	r24, r25
     f18:	91 f3       	breq	.-28     	; 0xefe <fdevopen+0x12>
     f1a:	80 e8       	ldi	r24, 0x80	; 128
     f1c:	83 83       	std	Z+3, r24	; 0x03
     f1e:	01 15       	cp	r16, r1
     f20:	11 05       	cpc	r17, r1
     f22:	71 f0       	breq	.+28     	; 0xf40 <fdevopen+0x54>
     f24:	13 87       	std	Z+11, r17	; 0x0b
     f26:	02 87       	std	Z+10, r16	; 0x0a
     f28:	81 e8       	ldi	r24, 0x81	; 129
     f2a:	83 83       	std	Z+3, r24	; 0x03
     f2c:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <__iob>
     f30:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <__iob+0x1>
     f34:	89 2b       	or	r24, r25
     f36:	21 f4       	brne	.+8      	; 0xf40 <fdevopen+0x54>
     f38:	f0 93 e4 02 	sts	0x02E4, r31	; 0x8002e4 <__iob+0x1>
     f3c:	e0 93 e3 02 	sts	0x02E3, r30	; 0x8002e3 <__iob>
     f40:	20 97       	sbiw	r28, 0x00	; 0
     f42:	c9 f0       	breq	.+50     	; 0xf76 <fdevopen+0x8a>
     f44:	d1 87       	std	Z+9, r29	; 0x09
     f46:	c0 87       	std	Z+8, r28	; 0x08
     f48:	83 81       	ldd	r24, Z+3	; 0x03
     f4a:	82 60       	ori	r24, 0x02	; 2
     f4c:	83 83       	std	Z+3, r24	; 0x03
     f4e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <__iob+0x2>
     f52:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <__iob+0x3>
     f56:	89 2b       	or	r24, r25
     f58:	71 f4       	brne	.+28     	; 0xf76 <fdevopen+0x8a>
     f5a:	f0 93 e6 02 	sts	0x02E6, r31	; 0x8002e6 <__iob+0x3>
     f5e:	e0 93 e5 02 	sts	0x02E5, r30	; 0x8002e5 <__iob+0x2>
     f62:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <__iob+0x4>
     f66:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <__iob+0x5>
     f6a:	89 2b       	or	r24, r25
     f6c:	21 f4       	brne	.+8      	; 0xf76 <fdevopen+0x8a>
     f6e:	f0 93 e8 02 	sts	0x02E8, r31	; 0x8002e8 <__iob+0x5>
     f72:	e0 93 e7 02 	sts	0x02E7, r30	; 0x8002e7 <__iob+0x4>
     f76:	cf 01       	movw	r24, r30
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <printf>:
     f82:	a0 e0       	ldi	r26, 0x00	; 0
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e7 ec       	ldi	r30, 0xC7	; 199
     f88:	f7 e0       	ldi	r31, 0x07	; 7
     f8a:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <__prologue_saves__+0x20>
     f8e:	ae 01       	movw	r20, r28
     f90:	4b 5f       	subi	r20, 0xFB	; 251
     f92:	5f 4f       	sbci	r21, 0xFF	; 255
     f94:	fa 01       	movw	r30, r20
     f96:	61 91       	ld	r22, Z+
     f98:	71 91       	ld	r23, Z+
     f9a:	af 01       	movw	r20, r30
     f9c:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <__iob+0x2>
     fa0:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <__iob+0x3>
     fa4:	0e 94 07 08 	call	0x100e	; 0x100e <vfprintf>
     fa8:	e2 e0       	ldi	r30, 0x02	; 2
     faa:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__epilogue_restores__+0x20>

00000fae <puts>:
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <__iob+0x2>
     fba:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <__iob+0x3>
     fbe:	23 81       	ldd	r18, Z+3	; 0x03
     fc0:	21 ff       	sbrs	r18, 1
     fc2:	1b c0       	rjmp	.+54     	; 0xffa <puts+0x4c>
     fc4:	8c 01       	movw	r16, r24
     fc6:	d0 e0       	ldi	r29, 0x00	; 0
     fc8:	c0 e0       	ldi	r28, 0x00	; 0
     fca:	f8 01       	movw	r30, r16
     fcc:	81 91       	ld	r24, Z+
     fce:	8f 01       	movw	r16, r30
     fd0:	60 91 e5 02 	lds	r22, 0x02E5	; 0x8002e5 <__iob+0x2>
     fd4:	70 91 e6 02 	lds	r23, 0x02E6	; 0x8002e6 <__iob+0x3>
     fd8:	db 01       	movw	r26, r22
     fda:	18 96       	adiw	r26, 0x08	; 8
     fdc:	ed 91       	ld	r30, X+
     fde:	fc 91       	ld	r31, X
     fe0:	19 97       	sbiw	r26, 0x09	; 9
     fe2:	88 23       	and	r24, r24
     fe4:	31 f0       	breq	.+12     	; 0xff2 <puts+0x44>
     fe6:	09 95       	icall
     fe8:	89 2b       	or	r24, r25
     fea:	79 f3       	breq	.-34     	; 0xfca <puts+0x1c>
     fec:	df ef       	ldi	r29, 0xFF	; 255
     fee:	cf ef       	ldi	r28, 0xFF	; 255
     ff0:	ec cf       	rjmp	.-40     	; 0xfca <puts+0x1c>
     ff2:	8a e0       	ldi	r24, 0x0A	; 10
     ff4:	09 95       	icall
     ff6:	89 2b       	or	r24, r25
     ff8:	19 f0       	breq	.+6      	; 0x1000 <puts+0x52>
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <puts+0x56>
    1000:	8d 2f       	mov	r24, r29
    1002:	9c 2f       	mov	r25, r28
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	08 95       	ret

0000100e <vfprintf>:
    100e:	ab e0       	ldi	r26, 0x0B	; 11
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ed e0       	ldi	r30, 0x0D	; 13
    1014:	f8 e0       	ldi	r31, 0x08	; 8
    1016:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__prologue_saves__>
    101a:	6c 01       	movw	r12, r24
    101c:	7b 01       	movw	r14, r22
    101e:	8a 01       	movw	r16, r20
    1020:	fc 01       	movw	r30, r24
    1022:	17 82       	std	Z+7, r1	; 0x07
    1024:	16 82       	std	Z+6, r1	; 0x06
    1026:	83 81       	ldd	r24, Z+3	; 0x03
    1028:	81 ff       	sbrs	r24, 1
    102a:	cc c1       	rjmp	.+920    	; 0x13c4 <vfprintf+0x3b6>
    102c:	ce 01       	movw	r24, r28
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	3c 01       	movw	r6, r24
    1032:	f6 01       	movw	r30, r12
    1034:	93 81       	ldd	r25, Z+3	; 0x03
    1036:	f7 01       	movw	r30, r14
    1038:	93 fd       	sbrc	r25, 3
    103a:	85 91       	lpm	r24, Z+
    103c:	93 ff       	sbrs	r25, 3
    103e:	81 91       	ld	r24, Z+
    1040:	7f 01       	movw	r14, r30
    1042:	88 23       	and	r24, r24
    1044:	09 f4       	brne	.+2      	; 0x1048 <vfprintf+0x3a>
    1046:	ba c1       	rjmp	.+884    	; 0x13bc <vfprintf+0x3ae>
    1048:	85 32       	cpi	r24, 0x25	; 37
    104a:	39 f4       	brne	.+14     	; 0x105a <vfprintf+0x4c>
    104c:	93 fd       	sbrc	r25, 3
    104e:	85 91       	lpm	r24, Z+
    1050:	93 ff       	sbrs	r25, 3
    1052:	81 91       	ld	r24, Z+
    1054:	7f 01       	movw	r14, r30
    1056:	85 32       	cpi	r24, 0x25	; 37
    1058:	29 f4       	brne	.+10     	; 0x1064 <vfprintf+0x56>
    105a:	b6 01       	movw	r22, r12
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    1062:	e7 cf       	rjmp	.-50     	; 0x1032 <vfprintf+0x24>
    1064:	91 2c       	mov	r9, r1
    1066:	21 2c       	mov	r2, r1
    1068:	31 2c       	mov	r3, r1
    106a:	ff e1       	ldi	r31, 0x1F	; 31
    106c:	f3 15       	cp	r31, r3
    106e:	d8 f0       	brcs	.+54     	; 0x10a6 <vfprintf+0x98>
    1070:	8b 32       	cpi	r24, 0x2B	; 43
    1072:	79 f0       	breq	.+30     	; 0x1092 <vfprintf+0x84>
    1074:	38 f4       	brcc	.+14     	; 0x1084 <vfprintf+0x76>
    1076:	80 32       	cpi	r24, 0x20	; 32
    1078:	79 f0       	breq	.+30     	; 0x1098 <vfprintf+0x8a>
    107a:	83 32       	cpi	r24, 0x23	; 35
    107c:	a1 f4       	brne	.+40     	; 0x10a6 <vfprintf+0x98>
    107e:	23 2d       	mov	r18, r3
    1080:	20 61       	ori	r18, 0x10	; 16
    1082:	1d c0       	rjmp	.+58     	; 0x10be <vfprintf+0xb0>
    1084:	8d 32       	cpi	r24, 0x2D	; 45
    1086:	61 f0       	breq	.+24     	; 0x10a0 <vfprintf+0x92>
    1088:	80 33       	cpi	r24, 0x30	; 48
    108a:	69 f4       	brne	.+26     	; 0x10a6 <vfprintf+0x98>
    108c:	23 2d       	mov	r18, r3
    108e:	21 60       	ori	r18, 0x01	; 1
    1090:	16 c0       	rjmp	.+44     	; 0x10be <vfprintf+0xb0>
    1092:	83 2d       	mov	r24, r3
    1094:	82 60       	ori	r24, 0x02	; 2
    1096:	38 2e       	mov	r3, r24
    1098:	e3 2d       	mov	r30, r3
    109a:	e4 60       	ori	r30, 0x04	; 4
    109c:	3e 2e       	mov	r3, r30
    109e:	2a c0       	rjmp	.+84     	; 0x10f4 <vfprintf+0xe6>
    10a0:	f3 2d       	mov	r31, r3
    10a2:	f8 60       	ori	r31, 0x08	; 8
    10a4:	1d c0       	rjmp	.+58     	; 0x10e0 <vfprintf+0xd2>
    10a6:	37 fc       	sbrc	r3, 7
    10a8:	2d c0       	rjmp	.+90     	; 0x1104 <vfprintf+0xf6>
    10aa:	20 ed       	ldi	r18, 0xD0	; 208
    10ac:	28 0f       	add	r18, r24
    10ae:	2a 30       	cpi	r18, 0x0A	; 10
    10b0:	40 f0       	brcs	.+16     	; 0x10c2 <vfprintf+0xb4>
    10b2:	8e 32       	cpi	r24, 0x2E	; 46
    10b4:	b9 f4       	brne	.+46     	; 0x10e4 <vfprintf+0xd6>
    10b6:	36 fc       	sbrc	r3, 6
    10b8:	81 c1       	rjmp	.+770    	; 0x13bc <vfprintf+0x3ae>
    10ba:	23 2d       	mov	r18, r3
    10bc:	20 64       	ori	r18, 0x40	; 64
    10be:	32 2e       	mov	r3, r18
    10c0:	19 c0       	rjmp	.+50     	; 0x10f4 <vfprintf+0xe6>
    10c2:	36 fe       	sbrs	r3, 6
    10c4:	06 c0       	rjmp	.+12     	; 0x10d2 <vfprintf+0xc4>
    10c6:	8a e0       	ldi	r24, 0x0A	; 10
    10c8:	98 9e       	mul	r9, r24
    10ca:	20 0d       	add	r18, r0
    10cc:	11 24       	eor	r1, r1
    10ce:	92 2e       	mov	r9, r18
    10d0:	11 c0       	rjmp	.+34     	; 0x10f4 <vfprintf+0xe6>
    10d2:	ea e0       	ldi	r30, 0x0A	; 10
    10d4:	2e 9e       	mul	r2, r30
    10d6:	20 0d       	add	r18, r0
    10d8:	11 24       	eor	r1, r1
    10da:	22 2e       	mov	r2, r18
    10dc:	f3 2d       	mov	r31, r3
    10de:	f0 62       	ori	r31, 0x20	; 32
    10e0:	3f 2e       	mov	r3, r31
    10e2:	08 c0       	rjmp	.+16     	; 0x10f4 <vfprintf+0xe6>
    10e4:	8c 36       	cpi	r24, 0x6C	; 108
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <vfprintf+0xe2>
    10e8:	83 2d       	mov	r24, r3
    10ea:	80 68       	ori	r24, 0x80	; 128
    10ec:	38 2e       	mov	r3, r24
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <vfprintf+0xe6>
    10f0:	88 36       	cpi	r24, 0x68	; 104
    10f2:	41 f4       	brne	.+16     	; 0x1104 <vfprintf+0xf6>
    10f4:	f7 01       	movw	r30, r14
    10f6:	93 fd       	sbrc	r25, 3
    10f8:	85 91       	lpm	r24, Z+
    10fa:	93 ff       	sbrs	r25, 3
    10fc:	81 91       	ld	r24, Z+
    10fe:	7f 01       	movw	r14, r30
    1100:	81 11       	cpse	r24, r1
    1102:	b3 cf       	rjmp	.-154    	; 0x106a <vfprintf+0x5c>
    1104:	98 2f       	mov	r25, r24
    1106:	9f 7d       	andi	r25, 0xDF	; 223
    1108:	95 54       	subi	r25, 0x45	; 69
    110a:	93 30       	cpi	r25, 0x03	; 3
    110c:	28 f4       	brcc	.+10     	; 0x1118 <vfprintf+0x10a>
    110e:	0c 5f       	subi	r16, 0xFC	; 252
    1110:	1f 4f       	sbci	r17, 0xFF	; 255
    1112:	9f e3       	ldi	r25, 0x3F	; 63
    1114:	99 83       	std	Y+1, r25	; 0x01
    1116:	0d c0       	rjmp	.+26     	; 0x1132 <vfprintf+0x124>
    1118:	83 36       	cpi	r24, 0x63	; 99
    111a:	31 f0       	breq	.+12     	; 0x1128 <vfprintf+0x11a>
    111c:	83 37       	cpi	r24, 0x73	; 115
    111e:	71 f0       	breq	.+28     	; 0x113c <vfprintf+0x12e>
    1120:	83 35       	cpi	r24, 0x53	; 83
    1122:	09 f0       	breq	.+2      	; 0x1126 <vfprintf+0x118>
    1124:	59 c0       	rjmp	.+178    	; 0x11d8 <vfprintf+0x1ca>
    1126:	21 c0       	rjmp	.+66     	; 0x116a <vfprintf+0x15c>
    1128:	f8 01       	movw	r30, r16
    112a:	80 81       	ld	r24, Z
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	0e 5f       	subi	r16, 0xFE	; 254
    1130:	1f 4f       	sbci	r17, 0xFF	; 255
    1132:	88 24       	eor	r8, r8
    1134:	83 94       	inc	r8
    1136:	91 2c       	mov	r9, r1
    1138:	53 01       	movw	r10, r6
    113a:	13 c0       	rjmp	.+38     	; 0x1162 <vfprintf+0x154>
    113c:	28 01       	movw	r4, r16
    113e:	f2 e0       	ldi	r31, 0x02	; 2
    1140:	4f 0e       	add	r4, r31
    1142:	51 1c       	adc	r5, r1
    1144:	f8 01       	movw	r30, r16
    1146:	a0 80       	ld	r10, Z
    1148:	b1 80       	ldd	r11, Z+1	; 0x01
    114a:	36 fe       	sbrs	r3, 6
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <vfprintf+0x146>
    114e:	69 2d       	mov	r22, r9
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <vfprintf+0x14a>
    1154:	6f ef       	ldi	r22, 0xFF	; 255
    1156:	7f ef       	ldi	r23, 0xFF	; 255
    1158:	c5 01       	movw	r24, r10
    115a:	0e 94 37 0b 	call	0x166e	; 0x166e <strnlen>
    115e:	4c 01       	movw	r8, r24
    1160:	82 01       	movw	r16, r4
    1162:	f3 2d       	mov	r31, r3
    1164:	ff 77       	andi	r31, 0x7F	; 127
    1166:	3f 2e       	mov	r3, r31
    1168:	16 c0       	rjmp	.+44     	; 0x1196 <vfprintf+0x188>
    116a:	28 01       	movw	r4, r16
    116c:	22 e0       	ldi	r18, 0x02	; 2
    116e:	42 0e       	add	r4, r18
    1170:	51 1c       	adc	r5, r1
    1172:	f8 01       	movw	r30, r16
    1174:	a0 80       	ld	r10, Z
    1176:	b1 80       	ldd	r11, Z+1	; 0x01
    1178:	36 fe       	sbrs	r3, 6
    117a:	03 c0       	rjmp	.+6      	; 0x1182 <vfprintf+0x174>
    117c:	69 2d       	mov	r22, r9
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <vfprintf+0x178>
    1182:	6f ef       	ldi	r22, 0xFF	; 255
    1184:	7f ef       	ldi	r23, 0xFF	; 255
    1186:	c5 01       	movw	r24, r10
    1188:	0e 94 25 0b 	call	0x164a	; 0x164a <strnlen_P>
    118c:	4c 01       	movw	r8, r24
    118e:	f3 2d       	mov	r31, r3
    1190:	f0 68       	ori	r31, 0x80	; 128
    1192:	3f 2e       	mov	r3, r31
    1194:	82 01       	movw	r16, r4
    1196:	33 fc       	sbrc	r3, 3
    1198:	1b c0       	rjmp	.+54     	; 0x11d0 <vfprintf+0x1c2>
    119a:	82 2d       	mov	r24, r2
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	88 16       	cp	r8, r24
    11a0:	99 06       	cpc	r9, r25
    11a2:	b0 f4       	brcc	.+44     	; 0x11d0 <vfprintf+0x1c2>
    11a4:	b6 01       	movw	r22, r12
    11a6:	80 e2       	ldi	r24, 0x20	; 32
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    11ae:	2a 94       	dec	r2
    11b0:	f4 cf       	rjmp	.-24     	; 0x119a <vfprintf+0x18c>
    11b2:	f5 01       	movw	r30, r10
    11b4:	37 fc       	sbrc	r3, 7
    11b6:	85 91       	lpm	r24, Z+
    11b8:	37 fe       	sbrs	r3, 7
    11ba:	81 91       	ld	r24, Z+
    11bc:	5f 01       	movw	r10, r30
    11be:	b6 01       	movw	r22, r12
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    11c6:	21 10       	cpse	r2, r1
    11c8:	2a 94       	dec	r2
    11ca:	21 e0       	ldi	r18, 0x01	; 1
    11cc:	82 1a       	sub	r8, r18
    11ce:	91 08       	sbc	r9, r1
    11d0:	81 14       	cp	r8, r1
    11d2:	91 04       	cpc	r9, r1
    11d4:	71 f7       	brne	.-36     	; 0x11b2 <vfprintf+0x1a4>
    11d6:	e8 c0       	rjmp	.+464    	; 0x13a8 <vfprintf+0x39a>
    11d8:	84 36       	cpi	r24, 0x64	; 100
    11da:	11 f0       	breq	.+4      	; 0x11e0 <vfprintf+0x1d2>
    11dc:	89 36       	cpi	r24, 0x69	; 105
    11de:	41 f5       	brne	.+80     	; 0x1230 <vfprintf+0x222>
    11e0:	f8 01       	movw	r30, r16
    11e2:	37 fe       	sbrs	r3, 7
    11e4:	07 c0       	rjmp	.+14     	; 0x11f4 <vfprintf+0x1e6>
    11e6:	60 81       	ld	r22, Z
    11e8:	71 81       	ldd	r23, Z+1	; 0x01
    11ea:	82 81       	ldd	r24, Z+2	; 0x02
    11ec:	93 81       	ldd	r25, Z+3	; 0x03
    11ee:	0c 5f       	subi	r16, 0xFC	; 252
    11f0:	1f 4f       	sbci	r17, 0xFF	; 255
    11f2:	08 c0       	rjmp	.+16     	; 0x1204 <vfprintf+0x1f6>
    11f4:	60 81       	ld	r22, Z
    11f6:	71 81       	ldd	r23, Z+1	; 0x01
    11f8:	07 2e       	mov	r0, r23
    11fa:	00 0c       	add	r0, r0
    11fc:	88 0b       	sbc	r24, r24
    11fe:	99 0b       	sbc	r25, r25
    1200:	0e 5f       	subi	r16, 0xFE	; 254
    1202:	1f 4f       	sbci	r17, 0xFF	; 255
    1204:	f3 2d       	mov	r31, r3
    1206:	ff 76       	andi	r31, 0x6F	; 111
    1208:	3f 2e       	mov	r3, r31
    120a:	97 ff       	sbrs	r25, 7
    120c:	09 c0       	rjmp	.+18     	; 0x1220 <vfprintf+0x212>
    120e:	90 95       	com	r25
    1210:	80 95       	com	r24
    1212:	70 95       	com	r23
    1214:	61 95       	neg	r22
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	8f 4f       	sbci	r24, 0xFF	; 255
    121a:	9f 4f       	sbci	r25, 0xFF	; 255
    121c:	f0 68       	ori	r31, 0x80	; 128
    121e:	3f 2e       	mov	r3, r31
    1220:	2a e0       	ldi	r18, 0x0A	; 10
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	a3 01       	movw	r20, r6
    1226:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__ultoa_invert>
    122a:	88 2e       	mov	r8, r24
    122c:	86 18       	sub	r8, r6
    122e:	45 c0       	rjmp	.+138    	; 0x12ba <vfprintf+0x2ac>
    1230:	85 37       	cpi	r24, 0x75	; 117
    1232:	31 f4       	brne	.+12     	; 0x1240 <vfprintf+0x232>
    1234:	23 2d       	mov	r18, r3
    1236:	2f 7e       	andi	r18, 0xEF	; 239
    1238:	b2 2e       	mov	r11, r18
    123a:	2a e0       	ldi	r18, 0x0A	; 10
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	25 c0       	rjmp	.+74     	; 0x128a <vfprintf+0x27c>
    1240:	93 2d       	mov	r25, r3
    1242:	99 7f       	andi	r25, 0xF9	; 249
    1244:	b9 2e       	mov	r11, r25
    1246:	8f 36       	cpi	r24, 0x6F	; 111
    1248:	c1 f0       	breq	.+48     	; 0x127a <vfprintf+0x26c>
    124a:	18 f4       	brcc	.+6      	; 0x1252 <vfprintf+0x244>
    124c:	88 35       	cpi	r24, 0x58	; 88
    124e:	79 f0       	breq	.+30     	; 0x126e <vfprintf+0x260>
    1250:	b5 c0       	rjmp	.+362    	; 0x13bc <vfprintf+0x3ae>
    1252:	80 37       	cpi	r24, 0x70	; 112
    1254:	19 f0       	breq	.+6      	; 0x125c <vfprintf+0x24e>
    1256:	88 37       	cpi	r24, 0x78	; 120
    1258:	21 f0       	breq	.+8      	; 0x1262 <vfprintf+0x254>
    125a:	b0 c0       	rjmp	.+352    	; 0x13bc <vfprintf+0x3ae>
    125c:	e9 2f       	mov	r30, r25
    125e:	e0 61       	ori	r30, 0x10	; 16
    1260:	be 2e       	mov	r11, r30
    1262:	b4 fe       	sbrs	r11, 4
    1264:	0d c0       	rjmp	.+26     	; 0x1280 <vfprintf+0x272>
    1266:	fb 2d       	mov	r31, r11
    1268:	f4 60       	ori	r31, 0x04	; 4
    126a:	bf 2e       	mov	r11, r31
    126c:	09 c0       	rjmp	.+18     	; 0x1280 <vfprintf+0x272>
    126e:	34 fe       	sbrs	r3, 4
    1270:	0a c0       	rjmp	.+20     	; 0x1286 <vfprintf+0x278>
    1272:	29 2f       	mov	r18, r25
    1274:	26 60       	ori	r18, 0x06	; 6
    1276:	b2 2e       	mov	r11, r18
    1278:	06 c0       	rjmp	.+12     	; 0x1286 <vfprintf+0x278>
    127a:	28 e0       	ldi	r18, 0x08	; 8
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	05 c0       	rjmp	.+10     	; 0x128a <vfprintf+0x27c>
    1280:	20 e1       	ldi	r18, 0x10	; 16
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	02 c0       	rjmp	.+4      	; 0x128a <vfprintf+0x27c>
    1286:	20 e1       	ldi	r18, 0x10	; 16
    1288:	32 e0       	ldi	r19, 0x02	; 2
    128a:	f8 01       	movw	r30, r16
    128c:	b7 fe       	sbrs	r11, 7
    128e:	07 c0       	rjmp	.+14     	; 0x129e <vfprintf+0x290>
    1290:	60 81       	ld	r22, Z
    1292:	71 81       	ldd	r23, Z+1	; 0x01
    1294:	82 81       	ldd	r24, Z+2	; 0x02
    1296:	93 81       	ldd	r25, Z+3	; 0x03
    1298:	0c 5f       	subi	r16, 0xFC	; 252
    129a:	1f 4f       	sbci	r17, 0xFF	; 255
    129c:	06 c0       	rjmp	.+12     	; 0x12aa <vfprintf+0x29c>
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 5f       	subi	r16, 0xFE	; 254
    12a8:	1f 4f       	sbci	r17, 0xFF	; 255
    12aa:	a3 01       	movw	r20, r6
    12ac:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__ultoa_invert>
    12b0:	88 2e       	mov	r8, r24
    12b2:	86 18       	sub	r8, r6
    12b4:	fb 2d       	mov	r31, r11
    12b6:	ff 77       	andi	r31, 0x7F	; 127
    12b8:	3f 2e       	mov	r3, r31
    12ba:	36 fe       	sbrs	r3, 6
    12bc:	0d c0       	rjmp	.+26     	; 0x12d8 <vfprintf+0x2ca>
    12be:	23 2d       	mov	r18, r3
    12c0:	2e 7f       	andi	r18, 0xFE	; 254
    12c2:	a2 2e       	mov	r10, r18
    12c4:	89 14       	cp	r8, r9
    12c6:	58 f4       	brcc	.+22     	; 0x12de <vfprintf+0x2d0>
    12c8:	34 fe       	sbrs	r3, 4
    12ca:	0b c0       	rjmp	.+22     	; 0x12e2 <vfprintf+0x2d4>
    12cc:	32 fc       	sbrc	r3, 2
    12ce:	09 c0       	rjmp	.+18     	; 0x12e2 <vfprintf+0x2d4>
    12d0:	83 2d       	mov	r24, r3
    12d2:	8e 7e       	andi	r24, 0xEE	; 238
    12d4:	a8 2e       	mov	r10, r24
    12d6:	05 c0       	rjmp	.+10     	; 0x12e2 <vfprintf+0x2d4>
    12d8:	b8 2c       	mov	r11, r8
    12da:	a3 2c       	mov	r10, r3
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <vfprintf+0x2d6>
    12de:	b8 2c       	mov	r11, r8
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <vfprintf+0x2d6>
    12e2:	b9 2c       	mov	r11, r9
    12e4:	a4 fe       	sbrs	r10, 4
    12e6:	0f c0       	rjmp	.+30     	; 0x1306 <vfprintf+0x2f8>
    12e8:	fe 01       	movw	r30, r28
    12ea:	e8 0d       	add	r30, r8
    12ec:	f1 1d       	adc	r31, r1
    12ee:	80 81       	ld	r24, Z
    12f0:	80 33       	cpi	r24, 0x30	; 48
    12f2:	21 f4       	brne	.+8      	; 0x12fc <vfprintf+0x2ee>
    12f4:	9a 2d       	mov	r25, r10
    12f6:	99 7e       	andi	r25, 0xE9	; 233
    12f8:	a9 2e       	mov	r10, r25
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <vfprintf+0x300>
    12fc:	a2 fe       	sbrs	r10, 2
    12fe:	06 c0       	rjmp	.+12     	; 0x130c <vfprintf+0x2fe>
    1300:	b3 94       	inc	r11
    1302:	b3 94       	inc	r11
    1304:	04 c0       	rjmp	.+8      	; 0x130e <vfprintf+0x300>
    1306:	8a 2d       	mov	r24, r10
    1308:	86 78       	andi	r24, 0x86	; 134
    130a:	09 f0       	breq	.+2      	; 0x130e <vfprintf+0x300>
    130c:	b3 94       	inc	r11
    130e:	a3 fc       	sbrc	r10, 3
    1310:	11 c0       	rjmp	.+34     	; 0x1334 <vfprintf+0x326>
    1312:	a0 fe       	sbrs	r10, 0
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <vfprintf+0x314>
    1316:	b2 14       	cp	r11, r2
    1318:	88 f4       	brcc	.+34     	; 0x133c <vfprintf+0x32e>
    131a:	28 0c       	add	r2, r8
    131c:	92 2c       	mov	r9, r2
    131e:	9b 18       	sub	r9, r11
    1320:	0e c0       	rjmp	.+28     	; 0x133e <vfprintf+0x330>
    1322:	b2 14       	cp	r11, r2
    1324:	60 f4       	brcc	.+24     	; 0x133e <vfprintf+0x330>
    1326:	b6 01       	movw	r22, r12
    1328:	80 e2       	ldi	r24, 0x20	; 32
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    1330:	b3 94       	inc	r11
    1332:	f7 cf       	rjmp	.-18     	; 0x1322 <vfprintf+0x314>
    1334:	b2 14       	cp	r11, r2
    1336:	18 f4       	brcc	.+6      	; 0x133e <vfprintf+0x330>
    1338:	2b 18       	sub	r2, r11
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <vfprintf+0x332>
    133c:	98 2c       	mov	r9, r8
    133e:	21 2c       	mov	r2, r1
    1340:	a4 fe       	sbrs	r10, 4
    1342:	10 c0       	rjmp	.+32     	; 0x1364 <vfprintf+0x356>
    1344:	b6 01       	movw	r22, r12
    1346:	80 e3       	ldi	r24, 0x30	; 48
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    134e:	a2 fe       	sbrs	r10, 2
    1350:	17 c0       	rjmp	.+46     	; 0x1380 <vfprintf+0x372>
    1352:	a1 fc       	sbrc	r10, 1
    1354:	03 c0       	rjmp	.+6      	; 0x135c <vfprintf+0x34e>
    1356:	88 e7       	ldi	r24, 0x78	; 120
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <vfprintf+0x352>
    135c:	88 e5       	ldi	r24, 0x58	; 88
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	b6 01       	movw	r22, r12
    1362:	0c c0       	rjmp	.+24     	; 0x137c <vfprintf+0x36e>
    1364:	8a 2d       	mov	r24, r10
    1366:	86 78       	andi	r24, 0x86	; 134
    1368:	59 f0       	breq	.+22     	; 0x1380 <vfprintf+0x372>
    136a:	a1 fe       	sbrs	r10, 1
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <vfprintf+0x364>
    136e:	8b e2       	ldi	r24, 0x2B	; 43
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <vfprintf+0x366>
    1372:	80 e2       	ldi	r24, 0x20	; 32
    1374:	a7 fc       	sbrc	r10, 7
    1376:	8d e2       	ldi	r24, 0x2D	; 45
    1378:	b6 01       	movw	r22, r12
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    1380:	89 14       	cp	r8, r9
    1382:	38 f4       	brcc	.+14     	; 0x1392 <vfprintf+0x384>
    1384:	b6 01       	movw	r22, r12
    1386:	80 e3       	ldi	r24, 0x30	; 48
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    138e:	9a 94       	dec	r9
    1390:	f7 cf       	rjmp	.-18     	; 0x1380 <vfprintf+0x372>
    1392:	8a 94       	dec	r8
    1394:	f3 01       	movw	r30, r6
    1396:	e8 0d       	add	r30, r8
    1398:	f1 1d       	adc	r31, r1
    139a:	80 81       	ld	r24, Z
    139c:	b6 01       	movw	r22, r12
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    13a4:	81 10       	cpse	r8, r1
    13a6:	f5 cf       	rjmp	.-22     	; 0x1392 <vfprintf+0x384>
    13a8:	22 20       	and	r2, r2
    13aa:	09 f4       	brne	.+2      	; 0x13ae <vfprintf+0x3a0>
    13ac:	42 ce       	rjmp	.-892    	; 0x1032 <vfprintf+0x24>
    13ae:	b6 01       	movw	r22, r12
    13b0:	80 e2       	ldi	r24, 0x20	; 32
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    13b8:	2a 94       	dec	r2
    13ba:	f6 cf       	rjmp	.-20     	; 0x13a8 <vfprintf+0x39a>
    13bc:	f6 01       	movw	r30, r12
    13be:	86 81       	ldd	r24, Z+6	; 0x06
    13c0:	97 81       	ldd	r25, Z+7	; 0x07
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <vfprintf+0x3ba>
    13c4:	8f ef       	ldi	r24, 0xFF	; 255
    13c6:	9f ef       	ldi	r25, 0xFF	; 255
    13c8:	2b 96       	adiw	r28, 0x0b	; 11
    13ca:	e2 e1       	ldi	r30, 0x12	; 18
    13cc:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__epilogue_restores__>

000013d0 <calloc>:
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	86 9f       	mul	r24, r22
    13da:	80 01       	movw	r16, r0
    13dc:	87 9f       	mul	r24, r23
    13de:	10 0d       	add	r17, r0
    13e0:	96 9f       	mul	r25, r22
    13e2:	10 0d       	add	r17, r0
    13e4:	11 24       	eor	r1, r1
    13e6:	c8 01       	movw	r24, r16
    13e8:	0e 94 04 0a 	call	0x1408	; 0x1408 <malloc>
    13ec:	ec 01       	movw	r28, r24
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	29 f0       	breq	.+10     	; 0x13fc <calloc+0x2c>
    13f2:	a8 01       	movw	r20, r16
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	0e 94 30 0b 	call	0x1660	; 0x1660 <memset>
    13fc:	ce 01       	movw	r24, r28
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	08 95       	ret

00001408 <malloc>:
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	82 30       	cpi	r24, 0x02	; 2
    1412:	91 05       	cpc	r25, r1
    1414:	10 f4       	brcc	.+4      	; 0x141a <malloc+0x12>
    1416:	82 e0       	ldi	r24, 0x02	; 2
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <__flp>
    141e:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <__flp+0x1>
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	30 97       	sbiw	r30, 0x00	; 0
    142c:	19 f1       	breq	.+70     	; 0x1474 <malloc+0x6c>
    142e:	40 81       	ld	r20, Z
    1430:	51 81       	ldd	r21, Z+1	; 0x01
    1432:	02 81       	ldd	r16, Z+2	; 0x02
    1434:	13 81       	ldd	r17, Z+3	; 0x03
    1436:	48 17       	cp	r20, r24
    1438:	59 07       	cpc	r21, r25
    143a:	c8 f0       	brcs	.+50     	; 0x146e <malloc+0x66>
    143c:	84 17       	cp	r24, r20
    143e:	95 07       	cpc	r25, r21
    1440:	69 f4       	brne	.+26     	; 0x145c <malloc+0x54>
    1442:	10 97       	sbiw	r26, 0x00	; 0
    1444:	31 f0       	breq	.+12     	; 0x1452 <malloc+0x4a>
    1446:	12 96       	adiw	r26, 0x02	; 2
    1448:	0c 93       	st	X, r16
    144a:	12 97       	sbiw	r26, 0x02	; 2
    144c:	13 96       	adiw	r26, 0x03	; 3
    144e:	1c 93       	st	X, r17
    1450:	27 c0       	rjmp	.+78     	; 0x14a0 <malloc+0x98>
    1452:	00 93 eb 02 	sts	0x02EB, r16	; 0x8002eb <__flp>
    1456:	10 93 ec 02 	sts	0x02EC, r17	; 0x8002ec <__flp+0x1>
    145a:	22 c0       	rjmp	.+68     	; 0x14a0 <malloc+0x98>
    145c:	21 15       	cp	r18, r1
    145e:	31 05       	cpc	r19, r1
    1460:	19 f0       	breq	.+6      	; 0x1468 <malloc+0x60>
    1462:	42 17       	cp	r20, r18
    1464:	53 07       	cpc	r21, r19
    1466:	18 f4       	brcc	.+6      	; 0x146e <malloc+0x66>
    1468:	9a 01       	movw	r18, r20
    146a:	bd 01       	movw	r22, r26
    146c:	ef 01       	movw	r28, r30
    146e:	df 01       	movw	r26, r30
    1470:	f8 01       	movw	r30, r16
    1472:	db cf       	rjmp	.-74     	; 0x142a <malloc+0x22>
    1474:	21 15       	cp	r18, r1
    1476:	31 05       	cpc	r19, r1
    1478:	f9 f0       	breq	.+62     	; 0x14b8 <malloc+0xb0>
    147a:	28 1b       	sub	r18, r24
    147c:	39 0b       	sbc	r19, r25
    147e:	24 30       	cpi	r18, 0x04	; 4
    1480:	31 05       	cpc	r19, r1
    1482:	80 f4       	brcc	.+32     	; 0x14a4 <malloc+0x9c>
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	61 15       	cp	r22, r1
    148a:	71 05       	cpc	r23, r1
    148c:	21 f0       	breq	.+8      	; 0x1496 <malloc+0x8e>
    148e:	fb 01       	movw	r30, r22
    1490:	93 83       	std	Z+3, r25	; 0x03
    1492:	82 83       	std	Z+2, r24	; 0x02
    1494:	04 c0       	rjmp	.+8      	; 0x149e <malloc+0x96>
    1496:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <__flp+0x1>
    149a:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <__flp>
    149e:	fe 01       	movw	r30, r28
    14a0:	32 96       	adiw	r30, 0x02	; 2
    14a2:	44 c0       	rjmp	.+136    	; 0x152c <malloc+0x124>
    14a4:	fe 01       	movw	r30, r28
    14a6:	e2 0f       	add	r30, r18
    14a8:	f3 1f       	adc	r31, r19
    14aa:	81 93       	st	Z+, r24
    14ac:	91 93       	st	Z+, r25
    14ae:	22 50       	subi	r18, 0x02	; 2
    14b0:	31 09       	sbc	r19, r1
    14b2:	39 83       	std	Y+1, r19	; 0x01
    14b4:	28 83       	st	Y, r18
    14b6:	3a c0       	rjmp	.+116    	; 0x152c <malloc+0x124>
    14b8:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <__brkval>
    14bc:	30 91 ea 02 	lds	r19, 0x02EA	; 0x8002ea <__brkval+0x1>
    14c0:	23 2b       	or	r18, r19
    14c2:	41 f4       	brne	.+16     	; 0x14d4 <malloc+0xcc>
    14c4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    14c8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    14cc:	30 93 ea 02 	sts	0x02EA, r19	; 0x8002ea <__brkval+0x1>
    14d0:	20 93 e9 02 	sts	0x02E9, r18	; 0x8002e9 <__brkval>
    14d4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    14d8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    14dc:	21 15       	cp	r18, r1
    14de:	31 05       	cpc	r19, r1
    14e0:	41 f4       	brne	.+16     	; 0x14f2 <malloc+0xea>
    14e2:	2d b7       	in	r18, 0x3d	; 61
    14e4:	3e b7       	in	r19, 0x3e	; 62
    14e6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    14ea:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    14ee:	24 1b       	sub	r18, r20
    14f0:	35 0b       	sbc	r19, r21
    14f2:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <__brkval>
    14f6:	f0 91 ea 02 	lds	r31, 0x02EA	; 0x8002ea <__brkval+0x1>
    14fa:	e2 17       	cp	r30, r18
    14fc:	f3 07       	cpc	r31, r19
    14fe:	a0 f4       	brcc	.+40     	; 0x1528 <malloc+0x120>
    1500:	2e 1b       	sub	r18, r30
    1502:	3f 0b       	sbc	r19, r31
    1504:	28 17       	cp	r18, r24
    1506:	39 07       	cpc	r19, r25
    1508:	78 f0       	brcs	.+30     	; 0x1528 <malloc+0x120>
    150a:	ac 01       	movw	r20, r24
    150c:	4e 5f       	subi	r20, 0xFE	; 254
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	24 17       	cp	r18, r20
    1512:	35 07       	cpc	r19, r21
    1514:	48 f0       	brcs	.+18     	; 0x1528 <malloc+0x120>
    1516:	4e 0f       	add	r20, r30
    1518:	5f 1f       	adc	r21, r31
    151a:	50 93 ea 02 	sts	0x02EA, r21	; 0x8002ea <__brkval+0x1>
    151e:	40 93 e9 02 	sts	0x02E9, r20	; 0x8002e9 <__brkval>
    1522:	81 93       	st	Z+, r24
    1524:	91 93       	st	Z+, r25
    1526:	02 c0       	rjmp	.+4      	; 0x152c <malloc+0x124>
    1528:	e0 e0       	ldi	r30, 0x00	; 0
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	cf 01       	movw	r24, r30
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	08 95       	ret

00001538 <free>:
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	09 f4       	brne	.+2      	; 0x1542 <free+0xa>
    1540:	81 c0       	rjmp	.+258    	; 0x1644 <free+0x10c>
    1542:	fc 01       	movw	r30, r24
    1544:	32 97       	sbiw	r30, 0x02	; 2
    1546:	13 82       	std	Z+3, r1	; 0x03
    1548:	12 82       	std	Z+2, r1	; 0x02
    154a:	a0 91 eb 02 	lds	r26, 0x02EB	; 0x8002eb <__flp>
    154e:	b0 91 ec 02 	lds	r27, 0x02EC	; 0x8002ec <__flp+0x1>
    1552:	10 97       	sbiw	r26, 0x00	; 0
    1554:	81 f4       	brne	.+32     	; 0x1576 <free+0x3e>
    1556:	20 81       	ld	r18, Z
    1558:	31 81       	ldd	r19, Z+1	; 0x01
    155a:	82 0f       	add	r24, r18
    155c:	93 1f       	adc	r25, r19
    155e:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <__brkval>
    1562:	30 91 ea 02 	lds	r19, 0x02EA	; 0x8002ea <__brkval+0x1>
    1566:	28 17       	cp	r18, r24
    1568:	39 07       	cpc	r19, r25
    156a:	51 f5       	brne	.+84     	; 0x15c0 <free+0x88>
    156c:	f0 93 ea 02 	sts	0x02EA, r31	; 0x8002ea <__brkval+0x1>
    1570:	e0 93 e9 02 	sts	0x02E9, r30	; 0x8002e9 <__brkval>
    1574:	67 c0       	rjmp	.+206    	; 0x1644 <free+0x10c>
    1576:	ed 01       	movw	r28, r26
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	ce 17       	cp	r28, r30
    157e:	df 07       	cpc	r29, r31
    1580:	40 f4       	brcc	.+16     	; 0x1592 <free+0x5a>
    1582:	4a 81       	ldd	r20, Y+2	; 0x02
    1584:	5b 81       	ldd	r21, Y+3	; 0x03
    1586:	9e 01       	movw	r18, r28
    1588:	41 15       	cp	r20, r1
    158a:	51 05       	cpc	r21, r1
    158c:	f1 f0       	breq	.+60     	; 0x15ca <free+0x92>
    158e:	ea 01       	movw	r28, r20
    1590:	f5 cf       	rjmp	.-22     	; 0x157c <free+0x44>
    1592:	d3 83       	std	Z+3, r29	; 0x03
    1594:	c2 83       	std	Z+2, r28	; 0x02
    1596:	40 81       	ld	r20, Z
    1598:	51 81       	ldd	r21, Z+1	; 0x01
    159a:	84 0f       	add	r24, r20
    159c:	95 1f       	adc	r25, r21
    159e:	c8 17       	cp	r28, r24
    15a0:	d9 07       	cpc	r29, r25
    15a2:	59 f4       	brne	.+22     	; 0x15ba <free+0x82>
    15a4:	88 81       	ld	r24, Y
    15a6:	99 81       	ldd	r25, Y+1	; 0x01
    15a8:	84 0f       	add	r24, r20
    15aa:	95 1f       	adc	r25, r21
    15ac:	02 96       	adiw	r24, 0x02	; 2
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	80 83       	st	Z, r24
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	9b 81       	ldd	r25, Y+3	; 0x03
    15b6:	93 83       	std	Z+3, r25	; 0x03
    15b8:	82 83       	std	Z+2, r24	; 0x02
    15ba:	21 15       	cp	r18, r1
    15bc:	31 05       	cpc	r19, r1
    15be:	29 f4       	brne	.+10     	; 0x15ca <free+0x92>
    15c0:	f0 93 ec 02 	sts	0x02EC, r31	; 0x8002ec <__flp+0x1>
    15c4:	e0 93 eb 02 	sts	0x02EB, r30	; 0x8002eb <__flp>
    15c8:	3d c0       	rjmp	.+122    	; 0x1644 <free+0x10c>
    15ca:	e9 01       	movw	r28, r18
    15cc:	fb 83       	std	Y+3, r31	; 0x03
    15ce:	ea 83       	std	Y+2, r30	; 0x02
    15d0:	49 91       	ld	r20, Y+
    15d2:	59 91       	ld	r21, Y+
    15d4:	c4 0f       	add	r28, r20
    15d6:	d5 1f       	adc	r29, r21
    15d8:	ec 17       	cp	r30, r28
    15da:	fd 07       	cpc	r31, r29
    15dc:	61 f4       	brne	.+24     	; 0x15f6 <free+0xbe>
    15de:	80 81       	ld	r24, Z
    15e0:	91 81       	ldd	r25, Z+1	; 0x01
    15e2:	84 0f       	add	r24, r20
    15e4:	95 1f       	adc	r25, r21
    15e6:	02 96       	adiw	r24, 0x02	; 2
    15e8:	e9 01       	movw	r28, r18
    15ea:	99 83       	std	Y+1, r25	; 0x01
    15ec:	88 83       	st	Y, r24
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	9b 83       	std	Y+3, r25	; 0x03
    15f4:	8a 83       	std	Y+2, r24	; 0x02
    15f6:	e0 e0       	ldi	r30, 0x00	; 0
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	12 96       	adiw	r26, 0x02	; 2
    15fc:	8d 91       	ld	r24, X+
    15fe:	9c 91       	ld	r25, X
    1600:	13 97       	sbiw	r26, 0x03	; 3
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	19 f0       	breq	.+6      	; 0x160c <free+0xd4>
    1606:	fd 01       	movw	r30, r26
    1608:	dc 01       	movw	r26, r24
    160a:	f7 cf       	rjmp	.-18     	; 0x15fa <free+0xc2>
    160c:	8d 91       	ld	r24, X+
    160e:	9c 91       	ld	r25, X
    1610:	11 97       	sbiw	r26, 0x01	; 1
    1612:	9d 01       	movw	r18, r26
    1614:	2e 5f       	subi	r18, 0xFE	; 254
    1616:	3f 4f       	sbci	r19, 0xFF	; 255
    1618:	82 0f       	add	r24, r18
    161a:	93 1f       	adc	r25, r19
    161c:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <__brkval>
    1620:	30 91 ea 02 	lds	r19, 0x02EA	; 0x8002ea <__brkval+0x1>
    1624:	28 17       	cp	r18, r24
    1626:	39 07       	cpc	r19, r25
    1628:	69 f4       	brne	.+26     	; 0x1644 <free+0x10c>
    162a:	30 97       	sbiw	r30, 0x00	; 0
    162c:	29 f4       	brne	.+10     	; 0x1638 <free+0x100>
    162e:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <__flp+0x1>
    1632:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <__flp>
    1636:	02 c0       	rjmp	.+4      	; 0x163c <free+0x104>
    1638:	13 82       	std	Z+3, r1	; 0x03
    163a:	12 82       	std	Z+2, r1	; 0x02
    163c:	b0 93 ea 02 	sts	0x02EA, r27	; 0x8002ea <__brkval+0x1>
    1640:	a0 93 e9 02 	sts	0x02E9, r26	; 0x8002e9 <__brkval>
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	08 95       	ret

0000164a <strnlen_P>:
    164a:	fc 01       	movw	r30, r24
    164c:	05 90       	lpm	r0, Z+
    164e:	61 50       	subi	r22, 0x01	; 1
    1650:	70 40       	sbci	r23, 0x00	; 0
    1652:	01 10       	cpse	r0, r1
    1654:	d8 f7       	brcc	.-10     	; 0x164c <strnlen_P+0x2>
    1656:	80 95       	com	r24
    1658:	90 95       	com	r25
    165a:	8e 0f       	add	r24, r30
    165c:	9f 1f       	adc	r25, r31
    165e:	08 95       	ret

00001660 <memset>:
    1660:	dc 01       	movw	r26, r24
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <memset+0x6>
    1664:	6d 93       	st	X+, r22
    1666:	41 50       	subi	r20, 0x01	; 1
    1668:	50 40       	sbci	r21, 0x00	; 0
    166a:	e0 f7       	brcc	.-8      	; 0x1664 <memset+0x4>
    166c:	08 95       	ret

0000166e <strnlen>:
    166e:	fc 01       	movw	r30, r24
    1670:	61 50       	subi	r22, 0x01	; 1
    1672:	70 40       	sbci	r23, 0x00	; 0
    1674:	01 90       	ld	r0, Z+
    1676:	01 10       	cpse	r0, r1
    1678:	d8 f7       	brcc	.-10     	; 0x1670 <strnlen+0x2>
    167a:	80 95       	com	r24
    167c:	90 95       	com	r25
    167e:	8e 0f       	add	r24, r30
    1680:	9f 1f       	adc	r25, r31
    1682:	08 95       	ret

00001684 <fputc>:
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	fb 01       	movw	r30, r22
    168e:	23 81       	ldd	r18, Z+3	; 0x03
    1690:	21 fd       	sbrc	r18, 1
    1692:	03 c0       	rjmp	.+6      	; 0x169a <fputc+0x16>
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	9f ef       	ldi	r25, 0xFF	; 255
    1698:	2c c0       	rjmp	.+88     	; 0x16f2 <fputc+0x6e>
    169a:	22 ff       	sbrs	r18, 2
    169c:	16 c0       	rjmp	.+44     	; 0x16ca <fputc+0x46>
    169e:	46 81       	ldd	r20, Z+6	; 0x06
    16a0:	57 81       	ldd	r21, Z+7	; 0x07
    16a2:	24 81       	ldd	r18, Z+4	; 0x04
    16a4:	35 81       	ldd	r19, Z+5	; 0x05
    16a6:	42 17       	cp	r20, r18
    16a8:	53 07       	cpc	r21, r19
    16aa:	44 f4       	brge	.+16     	; 0x16bc <fputc+0x38>
    16ac:	a0 81       	ld	r26, Z
    16ae:	b1 81       	ldd	r27, Z+1	; 0x01
    16b0:	9d 01       	movw	r18, r26
    16b2:	2f 5f       	subi	r18, 0xFF	; 255
    16b4:	3f 4f       	sbci	r19, 0xFF	; 255
    16b6:	31 83       	std	Z+1, r19	; 0x01
    16b8:	20 83       	st	Z, r18
    16ba:	8c 93       	st	X, r24
    16bc:	26 81       	ldd	r18, Z+6	; 0x06
    16be:	37 81       	ldd	r19, Z+7	; 0x07
    16c0:	2f 5f       	subi	r18, 0xFF	; 255
    16c2:	3f 4f       	sbci	r19, 0xFF	; 255
    16c4:	37 83       	std	Z+7, r19	; 0x07
    16c6:	26 83       	std	Z+6, r18	; 0x06
    16c8:	14 c0       	rjmp	.+40     	; 0x16f2 <fputc+0x6e>
    16ca:	8b 01       	movw	r16, r22
    16cc:	ec 01       	movw	r28, r24
    16ce:	fb 01       	movw	r30, r22
    16d0:	00 84       	ldd	r0, Z+8	; 0x08
    16d2:	f1 85       	ldd	r31, Z+9	; 0x09
    16d4:	e0 2d       	mov	r30, r0
    16d6:	09 95       	icall
    16d8:	89 2b       	or	r24, r25
    16da:	e1 f6       	brne	.-72     	; 0x1694 <fputc+0x10>
    16dc:	d8 01       	movw	r26, r16
    16de:	16 96       	adiw	r26, 0x06	; 6
    16e0:	8d 91       	ld	r24, X+
    16e2:	9c 91       	ld	r25, X
    16e4:	17 97       	sbiw	r26, 0x07	; 7
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	17 96       	adiw	r26, 0x07	; 7
    16ea:	9c 93       	st	X, r25
    16ec:	8e 93       	st	-X, r24
    16ee:	16 97       	sbiw	r26, 0x06	; 6
    16f0:	ce 01       	movw	r24, r28
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	08 95       	ret

000016fc <__ultoa_invert>:
    16fc:	fa 01       	movw	r30, r20
    16fe:	aa 27       	eor	r26, r26
    1700:	28 30       	cpi	r18, 0x08	; 8
    1702:	51 f1       	breq	.+84     	; 0x1758 <__ultoa_invert+0x5c>
    1704:	20 31       	cpi	r18, 0x10	; 16
    1706:	81 f1       	breq	.+96     	; 0x1768 <__ultoa_invert+0x6c>
    1708:	e8 94       	clt
    170a:	6f 93       	push	r22
    170c:	6e 7f       	andi	r22, 0xFE	; 254
    170e:	6e 5f       	subi	r22, 0xFE	; 254
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	8f 4f       	sbci	r24, 0xFF	; 255
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	af 4f       	sbci	r26, 0xFF	; 255
    1718:	b1 e0       	ldi	r27, 0x01	; 1
    171a:	3e d0       	rcall	.+124    	; 0x1798 <__ultoa_invert+0x9c>
    171c:	b4 e0       	ldi	r27, 0x04	; 4
    171e:	3c d0       	rcall	.+120    	; 0x1798 <__ultoa_invert+0x9c>
    1720:	67 0f       	add	r22, r23
    1722:	78 1f       	adc	r23, r24
    1724:	89 1f       	adc	r24, r25
    1726:	9a 1f       	adc	r25, r26
    1728:	a1 1d       	adc	r26, r1
    172a:	68 0f       	add	r22, r24
    172c:	79 1f       	adc	r23, r25
    172e:	8a 1f       	adc	r24, r26
    1730:	91 1d       	adc	r25, r1
    1732:	a1 1d       	adc	r26, r1
    1734:	6a 0f       	add	r22, r26
    1736:	71 1d       	adc	r23, r1
    1738:	81 1d       	adc	r24, r1
    173a:	91 1d       	adc	r25, r1
    173c:	a1 1d       	adc	r26, r1
    173e:	20 d0       	rcall	.+64     	; 0x1780 <__ultoa_invert+0x84>
    1740:	09 f4       	brne	.+2      	; 0x1744 <__ultoa_invert+0x48>
    1742:	68 94       	set
    1744:	3f 91       	pop	r19
    1746:	2a e0       	ldi	r18, 0x0A	; 10
    1748:	26 9f       	mul	r18, r22
    174a:	11 24       	eor	r1, r1
    174c:	30 19       	sub	r19, r0
    174e:	30 5d       	subi	r19, 0xD0	; 208
    1750:	31 93       	st	Z+, r19
    1752:	de f6       	brtc	.-74     	; 0x170a <__ultoa_invert+0xe>
    1754:	cf 01       	movw	r24, r30
    1756:	08 95       	ret
    1758:	46 2f       	mov	r20, r22
    175a:	47 70       	andi	r20, 0x07	; 7
    175c:	40 5d       	subi	r20, 0xD0	; 208
    175e:	41 93       	st	Z+, r20
    1760:	b3 e0       	ldi	r27, 0x03	; 3
    1762:	0f d0       	rcall	.+30     	; 0x1782 <__ultoa_invert+0x86>
    1764:	c9 f7       	brne	.-14     	; 0x1758 <__ultoa_invert+0x5c>
    1766:	f6 cf       	rjmp	.-20     	; 0x1754 <__ultoa_invert+0x58>
    1768:	46 2f       	mov	r20, r22
    176a:	4f 70       	andi	r20, 0x0F	; 15
    176c:	40 5d       	subi	r20, 0xD0	; 208
    176e:	4a 33       	cpi	r20, 0x3A	; 58
    1770:	18 f0       	brcs	.+6      	; 0x1778 <__ultoa_invert+0x7c>
    1772:	49 5d       	subi	r20, 0xD9	; 217
    1774:	31 fd       	sbrc	r19, 1
    1776:	40 52       	subi	r20, 0x20	; 32
    1778:	41 93       	st	Z+, r20
    177a:	02 d0       	rcall	.+4      	; 0x1780 <__ultoa_invert+0x84>
    177c:	a9 f7       	brne	.-22     	; 0x1768 <__ultoa_invert+0x6c>
    177e:	ea cf       	rjmp	.-44     	; 0x1754 <__ultoa_invert+0x58>
    1780:	b4 e0       	ldi	r27, 0x04	; 4
    1782:	a6 95       	lsr	r26
    1784:	97 95       	ror	r25
    1786:	87 95       	ror	r24
    1788:	77 95       	ror	r23
    178a:	67 95       	ror	r22
    178c:	ba 95       	dec	r27
    178e:	c9 f7       	brne	.-14     	; 0x1782 <__ultoa_invert+0x86>
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	61 05       	cpc	r22, r1
    1794:	71 05       	cpc	r23, r1
    1796:	08 95       	ret
    1798:	9b 01       	movw	r18, r22
    179a:	ac 01       	movw	r20, r24
    179c:	0a 2e       	mov	r0, r26
    179e:	06 94       	lsr	r0
    17a0:	57 95       	ror	r21
    17a2:	47 95       	ror	r20
    17a4:	37 95       	ror	r19
    17a6:	27 95       	ror	r18
    17a8:	ba 95       	dec	r27
    17aa:	c9 f7       	brne	.-14     	; 0x179e <__ultoa_invert+0xa2>
    17ac:	62 0f       	add	r22, r18
    17ae:	73 1f       	adc	r23, r19
    17b0:	84 1f       	adc	r24, r20
    17b2:	95 1f       	adc	r25, r21
    17b4:	a0 1d       	adc	r26, r0
    17b6:	08 95       	ret

000017b8 <__prologue_saves__>:
    17b8:	2f 92       	push	r2
    17ba:	3f 92       	push	r3
    17bc:	4f 92       	push	r4
    17be:	5f 92       	push	r5
    17c0:	6f 92       	push	r6
    17c2:	7f 92       	push	r7
    17c4:	8f 92       	push	r8
    17c6:	9f 92       	push	r9
    17c8:	af 92       	push	r10
    17ca:	bf 92       	push	r11
    17cc:	cf 92       	push	r12
    17ce:	df 92       	push	r13
    17d0:	ef 92       	push	r14
    17d2:	ff 92       	push	r15
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	ca 1b       	sub	r28, r26
    17e2:	db 0b       	sbc	r29, r27
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	09 94       	ijmp

000017f0 <__epilogue_restores__>:
    17f0:	2a 88       	ldd	r2, Y+18	; 0x12
    17f2:	39 88       	ldd	r3, Y+17	; 0x11
    17f4:	48 88       	ldd	r4, Y+16	; 0x10
    17f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    17f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    17fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    17fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    17fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1800:	aa 84       	ldd	r10, Y+10	; 0x0a
    1802:	b9 84       	ldd	r11, Y+9	; 0x09
    1804:	c8 84       	ldd	r12, Y+8	; 0x08
    1806:	df 80       	ldd	r13, Y+7	; 0x07
    1808:	ee 80       	ldd	r14, Y+6	; 0x06
    180a:	fd 80       	ldd	r15, Y+5	; 0x05
    180c:	0c 81       	ldd	r16, Y+4	; 0x04
    180e:	1b 81       	ldd	r17, Y+3	; 0x03
    1810:	aa 81       	ldd	r26, Y+2	; 0x02
    1812:	b9 81       	ldd	r27, Y+1	; 0x01
    1814:	ce 0f       	add	r28, r30
    1816:	d1 1d       	adc	r29, r1
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	ed 01       	movw	r28, r26
    1824:	08 95       	ret

00001826 <_exit>:
    1826:	f8 94       	cli

00001828 <__stop_program>:
    1828:	ff cf       	rjmp	.-2      	; 0x1828 <__stop_program>
