
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e8  00800100  000019bc  00001a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  008002e8  008002e8  00001c38  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a5b  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000140b  00000000  00000000  000049c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015d4  00000000  00000000  00005dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000640  00000000  00000000  000073a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b7  00000000  00000000  000079e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000128e  00000000  00000000  0000829b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00009529  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	ec eb       	ldi	r30, 0xBC	; 188
     6d4:	f9 e1       	ldi	r31, 0x19	; 25
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	a8 3e       	cpi	r26, 0xE8	; 232
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	a8 ee       	ldi	r26, 0xE8	; 232
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	ab 38       	cpi	r26, 0x8B	; 139
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 04 05 	call	0xa08	; 0xa08 <main>
     6f6:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <adc_init>:
#include <avr/io.h>


void adc_init(){
	// Set pin as output
	DDRD |= (1<<DDD4);
     6fe:	81 b3       	in	r24, 0x11	; 17
     700:	80 61       	ori	r24, 0x10	; 16
     702:	81 bb       	out	0x11, r24	; 17
	
	// Toggle output pin on compare match with counter
	TCCR3A = (1<<COM3A0);
     704:	80 e4       	ldi	r24, 0x40	; 64
     706:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fc08b>
	
	// No clock prescaling on counter (i.e. update every clock cycle)
	// Set counter mode to CTC (clear on match)
	TCCR3B = (1<<WGM32)|(1<<CS30);
     70a:	89 e0       	ldi	r24, 0x09	; 9
     70c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fc08a>
	
	// Value to be matched (0 = toggle output each cycle)
	OCR3A = 0;
     710:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     714:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     718:	08 95       	ret

0000071a <adc_read>:
		uint8_t digitalVal = 0;
		
		// Write anything to the ADC to trigger a conversion
		// Triggers the chip select and write control strobe when external memory interface is active
		volatile char* mem_adc = (char *) DEF_ADR_ADC;
		mem_adc[0] = 0;
     71a:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x1075>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     71e:	97 e2       	ldi	r25, 0x27	; 39
     720:	9a 95       	dec	r25
     722:	f1 f7       	brne	.-4      	; 0x720 <adc_read+0x6>
     724:	00 00       	nop
		uint16_t convTime = DEF_ADC_CONV_TIME;
		_delay_us(convTime);
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
     726:	85 30       	cpi	r24, 0x05	; 5
     728:	40 f0       	brcs	.+16     	; 0x73a <adc_read+0x20>
}


volatile uint8_t adc_read(uint8_t channel){
		// Set up return data
		uint8_t digitalVal = 0;
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e c0       	rjmp	.+28     	; 0x74a <adc_read+0x30>
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
			for (int i = 0; i <= channel; ++i){
				digitalVal = mem_adc[i];
     72e:	f9 01       	movw	r30, r18
     730:	fc 5e       	subi	r31, 0xEC	; 236
     732:	90 81       	ld	r25, Z
		_delay_us(convTime);
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
			for (int i = 0; i <= channel; ++i){
     734:	2f 5f       	subi	r18, 0xFF	; 255
     736:	3f 4f       	sbci	r19, 0xFF	; 255
     738:	03 c0       	rjmp	.+6      	; 0x740 <adc_read+0x26>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	48 2f       	mov	r20, r24
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	42 17       	cp	r20, r18
     746:	53 07       	cpc	r21, r19
     748:	94 f7       	brge	.-28     	; 0x72e <adc_read+0x14>
				digitalVal = mem_adc[i];
			}
		}
		return digitalVal;
     74a:	89 2f       	mov	r24, r25
     74c:	08 95       	ret

0000074e <can_init>:

/*
* Initialize CAN Bus controller via SPI, in loopback mode (for testing)
*/
void can_init_loopback(void){
	mcp2515_init_loopback();
     74e:	0e 94 17 06 	call	0xc2e	; 0xc2e <mcp2515_init>
     752:	08 95       	ret

00000754 <can_recv>:

/*
* Receive a CAN message via MCP2515
* @param	msg		Received CAN Message
*/
void can_recv(CanMsg* msg){
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	8c 01       	movw	r16, r24
	msg->id = (mcp2515_read(MCP_RXB0SIDH)<<3); // Read top 8 bits
     75e:	81 e6       	ldi	r24, 0x61	; 97
     760:	0e 94 ba 05 	call	0xb74	; 0xb74 <mcp2515_read>
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	88 0f       	add	r24, r24
     768:	99 1f       	adc	r25, r25
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	88 0f       	add	r24, r24
     770:	99 1f       	adc	r25, r25
     772:	f8 01       	movw	r30, r16
     774:	91 83       	std	Z+1, r25	; 0x01
     776:	80 83       	st	Z, r24
	msg->id |= (mcp2515_read(MCP_RXB0SIDL)>>5) & 0b111; // Read bottom 3 bits
     778:	82 e6       	ldi	r24, 0x62	; 98
     77a:	0e 94 ba 05 	call	0xb74	; 0xb74 <mcp2515_read>
     77e:	28 2f       	mov	r18, r24
     780:	22 95       	swap	r18
     782:	26 95       	lsr	r18
     784:	27 70       	andi	r18, 0x07	; 7
     786:	f8 01       	movw	r30, r16
     788:	80 81       	ld	r24, Z
     78a:	91 81       	ldd	r25, Z+1	; 0x01
     78c:	82 2b       	or	r24, r18
     78e:	91 83       	std	Z+1, r25	; 0x01
     790:	80 83       	st	Z, r24
	msg->len = mcp2515_read(MCP_RXB0DLC);		// Read message length
     792:	85 e6       	ldi	r24, 0x65	; 101
     794:	0e 94 ba 05 	call	0xb74	; 0xb74 <mcp2515_read>
     798:	f8 01       	movw	r30, r16
     79a:	82 83       	std	Z+2, r24	; 0x02
	for (int i = 0; i<msg->len; i++){
     79c:	c0 e0       	ldi	r28, 0x00	; 0
     79e:	d0 e0       	ldi	r29, 0x00	; 0
     7a0:	09 c0       	rjmp	.+18     	; 0x7b4 <can_recv+0x60>
		msg->data[i] = mcp2515_read(MCP_RXB0D0 + i);
     7a2:	8c 2f       	mov	r24, r28
     7a4:	8a 59       	subi	r24, 0x9A	; 154
     7a6:	0e 94 ba 05 	call	0xb74	; 0xb74 <mcp2515_read>
     7aa:	f8 01       	movw	r30, r16
     7ac:	ec 0f       	add	r30, r28
     7ae:	fd 1f       	adc	r31, r29
     7b0:	83 83       	std	Z+3, r24	; 0x03
*/
void can_recv(CanMsg* msg){
	msg->id = (mcp2515_read(MCP_RXB0SIDH)<<3); // Read top 8 bits
	msg->id |= (mcp2515_read(MCP_RXB0SIDL)>>5) & 0b111; // Read bottom 3 bits
	msg->len = mcp2515_read(MCP_RXB0DLC);		// Read message length
	for (int i = 0; i<msg->len; i++){
     7b2:	21 96       	adiw	r28, 0x01	; 1
     7b4:	f8 01       	movw	r30, r16
     7b6:	82 81       	ldd	r24, Z+2	; 0x02
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	c8 17       	cp	r28, r24
     7bc:	d9 07       	cpc	r29, r25
     7be:	8c f3       	brlt	.-30     	; 0x7a2 <can_recv+0x4e>
		msg->data[i] = mcp2515_read(MCP_RXB0D0 + i);
	}
	mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0); // Reset receive buffer
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	8c e2       	ldi	r24, 0x2C	; 44
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <mcp2515_bit_modify>
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <can_send>:

/*
* Send a CAN message via MCP2515
* @param	msg		CAN message to send
*/
void can_send(CanMsg* msg){
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	8c 01       	movw	r16, r24
	mcp2515_write(TXB0SIDH, msg->id>>3);	// Write top 8 bits of ID
     7e4:	fc 01       	movw	r30, r24
     7e6:	60 81       	ld	r22, Z
     7e8:	71 81       	ldd	r23, Z+1	; 0x01
     7ea:	76 95       	lsr	r23
     7ec:	67 95       	ror	r22
     7ee:	76 95       	lsr	r23
     7f0:	67 95       	ror	r22
     7f2:	76 95       	lsr	r23
     7f4:	67 95       	ror	r22
     7f6:	81 e3       	ldi	r24, 0x31	; 49
     7f8:	0e 94 cc 05 	call	0xb98	; 0xb98 <mcp2515_write>
	mcp2515_write(TXB0SIDL, msg->id<<5);	// Write bottom 3 bits of ID (to MSb of register)
     7fc:	f8 01       	movw	r30, r16
     7fe:	60 81       	ld	r22, Z
     800:	62 95       	swap	r22
     802:	66 0f       	add	r22, r22
     804:	60 7e       	andi	r22, 0xE0	; 224
     806:	82 e3       	ldi	r24, 0x32	; 50
     808:	0e 94 cc 05 	call	0xb98	; 0xb98 <mcp2515_write>
	mcp2515_write(TXB0DLC, msg->len);		// Write length of message
     80c:	f8 01       	movw	r30, r16
     80e:	62 81       	ldd	r22, Z+2	; 0x02
     810:	85 e3       	ldi	r24, 0x35	; 53
     812:	0e 94 cc 05 	call	0xb98	; 0xb98 <mcp2515_write>
	for(int i=0; i<msg->len; i++){
     816:	c0 e0       	ldi	r28, 0x00	; 0
     818:	d0 e0       	ldi	r29, 0x00	; 0
     81a:	09 c0       	rjmp	.+18     	; 0x82e <can_send+0x54>
		mcp2515_write(TXB0D0 + i, msg->data[i]);
     81c:	f8 01       	movw	r30, r16
     81e:	ec 0f       	add	r30, r28
     820:	fd 1f       	adc	r31, r29
     822:	63 81       	ldd	r22, Z+3	; 0x03
     824:	8c 2f       	mov	r24, r28
     826:	8a 5c       	subi	r24, 0xCA	; 202
     828:	0e 94 cc 05 	call	0xb98	; 0xb98 <mcp2515_write>
*/
void can_send(CanMsg* msg){
	mcp2515_write(TXB0SIDH, msg->id>>3);	// Write top 8 bits of ID
	mcp2515_write(TXB0SIDL, msg->id<<5);	// Write bottom 3 bits of ID (to MSb of register)
	mcp2515_write(TXB0DLC, msg->len);		// Write length of message
	for(int i=0; i<msg->len; i++){
     82c:	21 96       	adiw	r28, 0x01	; 1
     82e:	f8 01       	movw	r30, r16
     830:	82 81       	ldd	r24, Z+2	; 0x02
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	c8 17       	cp	r28, r24
     836:	d9 07       	cpc	r29, r25
     838:	8c f3       	brlt	.-30     	; 0x81c <can_send+0x42>
		mcp2515_write(TXB0D0 + i, msg->data[i]);
	}
	mcp2515_request_to_send(MCP_RTS_TX0); // Request to send via transmit buffer 0
     83a:	81 e8       	ldi	r24, 0x81	; 129
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <mcp2515_request_to_send>
}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	08 95       	ret

0000084c <gamepad_init>:
#include "adc.h"
#include "gamepad.h"


void gamepad_init(){
	PORTB |= (1 << PB2); // Set pullup resistor for input
     84c:	88 b3       	in	r24, 0x18	; 24
     84e:	84 60       	ori	r24, 0x04	; 4
     850:	88 bb       	out	0x18, r24	; 24
	DDRB &= ~(0 << DDB2); // Set PB2 to 0 (input for joystick button)
     852:	87 b3       	in	r24, 0x17	; 23
     854:	87 bb       	out	0x17, r24	; 23
     856:	08 95       	ret

00000858 <read_gamepad>:
}

Gamepad read_gamepad(){
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	ec 01       	movw	r28, r24
	Gamepad gp;
	gp.pos_x = (int16_t)adc_read(CH_JOYSTICK_X);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	99 83       	std	Y+1, r25	; 0x01
     868:	88 83       	st	Y, r24
	gp.pos_y = (int16_t)adc_read(CH_JOYSTICK_Y);
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	9b 83       	std	Y+3, r25	; 0x03
     874:	8a 83       	std	Y+2, r24	; 0x02
	gp.pos_left = (int16_t)adc_read(CH_SLIDER_LEFT);
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	9d 83       	std	Y+5, r25	; 0x05
     880:	8c 83       	std	Y+4, r24	; 0x04
	gp.pos_right = (int16_t)adc_read(CH_SLIDER_RIGHT);
     882:	83 e0       	ldi	r24, 0x03	; 3
     884:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	9f 83       	std	Y+7, r25	; 0x07
     88c:	8e 83       	std	Y+6, r24	; 0x06
	gp.btn = !((PINB & (1 << PB2)) >> PB2);
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	b2 99       	sbic	0x16, 2	; 22
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	88 87       	std	Y+8, r24	; 0x08
	
	// printf("RAW X: %d    -    Y: %d    -    L: %d    -    R: %d\r\n\r\n", gp.pos_x, gp.pos_y, gp.pos_left, gp.pos_right);

	return gp;
}
     896:	ce 01       	movw	r24, r28
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <calibrate_gamepad>:

Gamepad calibrate_gamepad(Gamepad input){
     89e:	ef 92       	push	r14
     8a0:	ff 92       	push	r15
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	2a 97       	sbiw	r28, 0x0a	; 10
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	fc 01       	movw	r30, r24
     8bc:	e9 82       	std	Y+1, r14	; 0x01
     8be:	fa 82       	std	Y+2, r15	; 0x02
     8c0:	0b 83       	std	Y+3, r16	; 0x03
     8c2:	1c 83       	std	Y+4, r17	; 0x04
     8c4:	2d 83       	std	Y+5, r18	; 0x05
     8c6:	3e 83       	std	Y+6, r19	; 0x06
     8c8:	4f 83       	std	Y+7, r20	; 0x07
     8ca:	58 87       	std	Y+8, r21	; 0x08
     8cc:	16 2f       	mov	r17, r22
	Gamepad gp;
	
	gp.pos_x = (input.pos_x - 127) * 100 / 127; // Get direction as a percentage between -100 to +100
     8ce:	29 81       	ldd	r18, Y+1	; 0x01
     8d0:	3a 81       	ldd	r19, Y+2	; 0x02
     8d2:	2f 57       	subi	r18, 0x7F	; 127
     8d4:	31 09       	sbc	r19, r1
     8d6:	44 e6       	ldi	r20, 0x64	; 100
     8d8:	42 9f       	mul	r20, r18
     8da:	c0 01       	movw	r24, r0
     8dc:	43 9f       	mul	r20, r19
     8de:	90 0d       	add	r25, r0
     8e0:	11 24       	eor	r1, r1
     8e2:	2f e7       	ldi	r18, 0x7F	; 127
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	b9 01       	movw	r22, r18
     8e8:	0e 94 17 08 	call	0x102e	; 0x102e <__divmodhi4>
     8ec:	71 83       	std	Z+1, r23	; 0x01
     8ee:	60 83       	st	Z, r22
	gp.pos_y = (input.pos_y - 127) * 100 / 127;
     8f0:	6b 81       	ldd	r22, Y+3	; 0x03
     8f2:	7c 81       	ldd	r23, Y+4	; 0x04
     8f4:	6f 57       	subi	r22, 0x7F	; 127
     8f6:	71 09       	sbc	r23, r1
     8f8:	46 9f       	mul	r20, r22
     8fa:	c0 01       	movw	r24, r0
     8fc:	47 9f       	mul	r20, r23
     8fe:	90 0d       	add	r25, r0
     900:	11 24       	eor	r1, r1
     902:	b9 01       	movw	r22, r18
     904:	0e 94 17 08 	call	0x102e	; 0x102e <__divmodhi4>
     908:	73 83       	std	Z+3, r23	; 0x03
     90a:	62 83       	std	Z+2, r22	; 0x02
	gp.pos_left = (input.pos_left - 127) * 100 / 127;
     90c:	6d 81       	ldd	r22, Y+5	; 0x05
     90e:	7e 81       	ldd	r23, Y+6	; 0x06
     910:	6f 57       	subi	r22, 0x7F	; 127
     912:	71 09       	sbc	r23, r1
     914:	46 9f       	mul	r20, r22
     916:	c0 01       	movw	r24, r0
     918:	47 9f       	mul	r20, r23
     91a:	90 0d       	add	r25, r0
     91c:	11 24       	eor	r1, r1
     91e:	b9 01       	movw	r22, r18
     920:	0e 94 17 08 	call	0x102e	; 0x102e <__divmodhi4>
     924:	75 83       	std	Z+5, r23	; 0x05
     926:	64 83       	std	Z+4, r22	; 0x04
	gp.pos_right = (input.pos_right - 127) * 100 / 127;
     928:	6f 81       	ldd	r22, Y+7	; 0x07
     92a:	78 85       	ldd	r23, Y+8	; 0x08
     92c:	6f 57       	subi	r22, 0x7F	; 127
     92e:	71 09       	sbc	r23, r1
     930:	46 9f       	mul	r20, r22
     932:	c0 01       	movw	r24, r0
     934:	47 9f       	mul	r20, r23
     936:	90 0d       	add	r25, r0
     938:	11 24       	eor	r1, r1
     93a:	b9 01       	movw	r22, r18
     93c:	0e 94 17 08 	call	0x102e	; 0x102e <__divmodhi4>
     940:	77 83       	std	Z+7, r23	; 0x07
     942:	66 83       	std	Z+6, r22	; 0x06
	
	gp.btn = input.btn;
     944:	10 87       	std	Z+8, r17	; 0x08
	
	
	// printf("CAL X: %d    -    Y: %d    -    L: %d    -    R: %d\r\n\r\n", gp.pos_x, gp.pos_y, gp.pos_left, gp.pos_right);
	
	return gp;
}
     946:	cf 01       	movw	r24, r30
     948:	2a 96       	adiw	r28, 0x0a	; 10
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	de bf       	out	0x3e, r29	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	cd bf       	out	0x3d, r28	; 61
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	08 95       	ret

00000962 <getJoystickDir>:

Dir getJoystickDir(Gamepad gp){
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
     96e:	2a 97       	sbiw	r28, 0x0a	; 10
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	de bf       	out	0x3e, r29	; 62
     976:	0f be       	out	0x3f, r0	; 63
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	09 83       	std	Y+1, r16	; 0x01
     97c:	1a 83       	std	Y+2, r17	; 0x02
     97e:	2b 83       	std	Y+3, r18	; 0x03
     980:	3c 83       	std	Y+4, r19	; 0x04
	int16_t deadzone = 40;
	Dir direction = NONE; // Default

	if (gp.pos_x < deadzone && gp.pos_x > -deadzone && gp.pos_y < deadzone && gp.pos_y > -deadzone){
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	9a 81       	ldd	r25, Y+2	; 0x02
     986:	88 32       	cpi	r24, 0x28	; 40
     988:	91 05       	cpc	r25, r1
     98a:	64 f4       	brge	.+24     	; 0x9a4 <getJoystickDir+0x42>
     98c:	89 3d       	cpi	r24, 0xD9	; 217
     98e:	2f ef       	ldi	r18, 0xFF	; 255
     990:	92 07       	cpc	r25, r18
     992:	44 f0       	brlt	.+16     	; 0x9a4 <getJoystickDir+0x42>
     994:	2b 81       	ldd	r18, Y+3	; 0x03
     996:	3c 81       	ldd	r19, Y+4	; 0x04
     998:	28 32       	cpi	r18, 0x28	; 40
     99a:	31 05       	cpc	r19, r1
     99c:	1c f4       	brge	.+6      	; 0x9a4 <getJoystickDir+0x42>
     99e:	29 3d       	cpi	r18, 0xD9	; 217
     9a0:	3f 4f       	sbci	r19, 0xFF	; 255
     9a2:	04 f5       	brge	.+64     	; 0x9e4 <getJoystickDir+0x82>
		direction = NONE;

	} else if (abs(gp.pos_x) >= abs(gp.pos_y)){
     9a4:	ac 01       	movw	r20, r24
     9a6:	99 23       	and	r25, r25
     9a8:	24 f4       	brge	.+8      	; 0x9b2 <getJoystickDir+0x50>
     9aa:	44 27       	eor	r20, r20
     9ac:	55 27       	eor	r21, r21
     9ae:	48 1b       	sub	r20, r24
     9b0:	59 0b       	sbc	r21, r25
     9b2:	6b 81       	ldd	r22, Y+3	; 0x03
     9b4:	7c 81       	ldd	r23, Y+4	; 0x04
     9b6:	9b 01       	movw	r18, r22
     9b8:	77 23       	and	r23, r23
     9ba:	24 f4       	brge	.+8      	; 0x9c4 <getJoystickDir+0x62>
     9bc:	22 27       	eor	r18, r18
     9be:	33 27       	eor	r19, r19
     9c0:	26 1b       	sub	r18, r22
     9c2:	37 0b       	sbc	r19, r23
     9c4:	42 17       	cp	r20, r18
     9c6:	53 07       	cpc	r21, r19
     9c8:	2c f0       	brlt	.+10     	; 0x9d4 <getJoystickDir+0x72>
		if (gp.pos_x > 0){
     9ca:	18 16       	cp	r1, r24
     9cc:	19 06       	cpc	r1, r25
     9ce:	64 f4       	brge	.+24     	; 0x9e8 <getJoystickDir+0x86>
			direction = RIGHT;
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	0f c0       	rjmp	.+30     	; 0x9f2 <getJoystickDir+0x90>
		} else{
			direction = LEFT;
		}

	} else if (abs(gp.pos_y) > abs(gp.pos_x)){
     9d4:	42 17       	cp	r20, r18
     9d6:	53 07       	cpc	r21, r19
     9d8:	4c f4       	brge	.+18     	; 0x9ec <getJoystickDir+0x8a>
		if (gp.pos_y > 0){
     9da:	16 16       	cp	r1, r22
     9dc:	17 06       	cpc	r1, r23
     9de:	44 f4       	brge	.+16     	; 0x9f0 <getJoystickDir+0x8e>
			direction = UP;
     9e0:	83 e0       	ldi	r24, 0x03	; 3
     9e2:	07 c0       	rjmp	.+14     	; 0x9f2 <getJoystickDir+0x90>
Dir getJoystickDir(Gamepad gp){
	int16_t deadzone = 40;
	Dir direction = NONE; // Default

	if (gp.pos_x < deadzone && gp.pos_x > -deadzone && gp.pos_y < deadzone && gp.pos_y > -deadzone){
		direction = NONE;
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <getJoystickDir+0x90>

	} else if (abs(gp.pos_x) >= abs(gp.pos_y)){
		if (gp.pos_x > 0){
			direction = RIGHT;
		} else{
			direction = LEFT;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <getJoystickDir+0x90>
	return gp;
}

Dir getJoystickDir(Gamepad gp){
	int16_t deadzone = 40;
	Dir direction = NONE; // Default
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <getJoystickDir+0x90>

	} else if (abs(gp.pos_y) > abs(gp.pos_x)){
		if (gp.pos_y > 0){
			direction = UP;
		}else{
			direction = DOWN;
     9f0:	84 e0       	ldi	r24, 0x04	; 4
		}
		}
		
	return direction;
}
     9f2:	2a 96       	adiw	r28, 0x0a	; 10
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	08 95       	ret

00000a08 <main>:
#include "menu.h"
#include "spi.h"
#include "mcp2515.h"
#include "can.h"

int main(void) {
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	aa 97       	sbiw	r28, 0x2a	; 42
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
	UART_init(DEF_UBBR);
     a1c:	8f e1       	ldi	r24, 0x1F	; 31
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 0a 08 	call	0x1014	; 0x1014 <UART_init>
	SRAM_init();
     a24:	0e 94 f9 07 	call	0xff2	; 0xff2 <SRAM_init>
	adc_init();
     a28:	0e 94 7f 03 	call	0x6fe	; 0x6fe <adc_init>
	gamepad_init();
     a2c:	0e 94 26 04 	call	0x84c	; 0x84c <gamepad_init>
	oled_init();
     a30:	0e 94 05 07 	call	0xe0a	; 0xe0a <oled_init>
	oled_reset();
     a34:	0e 94 75 07 	call	0xeea	; 0xeea <oled_reset>
	menu_init();
     a38:	0e 94 90 06 	call	0xd20	; 0xd20 <menu_init>

	can_init();
     a3c:	0e 94 a7 03 	call	0x74e	; 0x74e <can_init>
	
	while(1){
		// =================================================
		// Read gamepad inputs
		
		gp = read_gamepad();
     a40:	ce 01       	movw	r24, r28
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	0e 94 2c 04 	call	0x858	; 0x858 <read_gamepad>
		gp = calibrate_gamepad(gp);
     a48:	e9 80       	ldd	r14, Y+1	; 0x01
     a4a:	fa 80       	ldd	r15, Y+2	; 0x02
     a4c:	0b 81       	ldd	r16, Y+3	; 0x03
     a4e:	1c 81       	ldd	r17, Y+4	; 0x04
     a50:	2d 81       	ldd	r18, Y+5	; 0x05
     a52:	3e 81       	ldd	r19, Y+6	; 0x06
     a54:	4f 81       	ldd	r20, Y+7	; 0x07
     a56:	58 85       	ldd	r21, Y+8	; 0x08
     a58:	69 85       	ldd	r22, Y+9	; 0x09
     a5a:	7a 85       	ldd	r23, Y+10	; 0x0a
     a5c:	ce 01       	movw	r24, r28
     a5e:	81 96       	adiw	r24, 0x21	; 33
     a60:	0e 94 4f 04 	call	0x89e	; 0x89e <calibrate_gamepad>
     a64:	8a e0       	ldi	r24, 0x0A	; 10
     a66:	fe 01       	movw	r30, r28
     a68:	b1 96       	adiw	r30, 0x21	; 33
     a6a:	de 01       	movw	r26, r28
     a6c:	11 96       	adiw	r26, 0x01	; 1
     a6e:	01 90       	ld	r0, Z+
     a70:	0d 92       	st	X+, r0
     a72:	8a 95       	dec	r24
     a74:	e1 f7       	brne	.-8      	; 0xa6e <main+0x66>
		new_gp_dir = getJoystickDir(gp);
     a76:	09 81       	ldd	r16, Y+1	; 0x01
     a78:	1a 81       	ldd	r17, Y+2	; 0x02
     a7a:	2b 81       	ldd	r18, Y+3	; 0x03
     a7c:	3c 81       	ldd	r19, Y+4	; 0x04
     a7e:	4d 81       	ldd	r20, Y+5	; 0x05
     a80:	5e 81       	ldd	r21, Y+6	; 0x06
     a82:	6f 81       	ldd	r22, Y+7	; 0x07
     a84:	78 85       	ldd	r23, Y+8	; 0x08
     a86:	89 85       	ldd	r24, Y+9	; 0x09
     a88:	9a 85       	ldd	r25, Y+10	; 0x0a
     a8a:	0e 94 b1 04 	call	0x962	; 0x962 <getJoystickDir>
     a8e:	18 2f       	mov	r17, r24
		
		
		// =================================================
		// Display menu on OLED
		
		oled_reset();
     a90:	0e 94 75 07 	call	0xeea	; 0xeea <oled_reset>
		if (new_gp_dir == UP && prev_gp_dir != UP ){
     a94:	13 30       	cpi	r17, 0x03	; 3
     a96:	39 f4       	brne	.+14     	; 0xaa6 <main+0x9e>
     a98:	23 e0       	ldi	r18, 0x03	; 3
     a9a:	d2 16       	cp	r13, r18
     a9c:	21 f0       	breq	.+8      	; 0xaa6 <main+0x9e>
			menu_moveCursor(-1);
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <menu_moveCursor>
     aa4:	08 c0       	rjmp	.+16     	; 0xab6 <main+0xae>
		}
		else if (new_gp_dir == DOWN && prev_gp_dir != DOWN ){
     aa6:	14 30       	cpi	r17, 0x04	; 4
     aa8:	31 f4       	brne	.+12     	; 0xab6 <main+0xae>
     aaa:	34 e0       	ldi	r19, 0x04	; 4
     aac:	d3 16       	cp	r13, r19
     aae:	19 f0       	breq	.+6      	; 0xab6 <main+0xae>
			menu_moveCursor(1);
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <menu_moveCursor>
		}
		if(gp.btn){
     ab6:	09 85       	ldd	r16, Y+9	; 0x09
     ab8:	01 11       	cpse	r16, r1
			menu_selectPage();
     aba:	0e 94 d2 06 	call	0xda4	; 0xda4 <menu_selectPage>
		
		// =================================================
		// Test CAN communication with node 2
		
		CanMsg msgOut;
		msgOut.id = 0x42; // Not used for anything, since there's only one message type
     abe:	82 e4       	ldi	r24, 0x42	; 66
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	9f 8b       	std	Y+23, r25	; 0x17
     ac4:	8e 8b       	std	Y+22, r24	; 0x16
		msgOut.len = 4;
     ac6:	84 e0       	ldi	r24, 0x04	; 4
     ac8:	88 8f       	std	Y+24, r24	; 0x18
		msgOut.data[0] = gp.pos_x;
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	89 8f       	std	Y+25, r24	; 0x19
		msgOut.data[1] = gp.pos_y;
     ace:	8b 81       	ldd	r24, Y+3	; 0x03
     ad0:	8a 8f       	std	Y+26, r24	; 0x1a
		msgOut.data[2] = gp.btn;
     ad2:	0b 8f       	std	Y+27, r16	; 0x1b
		msgOut.data[3] = 1; // Servo header on
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	8c 8f       	std	Y+28, r24	; 0x1c
		can_send(&msgOut);
     ad8:	ce 01       	movw	r24, r28
     ada:	46 96       	adiw	r24, 0x16	; 22
     adc:	0e 94 ed 03 	call	0x7da	; 0x7da <can_send>
		printf("Sent: ID: %02X    -    Len: %02X    -    Dat: %02X %02X %01X %01X \r\n\r\n", msgOut.id, msgOut.len, msgOut.data[0], msgOut.data[1], msgOut.data[2], msgOut.data[3]);
     ae0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     ae2:	3b 8d       	ldd	r19, Y+27	; 0x1b
     ae4:	2a 8d       	ldd	r18, Y+26	; 0x1a
     ae6:	99 8d       	ldd	r25, Y+25	; 0x19
     ae8:	88 8d       	ldd	r24, Y+24	; 0x18
     aea:	1f 92       	push	r1
     aec:	4f 93       	push	r20
     aee:	1f 92       	push	r1
     af0:	3f 93       	push	r19
     af2:	1f 92       	push	r1
     af4:	2f 93       	push	r18
     af6:	1f 92       	push	r1
     af8:	9f 93       	push	r25
     afa:	1f 92       	push	r1
     afc:	8f 93       	push	r24
     afe:	8f 89       	ldd	r24, Y+23	; 0x17
     b00:	8f 93       	push	r24
     b02:	8e 89       	ldd	r24, Y+22	; 0x16
     b04:	8f 93       	push	r24
     b06:	86 e0       	ldi	r24, 0x06	; 6
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	9f 93       	push	r25
     b0c:	8f 93       	push	r24
     b0e:	0e 94 8a 08 	call	0x1114	; 0x1114 <printf>
		
		
		if (mcp2515_read(MCP_CANINTF)&(0x01)){
     b12:	8c e2       	ldi	r24, 0x2C	; 44
     b14:	0e 94 ba 05 	call	0xb74	; 0xb74 <mcp2515_read>
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	80 ff       	sbrs	r24, 0
     b24:	1c c0       	rjmp	.+56     	; 0xb5e <main+0x156>
			CanMsg msgIn;
			can_recv(&msgIn);
     b26:	ce 01       	movw	r24, r28
     b28:	0b 96       	adiw	r24, 0x0b	; 11
     b2a:	0e 94 aa 03 	call	0x754	; 0x754 <can_recv>
			printf("Recv: ID: %02X    -    Len: %02X    -    Dat: %02X %02X \r\n\r\n", msgIn.id, msgIn.len, msgIn.data[0], msgIn.data[1]);
     b2e:	2f 85       	ldd	r18, Y+15	; 0x0f
     b30:	9e 85       	ldd	r25, Y+14	; 0x0e
     b32:	8d 85       	ldd	r24, Y+13	; 0x0d
     b34:	1f 92       	push	r1
     b36:	2f 93       	push	r18
     b38:	1f 92       	push	r1
     b3a:	9f 93       	push	r25
     b3c:	1f 92       	push	r1
     b3e:	8f 93       	push	r24
     b40:	8c 85       	ldd	r24, Y+12	; 0x0c
     b42:	8f 93       	push	r24
     b44:	8b 85       	ldd	r24, Y+11	; 0x0b
     b46:	8f 93       	push	r24
     b48:	8d e4       	ldi	r24, 0x4D	; 77
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	9f 93       	push	r25
     b4e:	8f 93       	push	r24
     b50:	0e 94 8a 08 	call	0x1114	; 0x1114 <printf>
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b5e:	9f e9       	ldi	r25, 0x9F	; 159
     b60:	26 e8       	ldi	r18, 0x86	; 134
     b62:	31 e0       	ldi	r19, 0x01	; 1
     b64:	91 50       	subi	r25, 0x01	; 1
     b66:	20 40       	sbci	r18, 0x00	; 0
     b68:	30 40       	sbci	r19, 0x00	; 0
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <main+0x15c>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <main+0x166>
     b6e:	00 00       	nop
			menu_moveCursor(1);
		}
		if(gp.btn){
			menu_selectPage();
		}
		prev_gp_dir = new_gp_dir;
     b70:	d1 2e       	mov	r13, r17
		_delay_ms(500);
		

		
	
	}
     b72:	66 cf       	rjmp	.-308    	; 0xa40 <main+0x38>

00000b74 <mcp2515_read>:
		printf("MCP2515 Entered loopback mode B-)\r\n");
	}
}


uint8_t mcp2515_read(uint8_t adr){
     b74:	cf 93       	push	r28
     b76:	c8 2f       	mov	r28, r24
	DEF_CAN_CS_ON;
     b78:	88 b3       	in	r24, 0x18	; 24
     b7a:	8f 7e       	andi	r24, 0xEF	; 239
     b7c:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_READ);
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <spi_send>
	spi_send(adr);
     b84:	8c 2f       	mov	r24, r28
     b86:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <spi_send>
	uint8_t result = spi_recv();
     b8a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <spi_recv>
	DEF_CAN_CS_OFF;
     b8e:	98 b3       	in	r25, 0x18	; 24
     b90:	90 61       	ori	r25, 0x10	; 16
     b92:	98 bb       	out	0x18, r25	; 24
	return result;
}
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret

00000b98 <mcp2515_write>:


void mcp2515_write(uint8_t adr, uint8_t data){
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	d8 2f       	mov	r29, r24
     b9e:	c6 2f       	mov	r28, r22
	DEF_CAN_CS_ON;
     ba0:	88 b3       	in	r24, 0x18	; 24
     ba2:	8f 7e       	andi	r24, 0xEF	; 239
     ba4:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_WRITE);
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <spi_send>
	spi_send(adr);
     bac:	8d 2f       	mov	r24, r29
     bae:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <spi_send>
	spi_send(data);
     bb2:	8c 2f       	mov	r24, r28
     bb4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <spi_send>
	DEF_CAN_CS_OFF;
     bb8:	88 b3       	in	r24, 0x18	; 24
     bba:	80 61       	ori	r24, 0x10	; 16
     bbc:	88 bb       	out	0x18, r24	; 24
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <mcp2515_request_to_send>:


void mcp2515_request_to_send(uint8_t buffer){
	DEF_CAN_CS_ON;
     bc4:	98 b3       	in	r25, 0x18	; 24
     bc6:	9f 7e       	andi	r25, 0xEF	; 239
     bc8:	98 bb       	out	0x18, r25	; 24
	spi_send(buffer);
     bca:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <spi_send>
	DEF_CAN_CS_OFF;
     bce:	88 b3       	in	r24, 0x18	; 24
     bd0:	80 61       	ori	r24, 0x10	; 16
     bd2:	88 bb       	out	0x18, r24	; 24
     bd4:	08 95       	ret

00000bd6 <mcp2515_bit_modify>:
}


void mcp2515_bit_modify(uint8_t adr, uint8_t mask, uint8_t data){
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	18 2f       	mov	r17, r24
     bde:	d6 2f       	mov	r29, r22
     be0:	c4 2f       	mov	r28, r20
	DEF_CAN_CS_ON;
     be2:	88 b3       	in	r24, 0x18	; 24
     be4:	8f 7e       	andi	r24, 0xEF	; 239
     be6:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_BITMOD); 
     be8:	85 e0       	ldi	r24, 0x05	; 5
     bea:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <spi_send>
	spi_send(adr);
     bee:	81 2f       	mov	r24, r17
     bf0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <spi_send>
	spi_send(mask);
     bf4:	8d 2f       	mov	r24, r29
     bf6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <spi_send>
	spi_send(data);
     bfa:	8c 2f       	mov	r24, r28
     bfc:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <spi_send>
	DEF_CAN_CS_OFF;
     c00:	88 b3       	in	r24, 0x18	; 24
     c02:	80 61       	ori	r24, 0x10	; 16
     c04:	88 bb       	out	0x18, r24	; 24
}
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	1f 91       	pop	r17
     c0c:	08 95       	ret

00000c0e <mcp2515_reset>:


void mcp2515_reset(){
	DEF_CAN_CS_ON;
     c0e:	88 b3       	in	r24, 0x18	; 24
     c10:	8f 7e       	andi	r24, 0xEF	; 239
     c12:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_RESET);
     c14:	80 ec       	ldi	r24, 0xC0	; 192
     c16:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <spi_send>
	DEF_CAN_CS_OFF;
     c1a:	88 b3       	in	r24, 0x18	; 24
     c1c:	80 61       	ori	r24, 0x10	; 16
     c1e:	88 bb       	out	0x18, r24	; 24
     c20:	83 ec       	ldi	r24, 0xC3	; 195
     c22:	99 e0       	ldi	r25, 0x09	; 9
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <mcp2515_reset+0x16>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <mcp2515_reset+0x1c>
     c2a:	00 00       	nop
     c2c:	08 95       	ret

00000c2e <mcp2515_init>:
#define PS1 0x06				// Propagation segment 1 = (PS1+1)*TQ = Positive time compensation for edge phase errors 
#define PS2 0x05				// Propagation segment 2 = (PS2+1*TQ) = Negative time compensation for edge phase errors


void mcp2515_init(){
	spi_init();
     c2e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <spi_init>
	// Set chip select pin as output, then keep it inactive (pin low)
	DEF_CAN_CS_ENABLE;
     c32:	87 b3       	in	r24, 0x17	; 23
     c34:	80 61       	ori	r24, 0x10	; 16
     c36:	87 bb       	out	0x17, r24	; 23
	DEF_CAN_CS_OFF;
     c38:	88 b3       	in	r24, 0x18	; 24
     c3a:	80 61       	ori	r24, 0x10	; 16
     c3c:	88 bb       	out	0x18, r24	; 24
	
	mcp2515_reset();
     c3e:	0e 94 07 06 	call	0xc0e	; 0xc0e <mcp2515_reset>
	uint8_t mode = mcp2515_read(MCP_CANSTAT);
     c42:	8e e0       	ldi	r24, 0x0E	; 14
     c44:	0e 94 ba 05 	call	0xb74	; 0xb74 <mcp2515_read>
	if ((mode & MODE_MASK) != MODE_CONFIG){
     c48:	98 2f       	mov	r25, r24
     c4a:	90 7e       	andi	r25, 0xE0	; 224
     c4c:	90 38       	cpi	r25, 0x80	; 128
     c4e:	69 f0       	breq	.+26     	; 0xc6a <mcp2515_init+0x3c>
		printf ("ERROR %02X: MCP2515 is NOT in config mode after reset!\r\n", mode);
     c50:	1f 92       	push	r1
     c52:	8f 93       	push	r24
     c54:	8c ee       	ldi	r24, 0xEC	; 236
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	9f 93       	push	r25
     c5a:	8f 93       	push	r24
     c5c:	0e 94 8a 08 	call	0x1114	; 0x1114 <printf>
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <mcp2515_init+0x44>
	}else{
	printf("MCP2515 entered config mode\r\n");
     c6a:	8a e8       	ldi	r24, 0x8A	; 138
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 a0 08 	call	0x1140	; 0x1140 <puts>
	//mcp2515_write(MCP_CNF2, ((PS1 << 3) | PROPSEG)); //Config CNF2, PS1 = 7+1, PropSeg = 1+1
	
	//mcp2515_write(MCP_CNF3, (PS2 | BTLMODE)); // Write to CNF3: PS2 = 6+1, BTLMode ON (muy importante)

	// Configure bit timing
	mcp2515_write(MCP_CNF1, 0x03);	// BRP (Baud Rate Prescaling) = 3+1
     c72:	63 e0       	ldi	r22, 0x03	; 3
     c74:	8a e2       	ldi	r24, 0x2A	; 42
     c76:	0e 94 cc 05 	call	0xb98	; 0xb98 <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0xB1);	// Propagation Segment PS = 1+1, PS1 = 7+1
     c7a:	61 eb       	ldi	r22, 0xB1	; 177
     c7c:	89 e2       	ldi	r24, 0x29	; 41
     c7e:	0e 94 cc 05 	call	0xb98	; 0xb98 <mcp2515_write>
	mcp2515_write(MCP_CNF3, 0x85);	// PS2 = 5+1, BTLMode ON (muy importante)
     c82:	65 e8       	ldi	r22, 0x85	; 133
     c84:	88 e2       	ldi	r24, 0x28	; 40
     c86:	0e 94 cc 05 	call	0xb98	; 0xb98 <mcp2515_write>

	mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 0); // Enable interrupt bit when Receive Buffer 0 has new data
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	61 e0       	ldi	r22, 0x01	; 1
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	8b e2       	ldi	r24, 0x2B	; 43
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0); // Reset interrupt bit in buffer 0 (must be done to receive next 8 bits)
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	8c e2       	ldi	r24, 0x2C	; 44
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <mcp2515_bit_modify>
	

	mcp2515_write(MCP_CANCTRL, MODE_NORMAL); // Enter normal mode
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	8f e0       	ldi	r24, 0x0F	; 15
     cae:	0e 94 cc 05 	call	0xb98	; 0xb98 <mcp2515_write>
	mode = mcp2515_read(MCP_CANSTAT);
     cb2:	8e e0       	ldi	r24, 0x0E	; 14
     cb4:	0e 94 ba 05 	call	0xb74	; 0xb74 <mcp2515_read>
	if ((mode & MODE_MASK ) != MODE_NORMAL) {
     cb8:	80 7e       	andi	r24, 0xE0	; 224
     cba:	29 f0       	breq	.+10     	; 0xcc6 <mcp2515_init+0x98>
		printf("ERROR: MCP2515 is NOT in normal mode!\r\n");
     cbc:	87 ea       	ldi	r24, 0xA7	; 167
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	0e 94 a0 08 	call	0x1140	; 0x1140 <puts>
     cc4:	08 95       	ret
	}else{
		printf("MCP2515 entered normal mode\r\n");
     cc6:	8e ec       	ldi	r24, 0xCE	; 206
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 a0 08 	call	0x1140	; 0x1140 <puts>
     cce:	08 95       	ret

00000cd0 <menu_func0>:
	if (menu.currentPage->parentMenu == NULL){
		return 0;	// Already in main menu (root) do nothing
	}
	menu.currentPage = menu.currentPage->parentMenu;	// Select parent menu of the current page.
	return 1;
}
     cd0:	87 e9       	ldi	r24, 0x97	; 151
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	0e 94 a0 08 	call	0x1140	; 0x1140 <puts>
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	87 e9       	ldi	r24, 0x97	; 151
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <oled_print>
     ce2:	2f e9       	ldi	r18, 0x9F	; 159
     ce4:	86 e8       	ldi	r24, 0x86	; 134
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	21 50       	subi	r18, 0x01	; 1
     cea:	80 40       	sbci	r24, 0x00	; 0
     cec:	90 40       	sbci	r25, 0x00	; 0
     cee:	e1 f7       	brne	.-8      	; 0xce8 <menu_func0+0x18>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <menu_func0+0x22>
     cf2:	00 00       	nop
     cf4:	08 95       	ret

00000cf6 <menu_func1>:
     cf6:	8b ea       	ldi	r24, 0xAB	; 171
     cf8:	92 e0       	ldi	r25, 0x02	; 2
     cfa:	0e 94 a0 08 	call	0x1140	; 0x1140 <puts>
     cfe:	0e 94 75 07 	call	0xeea	; 0xeea <oled_reset>
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	8b ea       	ldi	r24, 0xAB	; 171
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <oled_print>
     d0c:	2f e9       	ldi	r18, 0x9F	; 159
     d0e:	86 e8       	ldi	r24, 0x86	; 134
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	21 50       	subi	r18, 0x01	; 1
     d14:	80 40       	sbci	r24, 0x00	; 0
     d16:	90 40       	sbci	r25, 0x00	; 0
     d18:	e1 f7       	brne	.-8      	; 0xd12 <menu_func1+0x1c>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <menu_func1+0x26>
     d1c:	00 00       	nop
     d1e:	08 95       	ret

00000d20 <menu_init>:
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	8a e0       	ldi	r24, 0x0A	; 10
     d26:	e0 ec       	ldi	r30, 0xC0	; 192
     d28:	f2 e0       	ldi	r31, 0x02	; 2
     d2a:	a1 e0       	ldi	r26, 0x01	; 1
     d2c:	b3 e0       	ldi	r27, 0x03	; 3
     d2e:	01 90       	ld	r0, Z+
     d30:	0d 92       	st	X+, r0
     d32:	8a 95       	dec	r24
     d34:	e1 f7       	brne	.-8      	; 0xd2e <menu_init+0xe>
     d36:	c8 ee       	ldi	r28, 0xE8	; 232
     d38:	d2 e0       	ldi	r29, 0x02	; 2
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	88 8f       	std	Y+24, r24	; 0x18
     d3e:	8a ee       	ldi	r24, 0xEA	; 234
     d40:	92 e0       	ldi	r25, 0x02	; 2
     d42:	99 83       	std	Y+1, r25	; 0x01
     d44:	88 83       	st	Y, r24
     d46:	8b e0       	ldi	r24, 0x0B	; 11
     d48:	ea ec       	ldi	r30, 0xCA	; 202
     d4a:	f2 e0       	ldi	r31, 0x02	; 2
     d4c:	a3 e3       	ldi	r26, 0x33	; 51
     d4e:	b3 e0       	ldi	r27, 0x03	; 3
     d50:	01 90       	ld	r0, Z+
     d52:	0d 92       	st	X+, r0
     d54:	8a 95       	dec	r24
     d56:	e1 f7       	brne	.-8      	; 0xd50 <menu_init+0x30>
     d58:	88 e6       	ldi	r24, 0x68	; 104
     d5a:	96 e0       	ldi	r25, 0x06	; 6
     d5c:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <__data_end+0x65>
     d60:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <__data_end+0x64>
     d64:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <__data_end+0x4a>
     d68:	8c e1       	ldi	r24, 0x1C	; 28
     d6a:	93 e0       	ldi	r25, 0x03	; 3
     d6c:	9d 83       	std	Y+5, r25	; 0x05
     d6e:	8c 83       	std	Y+4, r24	; 0x04
     d70:	8b e0       	ldi	r24, 0x0B	; 11
     d72:	e5 ed       	ldi	r30, 0xD5	; 213
     d74:	f2 e0       	ldi	r31, 0x02	; 2
     d76:	a5 e6       	ldi	r26, 0x65	; 101
     d78:	b3 e0       	ldi	r27, 0x03	; 3
     d7a:	01 90       	ld	r0, Z+
     d7c:	0d 92       	st	X+, r0
     d7e:	8a 95       	dec	r24
     d80:	e1 f7       	brne	.-8      	; 0xd7a <menu_init+0x5a>
     d82:	8b e7       	ldi	r24, 0x7B	; 123
     d84:	96 e0       	ldi	r25, 0x06	; 6
     d86:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <__data_end+0x97>
     d8a:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__data_end+0x96>
     d8e:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <__data_end+0x7c>
     d92:	8e e4       	ldi	r24, 0x4E	; 78
     d94:	93 e0       	ldi	r25, 0x03	; 3
     d96:	9f 83       	std	Y+7, r25	; 0x07
     d98:	8e 83       	std	Y+6, r24	; 0x06
     d9a:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <__data_end+0x98>
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	08 95       	ret

00000da4 <menu_selectPage>:


void menu_selectPage(){
	menu.currentPage->subMenu[menu.cursor]->run();  // run the function for the selected page
     da4:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <__data_end>
     da8:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <__data_end+0x1>
     dac:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end+0x98>
     db0:	0e 2e       	mov	r0, r30
     db2:	00 0c       	add	r0, r0
     db4:	ff 0b       	sbc	r31, r31
     db6:	31 96       	adiw	r30, 0x01	; 1
     db8:	ee 0f       	add	r30, r30
     dba:	ff 1f       	adc	r31, r31
     dbc:	e8 0f       	add	r30, r24
     dbe:	f9 1f       	adc	r31, r25
     dc0:	01 90       	ld	r0, Z+
     dc2:	f0 81       	ld	r31, Z
     dc4:	e0 2d       	mov	r30, r0
     dc6:	00 a8       	ldd	r0, Z+48	; 0x30
     dc8:	f1 a9       	ldd	r31, Z+49	; 0x31
     dca:	e0 2d       	mov	r30, r0
     dcc:	09 95       	icall
     dce:	08 95       	ret

00000dd0 <menu_setCursor>:
}


bool menu_setCursor(int8_t index){
	// check if index is out of range
	if (index < 0){
     dd0:	88 23       	and	r24, r24
     dd2:	5c f0       	brlt	.+22     	; 0xdea <menu_setCursor+0x1a>
		return 0;	// do nothing
	}
	else if(index >= menu.currentPage->totalSubMenu){
     dd4:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <__data_end>
     dd8:	f0 91 e9 02 	lds	r31, 0x02E9	; 0x8002e9 <__data_end+0x1>
     ddc:	96 89       	ldd	r25, Z+22	; 0x16
     dde:	89 17       	cp	r24, r25
     de0:	34 f4       	brge	.+12     	; 0xdee <menu_setCursor+0x1e>
		return 0;	// do nothing
	}
	menu.cursor = index;	// update cursor location
     de2:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <__data_end+0x98>
	return 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	08 95       	ret


bool menu_setCursor(int8_t index){
	// check if index is out of range
	if (index < 0){
		return 0;	// do nothing
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	08 95       	ret
	}
	else if(index >= menu.currentPage->totalSubMenu){
		return 0;	// do nothing
     dee:	80 e0       	ldi	r24, 0x00	; 0
	}
	menu.cursor = index;	// update cursor location
	return 1;
}
     df0:	08 95       	ret

00000df2 <menu_moveCursor>:


bool menu_moveCursor(int8_t direction){
	int8_t index = menu.cursor + direction;
     df2:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <__data_end+0x98>
	menu_setCursor(index);
     df6:	89 0f       	add	r24, r25
     df8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <menu_setCursor>
}
     dfc:	08 95       	ret

00000dfe <oled_write_data>:
void oled_write_line(uint8_t page){
	oled_goto_page(page);
	for (uint8_t i = 0; i < 128; i++){
		oled_write_data(0x01);
	}
}
     dfe:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xe75>
     e02:	08 95       	ret

00000e04 <oled_write_cmd>:
     e04:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xc75>
     e08:	08 95       	ret

00000e0a <oled_init>:
     e0a:	8e ea       	ldi	r24, 0xAE	; 174
     e0c:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e10:	81 ea       	ldi	r24, 0xA1	; 161
     e12:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e16:	8a ed       	ldi	r24, 0xDA	; 218
     e18:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e1c:	82 e1       	ldi	r24, 0x12	; 18
     e1e:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e22:	88 ec       	ldi	r24, 0xC8	; 200
     e24:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e28:	88 ea       	ldi	r24, 0xA8	; 168
     e2a:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e2e:	8f e3       	ldi	r24, 0x3F	; 63
     e30:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e34:	85 ed       	ldi	r24, 0xD5	; 213
     e36:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e3a:	80 e8       	ldi	r24, 0x80	; 128
     e3c:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e40:	81 e8       	ldi	r24, 0x81	; 129
     e42:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e46:	80 e5       	ldi	r24, 0x50	; 80
     e48:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e4c:	89 ed       	ldi	r24, 0xD9	; 217
     e4e:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e52:	81 e2       	ldi	r24, 0x21	; 33
     e54:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e58:	80 e2       	ldi	r24, 0x20	; 32
     e5a:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e64:	8b ed       	ldi	r24, 0xDB	; 219
     e66:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e6a:	80 e3       	ldi	r24, 0x30	; 48
     e6c:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e70:	8d ea       	ldi	r24, 0xAD	; 173
     e72:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e7c:	84 ea       	ldi	r24, 0xA4	; 164
     e7e:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e82:	86 ea       	ldi	r24, 0xA6	; 166
     e84:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e88:	8f ea       	ldi	r24, 0xAF	; 175
     e8a:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e8e:	08 95       	ret

00000e90 <oled_goto_page>:
     e90:	87 70       	andi	r24, 0x07	; 7
     e92:	80 6b       	ori	r24, 0xB0	; 176
     e94:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     e98:	08 95       	ret

00000e9a <oled_goto_col>:
     e9a:	cf 93       	push	r28
     e9c:	c8 2f       	mov	r28, r24
     e9e:	8f 70       	andi	r24, 0x0F	; 15
     ea0:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     ea4:	8c 2f       	mov	r24, r28
     ea6:	82 95       	swap	r24
     ea8:	8f 70       	andi	r24, 0x0F	; 15
     eaa:	80 61       	ori	r24, 0x10	; 16
     eac:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_write_cmd>
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <oled_pos>:
     eb4:	cf 93       	push	r28
     eb6:	c6 2f       	mov	r28, r22
     eb8:	0e 94 48 07 	call	0xe90	; 0xe90 <oled_goto_page>
     ebc:	8c 2f       	mov	r24, r28
     ebe:	0e 94 4d 07 	call	0xe9a	; 0xe9a <oled_goto_col>
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <oled_home>:
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <oled_pos>
     ece:	08 95       	ret

00000ed0 <oled_clear_line>:


void oled_clear_line(uint8_t page){
     ed0:	cf 93       	push	r28
	oled_goto_page(page);
     ed2:	0e 94 48 07 	call	0xe90	; 0xe90 <oled_goto_page>
	for (uint8_t i = 0; i < 128; i++){
     ed6:	c0 e0       	ldi	r28, 0x00	; 0
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <oled_clear_line+0x12>
		oled_write_data(0x00);
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_data>
}


void oled_clear_line(uint8_t page){
	oled_goto_page(page);
	for (uint8_t i = 0; i < 128; i++){
     ee0:	cf 5f       	subi	r28, 0xFF	; 255
     ee2:	cc 23       	and	r28, r28
     ee4:	d4 f7       	brge	.-12     	; 0xeda <oled_clear_line+0xa>
		oled_write_data(0x00);
	}
}
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <oled_reset>:


void oled_reset(){
     eea:	cf 93       	push	r28
	for (uint8_t i=0; i < 8; i++){
     eec:	c0 e0       	ldi	r28, 0x00	; 0
     eee:	04 c0       	rjmp	.+8      	; 0xef8 <oled_reset+0xe>
		oled_clear_line(i);
     ef0:	8c 2f       	mov	r24, r28
     ef2:	0e 94 68 07 	call	0xed0	; 0xed0 <oled_clear_line>
	}
}


void oled_reset(){
	for (uint8_t i=0; i < 8; i++){
     ef6:	cf 5f       	subi	r28, 0xFF	; 255
     ef8:	c8 30       	cpi	r28, 0x08	; 8
     efa:	d0 f3       	brcs	.-12     	; 0xef0 <oled_reset+0x6>
		oled_clear_line(i);
	}
	oled_home();
     efc:	0e 94 63 07 	call	0xec6	; 0xec6 <oled_home>
}
     f00:	cf 91       	pop	r28
     f02:	08 95       	ret

00000f04 <oled_printChar>:


void oled_printChar(char c, char font){
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
     f08:	90 ee       	ldi	r25, 0xE0	; 224
     f0a:	98 0f       	add	r25, r24
     f0c:	90 36       	cpi	r25, 0x60	; 96
     f0e:	08 f0       	brcs	.+2      	; 0xf12 <oled_printChar+0xe>
     f10:	47 c0       	rjmp	.+142    	; 0xfa0 <oled_printChar+0x9c>
     f12:	c8 2f       	mov	r28, r24
		switch (font){
     f14:	64 30       	cpi	r22, 0x04	; 4
     f16:	99 f0       	breq	.+38     	; 0xf3e <oled_printChar+0x3a>
     f18:	68 30       	cpi	r22, 0x08	; 8
     f1a:	39 f1       	breq	.+78     	; 0xf6a <oled_printChar+0x66>
     f1c:	3e c0       	rjmp	.+124    	; 0xf9a <oled_printChar+0x96>
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
     f1e:	ec 2f       	mov	r30, r28
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	b0 97       	sbiw	r30, 0x20	; 32
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	ee 0f       	add	r30, r30
     f2a:	ff 1f       	adc	r31, r31
     f2c:	ed 0f       	add	r30, r29
     f2e:	f1 1d       	adc	r31, r1
     f30:	e0 59       	subi	r30, 0x90	; 144
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	84 91       	lpm	r24, Z
     f36:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_data>
void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
     f3a:	df 5f       	subi	r29, 0xFF	; 255
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <oled_printChar+0x3c>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
     f3e:	d0 e0       	ldi	r29, 0x00	; 0
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
     f40:	d4 30       	cpi	r29, 0x04	; 4
     f42:	68 f3       	brcs	.-38     	; 0xf1e <oled_printChar+0x1a>
     f44:	2d c0       	rjmp	.+90     	; 0xfa0 <oled_printChar+0x9c>
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
     f46:	ec 2f       	mov	r30, r28
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	b0 97       	sbiw	r30, 0x20	; 32
     f4c:	ee 0f       	add	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	ee 0f       	add	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	ee 0f       	add	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	ed 0f       	add	r30, r29
     f5a:	f1 1d       	adc	r31, r1
     f5c:	e9 53       	subi	r30, 0x39	; 57
     f5e:	fc 4f       	sbci	r31, 0xFC	; 252
     f60:	84 91       	lpm	r24, Z
     f62:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_data>
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
     f66:	df 5f       	subi	r29, 0xFF	; 255
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <oled_printChar+0x68>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
     f6a:	d0 e0       	ldi	r29, 0x00	; 0
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
     f6c:	d8 30       	cpi	r29, 0x08	; 8
     f6e:	58 f3       	brcs	.-42     	; 0xf46 <oled_printChar+0x42>
     f70:	17 c0       	rjmp	.+46     	; 0xfa0 <oled_printChar+0x9c>
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
					oled_write_data(pgm_read_byte(&font5[c-32][i]));
     f72:	2c 2f       	mov	r18, r28
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	20 52       	subi	r18, 0x20	; 32
     f78:	31 09       	sbc	r19, r1
     f7a:	f9 01       	movw	r30, r18
     f7c:	ee 0f       	add	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	e2 0f       	add	r30, r18
     f86:	f3 1f       	adc	r31, r19
     f88:	ed 0f       	add	r30, r29
     f8a:	f1 1d       	adc	r31, r1
     f8c:	e4 51       	subi	r30, 0x14	; 20
     f8e:	fe 4f       	sbci	r31, 0xFE	; 254
     f90:	84 91       	lpm	r24, Z
     f92:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_data>
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
     f96:	df 5f       	subi	r29, 0xFF	; 255
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <oled_printChar+0x98>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
     f9a:	d0 e0       	ldi	r29, 0x00	; 0
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
     f9c:	d5 30       	cpi	r29, 0x05	; 5
     f9e:	48 f3       	brcs	.-46     	; 0xf72 <oled_printChar+0x6e>
					oled_write_data(pgm_read_byte(&font5[c-32][i]));
				}
				break;
		}
	}
}
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	08 95       	ret

00000fa6 <oled_print>:


// Print strings to OLED
void oled_print(const char* data, char font){
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	8c 01       	movw	r16, r24
	char f = 5; // Default font (5x8 NORMAL)
	if (f == 4 || f == 8){ // Selected fonts 4x8 SMALL or 8x8 LARGE
		f = font;
	}
	
	int i = 0;
     fb0:	c0 e0       	ldi	r28, 0x00	; 0
     fb2:	d0 e0       	ldi	r29, 0x00	; 0
     fb4:	04 c0       	rjmp	.+8      	; 0xfbe <oled_print+0x18>
	while(data[i] != '\0'){
		oled_printChar(data[i], f);
     fb6:	65 e0       	ldi	r22, 0x05	; 5
     fb8:	0e 94 82 07 	call	0xf04	; 0xf04 <oled_printChar>
		++i;
     fbc:	21 96       	adiw	r28, 0x01	; 1
	if (f == 4 || f == 8){ // Selected fonts 4x8 SMALL or 8x8 LARGE
		f = font;
	}
	
	int i = 0;
	while(data[i] != '\0'){
     fbe:	f8 01       	movw	r30, r16
     fc0:	ec 0f       	add	r30, r28
     fc2:	fd 1f       	adc	r31, r29
     fc4:	80 81       	ld	r24, Z
     fc6:	81 11       	cpse	r24, r1
     fc8:	f6 cf       	rjmp	.-20     	; 0xfb6 <oled_print+0x10>
		oled_printChar(data[i], f);
		++i;
	}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	08 95       	ret

00000fd4 <spi_init>:
#include <avr/io.h>

// Initialize as master
// Code modified from ATMega162 data sheet
void spi_init(void){
	DDRB |= (1 << PB5)|(1 << PB7); // MOSI out, SCK out
     fd4:	87 b3       	in	r24, 0x17	; 23
     fd6:	80 6a       	ori	r24, 0xA0	; 160
     fd8:	87 bb       	out	0x17, r24	; 23
	// Enable SPI as master (SPE, MSTR)
	// Set clock rate F_CPU/16 (SPR0)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     fda:	81 e5       	ldi	r24, 0x51	; 81
     fdc:	8d b9       	out	0x0d, r24	; 13
     fde:	08 95       	ret

00000fe0 <spi_send>:
}


// Send data as master
void spi_send(char cData){
	SPDR = cData;
     fe0:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for transmission complete
	while(!(SPSR & 1<<SPIF)){;};
     fe2:	77 9b       	sbis	0x0e, 7	; 14
     fe4:	fe cf       	rjmp	.-4      	; 0xfe2 <spi_send+0x2>
}
     fe6:	08 95       	ret

00000fe8 <spi_recv>:

// Receive data as master
// Same as sending
// Moves ring buffer by 8 bits to receive 8 bits from slave
uint8_t spi_recv(void){
	spi_send(0);
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <spi_send>
	return SPDR;
     fee:	8f b1       	in	r24, 0x0f	; 15
     ff0:	08 95       	ret

00000ff2 <SRAM_init>:
#include <avr/io.h>
#include <inttypes.h> // Needed for uint16_t


void SRAM_init() {
	MCUCR |= (1 << SRE); // Enable SRAM
     ff2:	85 b7       	in	r24, 0x35	; 53
     ff4:	80 68       	ori	r24, 0x80	; 128
     ff6:	85 bf       	out	0x35, r24	; 53
	SFIOR = (1 << XMM2); // Masks PC4-PC7 to make sure JTAG remains untouched
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	80 bf       	out	0x30, r24	; 48
     ffc:	08 95       	ret

00000ffe <UART_receive>:
#include <stdio.h>
#include <avr/io.h>


int UART_receive(FILE * file) {
    while (!(UCSR0A & (1 << RXC0)));  // Wait until data is available to read
     ffe:	5f 9b       	sbis	0x0b, 7	; 11
    1000:	fe cf       	rjmp	.-4      	; 0xffe <UART_receive>
    return UDR0;  // Return the received data
    1002:	8c b1       	in	r24, 0x0c	; 12
}
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	08 95       	ret

00001008 <UART_transmit>:


int UART_transmit(char data, FILE * file) {
    while (!(UCSR0A & (1 << UDRE0)));  // Wait for the data register to be empty
    1008:	5d 9b       	sbis	0x0b, 5	; 11
    100a:	fe cf       	rjmp	.-4      	; 0x1008 <UART_transmit>
    UDR0 = data;  // Load the data into the register for transmission
    100c:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	08 95       	ret

00001014 <UART_init>:


void UART_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
    1014:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    1016:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1018:	88 e1       	ldi	r24, 0x18	; 24
    101a:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, synchronous mode */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    101c:	8e e8       	ldi	r24, 0x8E	; 142
    101e:	80 bd       	out	0x20, r24	; 32
	// Make the transmit & receive functions write to a stream / file
	fdevopen(UART_transmit, UART_receive);
    1020:	6f ef       	ldi	r22, 0xFF	; 255
    1022:	77 e0       	ldi	r23, 0x07	; 7
    1024:	84 e0       	ldi	r24, 0x04	; 4
    1026:	98 e0       	ldi	r25, 0x08	; 8
    1028:	0e 94 3f 08 	call	0x107e	; 0x107e <fdevopen>
    102c:	08 95       	ret

0000102e <__divmodhi4>:
    102e:	97 fb       	bst	r25, 7
    1030:	07 2e       	mov	r0, r23
    1032:	16 f4       	brtc	.+4      	; 0x1038 <__divmodhi4+0xa>
    1034:	00 94       	com	r0
    1036:	07 d0       	rcall	.+14     	; 0x1046 <__divmodhi4_neg1>
    1038:	77 fd       	sbrc	r23, 7
    103a:	09 d0       	rcall	.+18     	; 0x104e <__divmodhi4_neg2>
    103c:	0e 94 2b 08 	call	0x1056	; 0x1056 <__udivmodhi4>
    1040:	07 fc       	sbrc	r0, 7
    1042:	05 d0       	rcall	.+10     	; 0x104e <__divmodhi4_neg2>
    1044:	3e f4       	brtc	.+14     	; 0x1054 <__divmodhi4_exit>

00001046 <__divmodhi4_neg1>:
    1046:	90 95       	com	r25
    1048:	81 95       	neg	r24
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	08 95       	ret

0000104e <__divmodhi4_neg2>:
    104e:	70 95       	com	r23
    1050:	61 95       	neg	r22
    1052:	7f 4f       	sbci	r23, 0xFF	; 255

00001054 <__divmodhi4_exit>:
    1054:	08 95       	ret

00001056 <__udivmodhi4>:
    1056:	aa 1b       	sub	r26, r26
    1058:	bb 1b       	sub	r27, r27
    105a:	51 e1       	ldi	r21, 0x11	; 17
    105c:	07 c0       	rjmp	.+14     	; 0x106c <__udivmodhi4_ep>

0000105e <__udivmodhi4_loop>:
    105e:	aa 1f       	adc	r26, r26
    1060:	bb 1f       	adc	r27, r27
    1062:	a6 17       	cp	r26, r22
    1064:	b7 07       	cpc	r27, r23
    1066:	10 f0       	brcs	.+4      	; 0x106c <__udivmodhi4_ep>
    1068:	a6 1b       	sub	r26, r22
    106a:	b7 0b       	sbc	r27, r23

0000106c <__udivmodhi4_ep>:
    106c:	88 1f       	adc	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	5a 95       	dec	r21
    1072:	a9 f7       	brne	.-22     	; 0x105e <__udivmodhi4_loop>
    1074:	80 95       	com	r24
    1076:	90 95       	com	r25
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	08 95       	ret

0000107e <fdevopen>:
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	31 f4       	brne	.+12     	; 0x1096 <fdevopen+0x18>
    108a:	61 15       	cp	r22, r1
    108c:	71 05       	cpc	r23, r1
    108e:	19 f4       	brne	.+6      	; 0x1096 <fdevopen+0x18>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	3a c0       	rjmp	.+116    	; 0x110a <fdevopen+0x8c>
    1096:	8b 01       	movw	r16, r22
    1098:	ec 01       	movw	r28, r24
    109a:	6e e0       	ldi	r22, 0x0E	; 14
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 b1 0a 	call	0x1562	; 0x1562 <calloc>
    10a6:	fc 01       	movw	r30, r24
    10a8:	89 2b       	or	r24, r25
    10aa:	91 f3       	breq	.-28     	; 0x1090 <fdevopen+0x12>
    10ac:	80 e8       	ldi	r24, 0x80	; 128
    10ae:	83 83       	std	Z+3, r24	; 0x03
    10b0:	01 15       	cp	r16, r1
    10b2:	11 05       	cpc	r17, r1
    10b4:	71 f0       	breq	.+28     	; 0x10d2 <fdevopen+0x54>
    10b6:	13 87       	std	Z+11, r17	; 0x0b
    10b8:	02 87       	std	Z+10, r16	; 0x0a
    10ba:	81 e8       	ldi	r24, 0x81	; 129
    10bc:	83 83       	std	Z+3, r24	; 0x03
    10be:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <__iob>
    10c2:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <__iob+0x1>
    10c6:	89 2b       	or	r24, r25
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <fdevopen+0x54>
    10ca:	f0 93 82 03 	sts	0x0382, r31	; 0x800382 <__iob+0x1>
    10ce:	e0 93 81 03 	sts	0x0381, r30	; 0x800381 <__iob>
    10d2:	20 97       	sbiw	r28, 0x00	; 0
    10d4:	c9 f0       	breq	.+50     	; 0x1108 <fdevopen+0x8a>
    10d6:	d1 87       	std	Z+9, r29	; 0x09
    10d8:	c0 87       	std	Z+8, r28	; 0x08
    10da:	83 81       	ldd	r24, Z+3	; 0x03
    10dc:	82 60       	ori	r24, 0x02	; 2
    10de:	83 83       	std	Z+3, r24	; 0x03
    10e0:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <__iob+0x2>
    10e4:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <__iob+0x3>
    10e8:	89 2b       	or	r24, r25
    10ea:	71 f4       	brne	.+28     	; 0x1108 <fdevopen+0x8a>
    10ec:	f0 93 84 03 	sts	0x0384, r31	; 0x800384 <__iob+0x3>
    10f0:	e0 93 83 03 	sts	0x0383, r30	; 0x800383 <__iob+0x2>
    10f4:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <__iob+0x4>
    10f8:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <__iob+0x5>
    10fc:	89 2b       	or	r24, r25
    10fe:	21 f4       	brne	.+8      	; 0x1108 <fdevopen+0x8a>
    1100:	f0 93 86 03 	sts	0x0386, r31	; 0x800386 <__iob+0x5>
    1104:	e0 93 85 03 	sts	0x0385, r30	; 0x800385 <__iob+0x4>
    1108:	cf 01       	movw	r24, r30
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	08 95       	ret

00001114 <printf>:
    1114:	a0 e0       	ldi	r26, 0x00	; 0
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e0 e9       	ldi	r30, 0x90	; 144
    111a:	f8 e0       	ldi	r31, 0x08	; 8
    111c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__prologue_saves__+0x20>
    1120:	ae 01       	movw	r20, r28
    1122:	4b 5f       	subi	r20, 0xFB	; 251
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	fa 01       	movw	r30, r20
    1128:	61 91       	ld	r22, Z+
    112a:	71 91       	ld	r23, Z+
    112c:	af 01       	movw	r20, r30
    112e:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <__iob+0x2>
    1132:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <__iob+0x3>
    1136:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <vfprintf>
    113a:	e2 e0       	ldi	r30, 0x02	; 2
    113c:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__epilogue_restores__+0x20>

00001140 <puts>:
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	e0 91 83 03 	lds	r30, 0x0383	; 0x800383 <__iob+0x2>
    114c:	f0 91 84 03 	lds	r31, 0x0384	; 0x800384 <__iob+0x3>
    1150:	23 81       	ldd	r18, Z+3	; 0x03
    1152:	21 ff       	sbrs	r18, 1
    1154:	1b c0       	rjmp	.+54     	; 0x118c <puts+0x4c>
    1156:	8c 01       	movw	r16, r24
    1158:	d0 e0       	ldi	r29, 0x00	; 0
    115a:	c0 e0       	ldi	r28, 0x00	; 0
    115c:	f8 01       	movw	r30, r16
    115e:	81 91       	ld	r24, Z+
    1160:	8f 01       	movw	r16, r30
    1162:	60 91 83 03 	lds	r22, 0x0383	; 0x800383 <__iob+0x2>
    1166:	70 91 84 03 	lds	r23, 0x0384	; 0x800384 <__iob+0x3>
    116a:	db 01       	movw	r26, r22
    116c:	18 96       	adiw	r26, 0x08	; 8
    116e:	ed 91       	ld	r30, X+
    1170:	fc 91       	ld	r31, X
    1172:	19 97       	sbiw	r26, 0x09	; 9
    1174:	88 23       	and	r24, r24
    1176:	31 f0       	breq	.+12     	; 0x1184 <puts+0x44>
    1178:	09 95       	icall
    117a:	89 2b       	or	r24, r25
    117c:	79 f3       	breq	.-34     	; 0x115c <puts+0x1c>
    117e:	df ef       	ldi	r29, 0xFF	; 255
    1180:	cf ef       	ldi	r28, 0xFF	; 255
    1182:	ec cf       	rjmp	.-40     	; 0x115c <puts+0x1c>
    1184:	8a e0       	ldi	r24, 0x0A	; 10
    1186:	09 95       	icall
    1188:	89 2b       	or	r24, r25
    118a:	19 f0       	breq	.+6      	; 0x1192 <puts+0x52>
    118c:	8f ef       	ldi	r24, 0xFF	; 255
    118e:	9f ef       	ldi	r25, 0xFF	; 255
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <puts+0x56>
    1192:	8d 2f       	mov	r24, r29
    1194:	9c 2f       	mov	r25, r28
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	08 95       	ret

000011a0 <vfprintf>:
    11a0:	ab e0       	ldi	r26, 0x0B	; 11
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e6 ed       	ldi	r30, 0xD6	; 214
    11a6:	f8 e0       	ldi	r31, 0x08	; 8
    11a8:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__prologue_saves__>
    11ac:	6c 01       	movw	r12, r24
    11ae:	7b 01       	movw	r14, r22
    11b0:	8a 01       	movw	r16, r20
    11b2:	fc 01       	movw	r30, r24
    11b4:	17 82       	std	Z+7, r1	; 0x07
    11b6:	16 82       	std	Z+6, r1	; 0x06
    11b8:	83 81       	ldd	r24, Z+3	; 0x03
    11ba:	81 ff       	sbrs	r24, 1
    11bc:	cc c1       	rjmp	.+920    	; 0x1556 <vfprintf+0x3b6>
    11be:	ce 01       	movw	r24, r28
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	3c 01       	movw	r6, r24
    11c4:	f6 01       	movw	r30, r12
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	f7 01       	movw	r30, r14
    11ca:	93 fd       	sbrc	r25, 3
    11cc:	85 91       	lpm	r24, Z+
    11ce:	93 ff       	sbrs	r25, 3
    11d0:	81 91       	ld	r24, Z+
    11d2:	7f 01       	movw	r14, r30
    11d4:	88 23       	and	r24, r24
    11d6:	09 f4       	brne	.+2      	; 0x11da <vfprintf+0x3a>
    11d8:	ba c1       	rjmp	.+884    	; 0x154e <vfprintf+0x3ae>
    11da:	85 32       	cpi	r24, 0x25	; 37
    11dc:	39 f4       	brne	.+14     	; 0x11ec <vfprintf+0x4c>
    11de:	93 fd       	sbrc	r25, 3
    11e0:	85 91       	lpm	r24, Z+
    11e2:	93 ff       	sbrs	r25, 3
    11e4:	81 91       	ld	r24, Z+
    11e6:	7f 01       	movw	r14, r30
    11e8:	85 32       	cpi	r24, 0x25	; 37
    11ea:	29 f4       	brne	.+10     	; 0x11f6 <vfprintf+0x56>
    11ec:	b6 01       	movw	r22, r12
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    11f4:	e7 cf       	rjmp	.-50     	; 0x11c4 <vfprintf+0x24>
    11f6:	91 2c       	mov	r9, r1
    11f8:	21 2c       	mov	r2, r1
    11fa:	31 2c       	mov	r3, r1
    11fc:	ff e1       	ldi	r31, 0x1F	; 31
    11fe:	f3 15       	cp	r31, r3
    1200:	d8 f0       	brcs	.+54     	; 0x1238 <vfprintf+0x98>
    1202:	8b 32       	cpi	r24, 0x2B	; 43
    1204:	79 f0       	breq	.+30     	; 0x1224 <vfprintf+0x84>
    1206:	38 f4       	brcc	.+14     	; 0x1216 <vfprintf+0x76>
    1208:	80 32       	cpi	r24, 0x20	; 32
    120a:	79 f0       	breq	.+30     	; 0x122a <vfprintf+0x8a>
    120c:	83 32       	cpi	r24, 0x23	; 35
    120e:	a1 f4       	brne	.+40     	; 0x1238 <vfprintf+0x98>
    1210:	23 2d       	mov	r18, r3
    1212:	20 61       	ori	r18, 0x10	; 16
    1214:	1d c0       	rjmp	.+58     	; 0x1250 <vfprintf+0xb0>
    1216:	8d 32       	cpi	r24, 0x2D	; 45
    1218:	61 f0       	breq	.+24     	; 0x1232 <vfprintf+0x92>
    121a:	80 33       	cpi	r24, 0x30	; 48
    121c:	69 f4       	brne	.+26     	; 0x1238 <vfprintf+0x98>
    121e:	23 2d       	mov	r18, r3
    1220:	21 60       	ori	r18, 0x01	; 1
    1222:	16 c0       	rjmp	.+44     	; 0x1250 <vfprintf+0xb0>
    1224:	83 2d       	mov	r24, r3
    1226:	82 60       	ori	r24, 0x02	; 2
    1228:	38 2e       	mov	r3, r24
    122a:	e3 2d       	mov	r30, r3
    122c:	e4 60       	ori	r30, 0x04	; 4
    122e:	3e 2e       	mov	r3, r30
    1230:	2a c0       	rjmp	.+84     	; 0x1286 <vfprintf+0xe6>
    1232:	f3 2d       	mov	r31, r3
    1234:	f8 60       	ori	r31, 0x08	; 8
    1236:	1d c0       	rjmp	.+58     	; 0x1272 <vfprintf+0xd2>
    1238:	37 fc       	sbrc	r3, 7
    123a:	2d c0       	rjmp	.+90     	; 0x1296 <vfprintf+0xf6>
    123c:	20 ed       	ldi	r18, 0xD0	; 208
    123e:	28 0f       	add	r18, r24
    1240:	2a 30       	cpi	r18, 0x0A	; 10
    1242:	40 f0       	brcs	.+16     	; 0x1254 <vfprintf+0xb4>
    1244:	8e 32       	cpi	r24, 0x2E	; 46
    1246:	b9 f4       	brne	.+46     	; 0x1276 <vfprintf+0xd6>
    1248:	36 fc       	sbrc	r3, 6
    124a:	81 c1       	rjmp	.+770    	; 0x154e <vfprintf+0x3ae>
    124c:	23 2d       	mov	r18, r3
    124e:	20 64       	ori	r18, 0x40	; 64
    1250:	32 2e       	mov	r3, r18
    1252:	19 c0       	rjmp	.+50     	; 0x1286 <vfprintf+0xe6>
    1254:	36 fe       	sbrs	r3, 6
    1256:	06 c0       	rjmp	.+12     	; 0x1264 <vfprintf+0xc4>
    1258:	8a e0       	ldi	r24, 0x0A	; 10
    125a:	98 9e       	mul	r9, r24
    125c:	20 0d       	add	r18, r0
    125e:	11 24       	eor	r1, r1
    1260:	92 2e       	mov	r9, r18
    1262:	11 c0       	rjmp	.+34     	; 0x1286 <vfprintf+0xe6>
    1264:	ea e0       	ldi	r30, 0x0A	; 10
    1266:	2e 9e       	mul	r2, r30
    1268:	20 0d       	add	r18, r0
    126a:	11 24       	eor	r1, r1
    126c:	22 2e       	mov	r2, r18
    126e:	f3 2d       	mov	r31, r3
    1270:	f0 62       	ori	r31, 0x20	; 32
    1272:	3f 2e       	mov	r3, r31
    1274:	08 c0       	rjmp	.+16     	; 0x1286 <vfprintf+0xe6>
    1276:	8c 36       	cpi	r24, 0x6C	; 108
    1278:	21 f4       	brne	.+8      	; 0x1282 <vfprintf+0xe2>
    127a:	83 2d       	mov	r24, r3
    127c:	80 68       	ori	r24, 0x80	; 128
    127e:	38 2e       	mov	r3, r24
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <vfprintf+0xe6>
    1282:	88 36       	cpi	r24, 0x68	; 104
    1284:	41 f4       	brne	.+16     	; 0x1296 <vfprintf+0xf6>
    1286:	f7 01       	movw	r30, r14
    1288:	93 fd       	sbrc	r25, 3
    128a:	85 91       	lpm	r24, Z+
    128c:	93 ff       	sbrs	r25, 3
    128e:	81 91       	ld	r24, Z+
    1290:	7f 01       	movw	r14, r30
    1292:	81 11       	cpse	r24, r1
    1294:	b3 cf       	rjmp	.-154    	; 0x11fc <vfprintf+0x5c>
    1296:	98 2f       	mov	r25, r24
    1298:	9f 7d       	andi	r25, 0xDF	; 223
    129a:	95 54       	subi	r25, 0x45	; 69
    129c:	93 30       	cpi	r25, 0x03	; 3
    129e:	28 f4       	brcc	.+10     	; 0x12aa <vfprintf+0x10a>
    12a0:	0c 5f       	subi	r16, 0xFC	; 252
    12a2:	1f 4f       	sbci	r17, 0xFF	; 255
    12a4:	9f e3       	ldi	r25, 0x3F	; 63
    12a6:	99 83       	std	Y+1, r25	; 0x01
    12a8:	0d c0       	rjmp	.+26     	; 0x12c4 <vfprintf+0x124>
    12aa:	83 36       	cpi	r24, 0x63	; 99
    12ac:	31 f0       	breq	.+12     	; 0x12ba <vfprintf+0x11a>
    12ae:	83 37       	cpi	r24, 0x73	; 115
    12b0:	71 f0       	breq	.+28     	; 0x12ce <vfprintf+0x12e>
    12b2:	83 35       	cpi	r24, 0x53	; 83
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <vfprintf+0x118>
    12b6:	59 c0       	rjmp	.+178    	; 0x136a <vfprintf+0x1ca>
    12b8:	21 c0       	rjmp	.+66     	; 0x12fc <vfprintf+0x15c>
    12ba:	f8 01       	movw	r30, r16
    12bc:	80 81       	ld	r24, Z
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	0e 5f       	subi	r16, 0xFE	; 254
    12c2:	1f 4f       	sbci	r17, 0xFF	; 255
    12c4:	88 24       	eor	r8, r8
    12c6:	83 94       	inc	r8
    12c8:	91 2c       	mov	r9, r1
    12ca:	53 01       	movw	r10, r6
    12cc:	13 c0       	rjmp	.+38     	; 0x12f4 <vfprintf+0x154>
    12ce:	28 01       	movw	r4, r16
    12d0:	f2 e0       	ldi	r31, 0x02	; 2
    12d2:	4f 0e       	add	r4, r31
    12d4:	51 1c       	adc	r5, r1
    12d6:	f8 01       	movw	r30, r16
    12d8:	a0 80       	ld	r10, Z
    12da:	b1 80       	ldd	r11, Z+1	; 0x01
    12dc:	36 fe       	sbrs	r3, 6
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <vfprintf+0x146>
    12e0:	69 2d       	mov	r22, r9
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <vfprintf+0x14a>
    12e6:	6f ef       	ldi	r22, 0xFF	; 255
    12e8:	7f ef       	ldi	r23, 0xFF	; 255
    12ea:	c5 01       	movw	r24, r10
    12ec:	0e 94 00 0c 	call	0x1800	; 0x1800 <strnlen>
    12f0:	4c 01       	movw	r8, r24
    12f2:	82 01       	movw	r16, r4
    12f4:	f3 2d       	mov	r31, r3
    12f6:	ff 77       	andi	r31, 0x7F	; 127
    12f8:	3f 2e       	mov	r3, r31
    12fa:	16 c0       	rjmp	.+44     	; 0x1328 <vfprintf+0x188>
    12fc:	28 01       	movw	r4, r16
    12fe:	22 e0       	ldi	r18, 0x02	; 2
    1300:	42 0e       	add	r4, r18
    1302:	51 1c       	adc	r5, r1
    1304:	f8 01       	movw	r30, r16
    1306:	a0 80       	ld	r10, Z
    1308:	b1 80       	ldd	r11, Z+1	; 0x01
    130a:	36 fe       	sbrs	r3, 6
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <vfprintf+0x174>
    130e:	69 2d       	mov	r22, r9
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <vfprintf+0x178>
    1314:	6f ef       	ldi	r22, 0xFF	; 255
    1316:	7f ef       	ldi	r23, 0xFF	; 255
    1318:	c5 01       	movw	r24, r10
    131a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <strnlen_P>
    131e:	4c 01       	movw	r8, r24
    1320:	f3 2d       	mov	r31, r3
    1322:	f0 68       	ori	r31, 0x80	; 128
    1324:	3f 2e       	mov	r3, r31
    1326:	82 01       	movw	r16, r4
    1328:	33 fc       	sbrc	r3, 3
    132a:	1b c0       	rjmp	.+54     	; 0x1362 <vfprintf+0x1c2>
    132c:	82 2d       	mov	r24, r2
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	88 16       	cp	r8, r24
    1332:	99 06       	cpc	r9, r25
    1334:	b0 f4       	brcc	.+44     	; 0x1362 <vfprintf+0x1c2>
    1336:	b6 01       	movw	r22, r12
    1338:	80 e2       	ldi	r24, 0x20	; 32
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    1340:	2a 94       	dec	r2
    1342:	f4 cf       	rjmp	.-24     	; 0x132c <vfprintf+0x18c>
    1344:	f5 01       	movw	r30, r10
    1346:	37 fc       	sbrc	r3, 7
    1348:	85 91       	lpm	r24, Z+
    134a:	37 fe       	sbrs	r3, 7
    134c:	81 91       	ld	r24, Z+
    134e:	5f 01       	movw	r10, r30
    1350:	b6 01       	movw	r22, r12
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    1358:	21 10       	cpse	r2, r1
    135a:	2a 94       	dec	r2
    135c:	21 e0       	ldi	r18, 0x01	; 1
    135e:	82 1a       	sub	r8, r18
    1360:	91 08       	sbc	r9, r1
    1362:	81 14       	cp	r8, r1
    1364:	91 04       	cpc	r9, r1
    1366:	71 f7       	brne	.-36     	; 0x1344 <vfprintf+0x1a4>
    1368:	e8 c0       	rjmp	.+464    	; 0x153a <vfprintf+0x39a>
    136a:	84 36       	cpi	r24, 0x64	; 100
    136c:	11 f0       	breq	.+4      	; 0x1372 <vfprintf+0x1d2>
    136e:	89 36       	cpi	r24, 0x69	; 105
    1370:	41 f5       	brne	.+80     	; 0x13c2 <vfprintf+0x222>
    1372:	f8 01       	movw	r30, r16
    1374:	37 fe       	sbrs	r3, 7
    1376:	07 c0       	rjmp	.+14     	; 0x1386 <vfprintf+0x1e6>
    1378:	60 81       	ld	r22, Z
    137a:	71 81       	ldd	r23, Z+1	; 0x01
    137c:	82 81       	ldd	r24, Z+2	; 0x02
    137e:	93 81       	ldd	r25, Z+3	; 0x03
    1380:	0c 5f       	subi	r16, 0xFC	; 252
    1382:	1f 4f       	sbci	r17, 0xFF	; 255
    1384:	08 c0       	rjmp	.+16     	; 0x1396 <vfprintf+0x1f6>
    1386:	60 81       	ld	r22, Z
    1388:	71 81       	ldd	r23, Z+1	; 0x01
    138a:	07 2e       	mov	r0, r23
    138c:	00 0c       	add	r0, r0
    138e:	88 0b       	sbc	r24, r24
    1390:	99 0b       	sbc	r25, r25
    1392:	0e 5f       	subi	r16, 0xFE	; 254
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	f3 2d       	mov	r31, r3
    1398:	ff 76       	andi	r31, 0x6F	; 111
    139a:	3f 2e       	mov	r3, r31
    139c:	97 ff       	sbrs	r25, 7
    139e:	09 c0       	rjmp	.+18     	; 0x13b2 <vfprintf+0x212>
    13a0:	90 95       	com	r25
    13a2:	80 95       	com	r24
    13a4:	70 95       	com	r23
    13a6:	61 95       	neg	r22
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	8f 4f       	sbci	r24, 0xFF	; 255
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	f0 68       	ori	r31, 0x80	; 128
    13b0:	3f 2e       	mov	r3, r31
    13b2:	2a e0       	ldi	r18, 0x0A	; 10
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	a3 01       	movw	r20, r6
    13b8:	0e 94 47 0c 	call	0x188e	; 0x188e <__ultoa_invert>
    13bc:	88 2e       	mov	r8, r24
    13be:	86 18       	sub	r8, r6
    13c0:	45 c0       	rjmp	.+138    	; 0x144c <vfprintf+0x2ac>
    13c2:	85 37       	cpi	r24, 0x75	; 117
    13c4:	31 f4       	brne	.+12     	; 0x13d2 <vfprintf+0x232>
    13c6:	23 2d       	mov	r18, r3
    13c8:	2f 7e       	andi	r18, 0xEF	; 239
    13ca:	b2 2e       	mov	r11, r18
    13cc:	2a e0       	ldi	r18, 0x0A	; 10
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	25 c0       	rjmp	.+74     	; 0x141c <vfprintf+0x27c>
    13d2:	93 2d       	mov	r25, r3
    13d4:	99 7f       	andi	r25, 0xF9	; 249
    13d6:	b9 2e       	mov	r11, r25
    13d8:	8f 36       	cpi	r24, 0x6F	; 111
    13da:	c1 f0       	breq	.+48     	; 0x140c <vfprintf+0x26c>
    13dc:	18 f4       	brcc	.+6      	; 0x13e4 <vfprintf+0x244>
    13de:	88 35       	cpi	r24, 0x58	; 88
    13e0:	79 f0       	breq	.+30     	; 0x1400 <vfprintf+0x260>
    13e2:	b5 c0       	rjmp	.+362    	; 0x154e <vfprintf+0x3ae>
    13e4:	80 37       	cpi	r24, 0x70	; 112
    13e6:	19 f0       	breq	.+6      	; 0x13ee <vfprintf+0x24e>
    13e8:	88 37       	cpi	r24, 0x78	; 120
    13ea:	21 f0       	breq	.+8      	; 0x13f4 <vfprintf+0x254>
    13ec:	b0 c0       	rjmp	.+352    	; 0x154e <vfprintf+0x3ae>
    13ee:	e9 2f       	mov	r30, r25
    13f0:	e0 61       	ori	r30, 0x10	; 16
    13f2:	be 2e       	mov	r11, r30
    13f4:	b4 fe       	sbrs	r11, 4
    13f6:	0d c0       	rjmp	.+26     	; 0x1412 <vfprintf+0x272>
    13f8:	fb 2d       	mov	r31, r11
    13fa:	f4 60       	ori	r31, 0x04	; 4
    13fc:	bf 2e       	mov	r11, r31
    13fe:	09 c0       	rjmp	.+18     	; 0x1412 <vfprintf+0x272>
    1400:	34 fe       	sbrs	r3, 4
    1402:	0a c0       	rjmp	.+20     	; 0x1418 <vfprintf+0x278>
    1404:	29 2f       	mov	r18, r25
    1406:	26 60       	ori	r18, 0x06	; 6
    1408:	b2 2e       	mov	r11, r18
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <vfprintf+0x278>
    140c:	28 e0       	ldi	r18, 0x08	; 8
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	05 c0       	rjmp	.+10     	; 0x141c <vfprintf+0x27c>
    1412:	20 e1       	ldi	r18, 0x10	; 16
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <vfprintf+0x27c>
    1418:	20 e1       	ldi	r18, 0x10	; 16
    141a:	32 e0       	ldi	r19, 0x02	; 2
    141c:	f8 01       	movw	r30, r16
    141e:	b7 fe       	sbrs	r11, 7
    1420:	07 c0       	rjmp	.+14     	; 0x1430 <vfprintf+0x290>
    1422:	60 81       	ld	r22, Z
    1424:	71 81       	ldd	r23, Z+1	; 0x01
    1426:	82 81       	ldd	r24, Z+2	; 0x02
    1428:	93 81       	ldd	r25, Z+3	; 0x03
    142a:	0c 5f       	subi	r16, 0xFC	; 252
    142c:	1f 4f       	sbci	r17, 0xFF	; 255
    142e:	06 c0       	rjmp	.+12     	; 0x143c <vfprintf+0x29c>
    1430:	60 81       	ld	r22, Z
    1432:	71 81       	ldd	r23, Z+1	; 0x01
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0e 5f       	subi	r16, 0xFE	; 254
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	a3 01       	movw	r20, r6
    143e:	0e 94 47 0c 	call	0x188e	; 0x188e <__ultoa_invert>
    1442:	88 2e       	mov	r8, r24
    1444:	86 18       	sub	r8, r6
    1446:	fb 2d       	mov	r31, r11
    1448:	ff 77       	andi	r31, 0x7F	; 127
    144a:	3f 2e       	mov	r3, r31
    144c:	36 fe       	sbrs	r3, 6
    144e:	0d c0       	rjmp	.+26     	; 0x146a <vfprintf+0x2ca>
    1450:	23 2d       	mov	r18, r3
    1452:	2e 7f       	andi	r18, 0xFE	; 254
    1454:	a2 2e       	mov	r10, r18
    1456:	89 14       	cp	r8, r9
    1458:	58 f4       	brcc	.+22     	; 0x1470 <vfprintf+0x2d0>
    145a:	34 fe       	sbrs	r3, 4
    145c:	0b c0       	rjmp	.+22     	; 0x1474 <vfprintf+0x2d4>
    145e:	32 fc       	sbrc	r3, 2
    1460:	09 c0       	rjmp	.+18     	; 0x1474 <vfprintf+0x2d4>
    1462:	83 2d       	mov	r24, r3
    1464:	8e 7e       	andi	r24, 0xEE	; 238
    1466:	a8 2e       	mov	r10, r24
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <vfprintf+0x2d4>
    146a:	b8 2c       	mov	r11, r8
    146c:	a3 2c       	mov	r10, r3
    146e:	03 c0       	rjmp	.+6      	; 0x1476 <vfprintf+0x2d6>
    1470:	b8 2c       	mov	r11, r8
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <vfprintf+0x2d6>
    1474:	b9 2c       	mov	r11, r9
    1476:	a4 fe       	sbrs	r10, 4
    1478:	0f c0       	rjmp	.+30     	; 0x1498 <vfprintf+0x2f8>
    147a:	fe 01       	movw	r30, r28
    147c:	e8 0d       	add	r30, r8
    147e:	f1 1d       	adc	r31, r1
    1480:	80 81       	ld	r24, Z
    1482:	80 33       	cpi	r24, 0x30	; 48
    1484:	21 f4       	brne	.+8      	; 0x148e <vfprintf+0x2ee>
    1486:	9a 2d       	mov	r25, r10
    1488:	99 7e       	andi	r25, 0xE9	; 233
    148a:	a9 2e       	mov	r10, r25
    148c:	09 c0       	rjmp	.+18     	; 0x14a0 <vfprintf+0x300>
    148e:	a2 fe       	sbrs	r10, 2
    1490:	06 c0       	rjmp	.+12     	; 0x149e <vfprintf+0x2fe>
    1492:	b3 94       	inc	r11
    1494:	b3 94       	inc	r11
    1496:	04 c0       	rjmp	.+8      	; 0x14a0 <vfprintf+0x300>
    1498:	8a 2d       	mov	r24, r10
    149a:	86 78       	andi	r24, 0x86	; 134
    149c:	09 f0       	breq	.+2      	; 0x14a0 <vfprintf+0x300>
    149e:	b3 94       	inc	r11
    14a0:	a3 fc       	sbrc	r10, 3
    14a2:	11 c0       	rjmp	.+34     	; 0x14c6 <vfprintf+0x326>
    14a4:	a0 fe       	sbrs	r10, 0
    14a6:	06 c0       	rjmp	.+12     	; 0x14b4 <vfprintf+0x314>
    14a8:	b2 14       	cp	r11, r2
    14aa:	88 f4       	brcc	.+34     	; 0x14ce <vfprintf+0x32e>
    14ac:	28 0c       	add	r2, r8
    14ae:	92 2c       	mov	r9, r2
    14b0:	9b 18       	sub	r9, r11
    14b2:	0e c0       	rjmp	.+28     	; 0x14d0 <vfprintf+0x330>
    14b4:	b2 14       	cp	r11, r2
    14b6:	60 f4       	brcc	.+24     	; 0x14d0 <vfprintf+0x330>
    14b8:	b6 01       	movw	r22, r12
    14ba:	80 e2       	ldi	r24, 0x20	; 32
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    14c2:	b3 94       	inc	r11
    14c4:	f7 cf       	rjmp	.-18     	; 0x14b4 <vfprintf+0x314>
    14c6:	b2 14       	cp	r11, r2
    14c8:	18 f4       	brcc	.+6      	; 0x14d0 <vfprintf+0x330>
    14ca:	2b 18       	sub	r2, r11
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <vfprintf+0x332>
    14ce:	98 2c       	mov	r9, r8
    14d0:	21 2c       	mov	r2, r1
    14d2:	a4 fe       	sbrs	r10, 4
    14d4:	10 c0       	rjmp	.+32     	; 0x14f6 <vfprintf+0x356>
    14d6:	b6 01       	movw	r22, r12
    14d8:	80 e3       	ldi	r24, 0x30	; 48
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    14e0:	a2 fe       	sbrs	r10, 2
    14e2:	17 c0       	rjmp	.+46     	; 0x1512 <vfprintf+0x372>
    14e4:	a1 fc       	sbrc	r10, 1
    14e6:	03 c0       	rjmp	.+6      	; 0x14ee <vfprintf+0x34e>
    14e8:	88 e7       	ldi	r24, 0x78	; 120
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <vfprintf+0x352>
    14ee:	88 e5       	ldi	r24, 0x58	; 88
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	b6 01       	movw	r22, r12
    14f4:	0c c0       	rjmp	.+24     	; 0x150e <vfprintf+0x36e>
    14f6:	8a 2d       	mov	r24, r10
    14f8:	86 78       	andi	r24, 0x86	; 134
    14fa:	59 f0       	breq	.+22     	; 0x1512 <vfprintf+0x372>
    14fc:	a1 fe       	sbrs	r10, 1
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <vfprintf+0x364>
    1500:	8b e2       	ldi	r24, 0x2B	; 43
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <vfprintf+0x366>
    1504:	80 e2       	ldi	r24, 0x20	; 32
    1506:	a7 fc       	sbrc	r10, 7
    1508:	8d e2       	ldi	r24, 0x2D	; 45
    150a:	b6 01       	movw	r22, r12
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    1512:	89 14       	cp	r8, r9
    1514:	38 f4       	brcc	.+14     	; 0x1524 <vfprintf+0x384>
    1516:	b6 01       	movw	r22, r12
    1518:	80 e3       	ldi	r24, 0x30	; 48
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    1520:	9a 94       	dec	r9
    1522:	f7 cf       	rjmp	.-18     	; 0x1512 <vfprintf+0x372>
    1524:	8a 94       	dec	r8
    1526:	f3 01       	movw	r30, r6
    1528:	e8 0d       	add	r30, r8
    152a:	f1 1d       	adc	r31, r1
    152c:	80 81       	ld	r24, Z
    152e:	b6 01       	movw	r22, r12
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    1536:	81 10       	cpse	r8, r1
    1538:	f5 cf       	rjmp	.-22     	; 0x1524 <vfprintf+0x384>
    153a:	22 20       	and	r2, r2
    153c:	09 f4       	brne	.+2      	; 0x1540 <vfprintf+0x3a0>
    153e:	42 ce       	rjmp	.-892    	; 0x11c4 <vfprintf+0x24>
    1540:	b6 01       	movw	r22, r12
    1542:	80 e2       	ldi	r24, 0x20	; 32
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    154a:	2a 94       	dec	r2
    154c:	f6 cf       	rjmp	.-20     	; 0x153a <vfprintf+0x39a>
    154e:	f6 01       	movw	r30, r12
    1550:	86 81       	ldd	r24, Z+6	; 0x06
    1552:	97 81       	ldd	r25, Z+7	; 0x07
    1554:	02 c0       	rjmp	.+4      	; 0x155a <vfprintf+0x3ba>
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	9f ef       	ldi	r25, 0xFF	; 255
    155a:	2b 96       	adiw	r28, 0x0b	; 11
    155c:	e2 e1       	ldi	r30, 0x12	; 18
    155e:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__epilogue_restores__>

00001562 <calloc>:
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	86 9f       	mul	r24, r22
    156c:	80 01       	movw	r16, r0
    156e:	87 9f       	mul	r24, r23
    1570:	10 0d       	add	r17, r0
    1572:	96 9f       	mul	r25, r22
    1574:	10 0d       	add	r17, r0
    1576:	11 24       	eor	r1, r1
    1578:	c8 01       	movw	r24, r16
    157a:	0e 94 cd 0a 	call	0x159a	; 0x159a <malloc>
    157e:	ec 01       	movw	r28, r24
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	29 f0       	breq	.+10     	; 0x158e <calloc+0x2c>
    1584:	a8 01       	movw	r20, r16
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <memset>
    158e:	ce 01       	movw	r24, r28
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	08 95       	ret

0000159a <malloc>:
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	82 30       	cpi	r24, 0x02	; 2
    15a4:	91 05       	cpc	r25, r1
    15a6:	10 f4       	brcc	.+4      	; 0x15ac <malloc+0x12>
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	e0 91 89 03 	lds	r30, 0x0389	; 0x800389 <__flp>
    15b0:	f0 91 8a 03 	lds	r31, 0x038A	; 0x80038a <__flp+0x1>
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	a0 e0       	ldi	r26, 0x00	; 0
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	30 97       	sbiw	r30, 0x00	; 0
    15be:	19 f1       	breq	.+70     	; 0x1606 <malloc+0x6c>
    15c0:	40 81       	ld	r20, Z
    15c2:	51 81       	ldd	r21, Z+1	; 0x01
    15c4:	02 81       	ldd	r16, Z+2	; 0x02
    15c6:	13 81       	ldd	r17, Z+3	; 0x03
    15c8:	48 17       	cp	r20, r24
    15ca:	59 07       	cpc	r21, r25
    15cc:	c8 f0       	brcs	.+50     	; 0x1600 <malloc+0x66>
    15ce:	84 17       	cp	r24, r20
    15d0:	95 07       	cpc	r25, r21
    15d2:	69 f4       	brne	.+26     	; 0x15ee <malloc+0x54>
    15d4:	10 97       	sbiw	r26, 0x00	; 0
    15d6:	31 f0       	breq	.+12     	; 0x15e4 <malloc+0x4a>
    15d8:	12 96       	adiw	r26, 0x02	; 2
    15da:	0c 93       	st	X, r16
    15dc:	12 97       	sbiw	r26, 0x02	; 2
    15de:	13 96       	adiw	r26, 0x03	; 3
    15e0:	1c 93       	st	X, r17
    15e2:	27 c0       	rjmp	.+78     	; 0x1632 <malloc+0x98>
    15e4:	00 93 89 03 	sts	0x0389, r16	; 0x800389 <__flp>
    15e8:	10 93 8a 03 	sts	0x038A, r17	; 0x80038a <__flp+0x1>
    15ec:	22 c0       	rjmp	.+68     	; 0x1632 <malloc+0x98>
    15ee:	21 15       	cp	r18, r1
    15f0:	31 05       	cpc	r19, r1
    15f2:	19 f0       	breq	.+6      	; 0x15fa <malloc+0x60>
    15f4:	42 17       	cp	r20, r18
    15f6:	53 07       	cpc	r21, r19
    15f8:	18 f4       	brcc	.+6      	; 0x1600 <malloc+0x66>
    15fa:	9a 01       	movw	r18, r20
    15fc:	bd 01       	movw	r22, r26
    15fe:	ef 01       	movw	r28, r30
    1600:	df 01       	movw	r26, r30
    1602:	f8 01       	movw	r30, r16
    1604:	db cf       	rjmp	.-74     	; 0x15bc <malloc+0x22>
    1606:	21 15       	cp	r18, r1
    1608:	31 05       	cpc	r19, r1
    160a:	f9 f0       	breq	.+62     	; 0x164a <malloc+0xb0>
    160c:	28 1b       	sub	r18, r24
    160e:	39 0b       	sbc	r19, r25
    1610:	24 30       	cpi	r18, 0x04	; 4
    1612:	31 05       	cpc	r19, r1
    1614:	80 f4       	brcc	.+32     	; 0x1636 <malloc+0x9c>
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	9b 81       	ldd	r25, Y+3	; 0x03
    161a:	61 15       	cp	r22, r1
    161c:	71 05       	cpc	r23, r1
    161e:	21 f0       	breq	.+8      	; 0x1628 <malloc+0x8e>
    1620:	fb 01       	movw	r30, r22
    1622:	93 83       	std	Z+3, r25	; 0x03
    1624:	82 83       	std	Z+2, r24	; 0x02
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <malloc+0x96>
    1628:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <__flp+0x1>
    162c:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <__flp>
    1630:	fe 01       	movw	r30, r28
    1632:	32 96       	adiw	r30, 0x02	; 2
    1634:	44 c0       	rjmp	.+136    	; 0x16be <malloc+0x124>
    1636:	fe 01       	movw	r30, r28
    1638:	e2 0f       	add	r30, r18
    163a:	f3 1f       	adc	r31, r19
    163c:	81 93       	st	Z+, r24
    163e:	91 93       	st	Z+, r25
    1640:	22 50       	subi	r18, 0x02	; 2
    1642:	31 09       	sbc	r19, r1
    1644:	39 83       	std	Y+1, r19	; 0x01
    1646:	28 83       	st	Y, r18
    1648:	3a c0       	rjmp	.+116    	; 0x16be <malloc+0x124>
    164a:	20 91 87 03 	lds	r18, 0x0387	; 0x800387 <__brkval>
    164e:	30 91 88 03 	lds	r19, 0x0388	; 0x800388 <__brkval+0x1>
    1652:	23 2b       	or	r18, r19
    1654:	41 f4       	brne	.+16     	; 0x1666 <malloc+0xcc>
    1656:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    165a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    165e:	30 93 88 03 	sts	0x0388, r19	; 0x800388 <__brkval+0x1>
    1662:	20 93 87 03 	sts	0x0387, r18	; 0x800387 <__brkval>
    1666:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    166a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    166e:	21 15       	cp	r18, r1
    1670:	31 05       	cpc	r19, r1
    1672:	41 f4       	brne	.+16     	; 0x1684 <malloc+0xea>
    1674:	2d b7       	in	r18, 0x3d	; 61
    1676:	3e b7       	in	r19, 0x3e	; 62
    1678:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    167c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1680:	24 1b       	sub	r18, r20
    1682:	35 0b       	sbc	r19, r21
    1684:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <__brkval>
    1688:	f0 91 88 03 	lds	r31, 0x0388	; 0x800388 <__brkval+0x1>
    168c:	e2 17       	cp	r30, r18
    168e:	f3 07       	cpc	r31, r19
    1690:	a0 f4       	brcc	.+40     	; 0x16ba <malloc+0x120>
    1692:	2e 1b       	sub	r18, r30
    1694:	3f 0b       	sbc	r19, r31
    1696:	28 17       	cp	r18, r24
    1698:	39 07       	cpc	r19, r25
    169a:	78 f0       	brcs	.+30     	; 0x16ba <malloc+0x120>
    169c:	ac 01       	movw	r20, r24
    169e:	4e 5f       	subi	r20, 0xFE	; 254
    16a0:	5f 4f       	sbci	r21, 0xFF	; 255
    16a2:	24 17       	cp	r18, r20
    16a4:	35 07       	cpc	r19, r21
    16a6:	48 f0       	brcs	.+18     	; 0x16ba <malloc+0x120>
    16a8:	4e 0f       	add	r20, r30
    16aa:	5f 1f       	adc	r21, r31
    16ac:	50 93 88 03 	sts	0x0388, r21	; 0x800388 <__brkval+0x1>
    16b0:	40 93 87 03 	sts	0x0387, r20	; 0x800387 <__brkval>
    16b4:	81 93       	st	Z+, r24
    16b6:	91 93       	st	Z+, r25
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <malloc+0x124>
    16ba:	e0 e0       	ldi	r30, 0x00	; 0
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	cf 01       	movw	r24, r30
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	08 95       	ret

000016ca <free>:
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <free+0xa>
    16d2:	81 c0       	rjmp	.+258    	; 0x17d6 <free+0x10c>
    16d4:	fc 01       	movw	r30, r24
    16d6:	32 97       	sbiw	r30, 0x02	; 2
    16d8:	13 82       	std	Z+3, r1	; 0x03
    16da:	12 82       	std	Z+2, r1	; 0x02
    16dc:	a0 91 89 03 	lds	r26, 0x0389	; 0x800389 <__flp>
    16e0:	b0 91 8a 03 	lds	r27, 0x038A	; 0x80038a <__flp+0x1>
    16e4:	10 97       	sbiw	r26, 0x00	; 0
    16e6:	81 f4       	brne	.+32     	; 0x1708 <free+0x3e>
    16e8:	20 81       	ld	r18, Z
    16ea:	31 81       	ldd	r19, Z+1	; 0x01
    16ec:	82 0f       	add	r24, r18
    16ee:	93 1f       	adc	r25, r19
    16f0:	20 91 87 03 	lds	r18, 0x0387	; 0x800387 <__brkval>
    16f4:	30 91 88 03 	lds	r19, 0x0388	; 0x800388 <__brkval+0x1>
    16f8:	28 17       	cp	r18, r24
    16fa:	39 07       	cpc	r19, r25
    16fc:	51 f5       	brne	.+84     	; 0x1752 <free+0x88>
    16fe:	f0 93 88 03 	sts	0x0388, r31	; 0x800388 <__brkval+0x1>
    1702:	e0 93 87 03 	sts	0x0387, r30	; 0x800387 <__brkval>
    1706:	67 c0       	rjmp	.+206    	; 0x17d6 <free+0x10c>
    1708:	ed 01       	movw	r28, r26
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	ce 17       	cp	r28, r30
    1710:	df 07       	cpc	r29, r31
    1712:	40 f4       	brcc	.+16     	; 0x1724 <free+0x5a>
    1714:	4a 81       	ldd	r20, Y+2	; 0x02
    1716:	5b 81       	ldd	r21, Y+3	; 0x03
    1718:	9e 01       	movw	r18, r28
    171a:	41 15       	cp	r20, r1
    171c:	51 05       	cpc	r21, r1
    171e:	f1 f0       	breq	.+60     	; 0x175c <free+0x92>
    1720:	ea 01       	movw	r28, r20
    1722:	f5 cf       	rjmp	.-22     	; 0x170e <free+0x44>
    1724:	d3 83       	std	Z+3, r29	; 0x03
    1726:	c2 83       	std	Z+2, r28	; 0x02
    1728:	40 81       	ld	r20, Z
    172a:	51 81       	ldd	r21, Z+1	; 0x01
    172c:	84 0f       	add	r24, r20
    172e:	95 1f       	adc	r25, r21
    1730:	c8 17       	cp	r28, r24
    1732:	d9 07       	cpc	r29, r25
    1734:	59 f4       	brne	.+22     	; 0x174c <free+0x82>
    1736:	88 81       	ld	r24, Y
    1738:	99 81       	ldd	r25, Y+1	; 0x01
    173a:	84 0f       	add	r24, r20
    173c:	95 1f       	adc	r25, r21
    173e:	02 96       	adiw	r24, 0x02	; 2
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	80 83       	st	Z, r24
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	9b 81       	ldd	r25, Y+3	; 0x03
    1748:	93 83       	std	Z+3, r25	; 0x03
    174a:	82 83       	std	Z+2, r24	; 0x02
    174c:	21 15       	cp	r18, r1
    174e:	31 05       	cpc	r19, r1
    1750:	29 f4       	brne	.+10     	; 0x175c <free+0x92>
    1752:	f0 93 8a 03 	sts	0x038A, r31	; 0x80038a <__flp+0x1>
    1756:	e0 93 89 03 	sts	0x0389, r30	; 0x800389 <__flp>
    175a:	3d c0       	rjmp	.+122    	; 0x17d6 <free+0x10c>
    175c:	e9 01       	movw	r28, r18
    175e:	fb 83       	std	Y+3, r31	; 0x03
    1760:	ea 83       	std	Y+2, r30	; 0x02
    1762:	49 91       	ld	r20, Y+
    1764:	59 91       	ld	r21, Y+
    1766:	c4 0f       	add	r28, r20
    1768:	d5 1f       	adc	r29, r21
    176a:	ec 17       	cp	r30, r28
    176c:	fd 07       	cpc	r31, r29
    176e:	61 f4       	brne	.+24     	; 0x1788 <free+0xbe>
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	84 0f       	add	r24, r20
    1776:	95 1f       	adc	r25, r21
    1778:	02 96       	adiw	r24, 0x02	; 2
    177a:	e9 01       	movw	r28, r18
    177c:	99 83       	std	Y+1, r25	; 0x01
    177e:	88 83       	st	Y, r24
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	9b 83       	std	Y+3, r25	; 0x03
    1786:	8a 83       	std	Y+2, r24	; 0x02
    1788:	e0 e0       	ldi	r30, 0x00	; 0
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	12 96       	adiw	r26, 0x02	; 2
    178e:	8d 91       	ld	r24, X+
    1790:	9c 91       	ld	r25, X
    1792:	13 97       	sbiw	r26, 0x03	; 3
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	19 f0       	breq	.+6      	; 0x179e <free+0xd4>
    1798:	fd 01       	movw	r30, r26
    179a:	dc 01       	movw	r26, r24
    179c:	f7 cf       	rjmp	.-18     	; 0x178c <free+0xc2>
    179e:	8d 91       	ld	r24, X+
    17a0:	9c 91       	ld	r25, X
    17a2:	11 97       	sbiw	r26, 0x01	; 1
    17a4:	9d 01       	movw	r18, r26
    17a6:	2e 5f       	subi	r18, 0xFE	; 254
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	82 0f       	add	r24, r18
    17ac:	93 1f       	adc	r25, r19
    17ae:	20 91 87 03 	lds	r18, 0x0387	; 0x800387 <__brkval>
    17b2:	30 91 88 03 	lds	r19, 0x0388	; 0x800388 <__brkval+0x1>
    17b6:	28 17       	cp	r18, r24
    17b8:	39 07       	cpc	r19, r25
    17ba:	69 f4       	brne	.+26     	; 0x17d6 <free+0x10c>
    17bc:	30 97       	sbiw	r30, 0x00	; 0
    17be:	29 f4       	brne	.+10     	; 0x17ca <free+0x100>
    17c0:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <__flp+0x1>
    17c4:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <__flp>
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <free+0x104>
    17ca:	13 82       	std	Z+3, r1	; 0x03
    17cc:	12 82       	std	Z+2, r1	; 0x02
    17ce:	b0 93 88 03 	sts	0x0388, r27	; 0x800388 <__brkval+0x1>
    17d2:	a0 93 87 03 	sts	0x0387, r26	; 0x800387 <__brkval>
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	08 95       	ret

000017dc <strnlen_P>:
    17dc:	fc 01       	movw	r30, r24
    17de:	05 90       	lpm	r0, Z+
    17e0:	61 50       	subi	r22, 0x01	; 1
    17e2:	70 40       	sbci	r23, 0x00	; 0
    17e4:	01 10       	cpse	r0, r1
    17e6:	d8 f7       	brcc	.-10     	; 0x17de <strnlen_P+0x2>
    17e8:	80 95       	com	r24
    17ea:	90 95       	com	r25
    17ec:	8e 0f       	add	r24, r30
    17ee:	9f 1f       	adc	r25, r31
    17f0:	08 95       	ret

000017f2 <memset>:
    17f2:	dc 01       	movw	r26, r24
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <memset+0x6>
    17f6:	6d 93       	st	X+, r22
    17f8:	41 50       	subi	r20, 0x01	; 1
    17fa:	50 40       	sbci	r21, 0x00	; 0
    17fc:	e0 f7       	brcc	.-8      	; 0x17f6 <memset+0x4>
    17fe:	08 95       	ret

00001800 <strnlen>:
    1800:	fc 01       	movw	r30, r24
    1802:	61 50       	subi	r22, 0x01	; 1
    1804:	70 40       	sbci	r23, 0x00	; 0
    1806:	01 90       	ld	r0, Z+
    1808:	01 10       	cpse	r0, r1
    180a:	d8 f7       	brcc	.-10     	; 0x1802 <strnlen+0x2>
    180c:	80 95       	com	r24
    180e:	90 95       	com	r25
    1810:	8e 0f       	add	r24, r30
    1812:	9f 1f       	adc	r25, r31
    1814:	08 95       	ret

00001816 <fputc>:
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	fb 01       	movw	r30, r22
    1820:	23 81       	ldd	r18, Z+3	; 0x03
    1822:	21 fd       	sbrc	r18, 1
    1824:	03 c0       	rjmp	.+6      	; 0x182c <fputc+0x16>
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	9f ef       	ldi	r25, 0xFF	; 255
    182a:	2c c0       	rjmp	.+88     	; 0x1884 <fputc+0x6e>
    182c:	22 ff       	sbrs	r18, 2
    182e:	16 c0       	rjmp	.+44     	; 0x185c <fputc+0x46>
    1830:	46 81       	ldd	r20, Z+6	; 0x06
    1832:	57 81       	ldd	r21, Z+7	; 0x07
    1834:	24 81       	ldd	r18, Z+4	; 0x04
    1836:	35 81       	ldd	r19, Z+5	; 0x05
    1838:	42 17       	cp	r20, r18
    183a:	53 07       	cpc	r21, r19
    183c:	44 f4       	brge	.+16     	; 0x184e <fputc+0x38>
    183e:	a0 81       	ld	r26, Z
    1840:	b1 81       	ldd	r27, Z+1	; 0x01
    1842:	9d 01       	movw	r18, r26
    1844:	2f 5f       	subi	r18, 0xFF	; 255
    1846:	3f 4f       	sbci	r19, 0xFF	; 255
    1848:	31 83       	std	Z+1, r19	; 0x01
    184a:	20 83       	st	Z, r18
    184c:	8c 93       	st	X, r24
    184e:	26 81       	ldd	r18, Z+6	; 0x06
    1850:	37 81       	ldd	r19, Z+7	; 0x07
    1852:	2f 5f       	subi	r18, 0xFF	; 255
    1854:	3f 4f       	sbci	r19, 0xFF	; 255
    1856:	37 83       	std	Z+7, r19	; 0x07
    1858:	26 83       	std	Z+6, r18	; 0x06
    185a:	14 c0       	rjmp	.+40     	; 0x1884 <fputc+0x6e>
    185c:	8b 01       	movw	r16, r22
    185e:	ec 01       	movw	r28, r24
    1860:	fb 01       	movw	r30, r22
    1862:	00 84       	ldd	r0, Z+8	; 0x08
    1864:	f1 85       	ldd	r31, Z+9	; 0x09
    1866:	e0 2d       	mov	r30, r0
    1868:	09 95       	icall
    186a:	89 2b       	or	r24, r25
    186c:	e1 f6       	brne	.-72     	; 0x1826 <fputc+0x10>
    186e:	d8 01       	movw	r26, r16
    1870:	16 96       	adiw	r26, 0x06	; 6
    1872:	8d 91       	ld	r24, X+
    1874:	9c 91       	ld	r25, X
    1876:	17 97       	sbiw	r26, 0x07	; 7
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	17 96       	adiw	r26, 0x07	; 7
    187c:	9c 93       	st	X, r25
    187e:	8e 93       	st	-X, r24
    1880:	16 97       	sbiw	r26, 0x06	; 6
    1882:	ce 01       	movw	r24, r28
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	08 95       	ret

0000188e <__ultoa_invert>:
    188e:	fa 01       	movw	r30, r20
    1890:	aa 27       	eor	r26, r26
    1892:	28 30       	cpi	r18, 0x08	; 8
    1894:	51 f1       	breq	.+84     	; 0x18ea <__ultoa_invert+0x5c>
    1896:	20 31       	cpi	r18, 0x10	; 16
    1898:	81 f1       	breq	.+96     	; 0x18fa <__ultoa_invert+0x6c>
    189a:	e8 94       	clt
    189c:	6f 93       	push	r22
    189e:	6e 7f       	andi	r22, 0xFE	; 254
    18a0:	6e 5f       	subi	r22, 0xFE	; 254
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	8f 4f       	sbci	r24, 0xFF	; 255
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	af 4f       	sbci	r26, 0xFF	; 255
    18aa:	b1 e0       	ldi	r27, 0x01	; 1
    18ac:	3e d0       	rcall	.+124    	; 0x192a <__ultoa_invert+0x9c>
    18ae:	b4 e0       	ldi	r27, 0x04	; 4
    18b0:	3c d0       	rcall	.+120    	; 0x192a <__ultoa_invert+0x9c>
    18b2:	67 0f       	add	r22, r23
    18b4:	78 1f       	adc	r23, r24
    18b6:	89 1f       	adc	r24, r25
    18b8:	9a 1f       	adc	r25, r26
    18ba:	a1 1d       	adc	r26, r1
    18bc:	68 0f       	add	r22, r24
    18be:	79 1f       	adc	r23, r25
    18c0:	8a 1f       	adc	r24, r26
    18c2:	91 1d       	adc	r25, r1
    18c4:	a1 1d       	adc	r26, r1
    18c6:	6a 0f       	add	r22, r26
    18c8:	71 1d       	adc	r23, r1
    18ca:	81 1d       	adc	r24, r1
    18cc:	91 1d       	adc	r25, r1
    18ce:	a1 1d       	adc	r26, r1
    18d0:	20 d0       	rcall	.+64     	; 0x1912 <__ultoa_invert+0x84>
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <__ultoa_invert+0x48>
    18d4:	68 94       	set
    18d6:	3f 91       	pop	r19
    18d8:	2a e0       	ldi	r18, 0x0A	; 10
    18da:	26 9f       	mul	r18, r22
    18dc:	11 24       	eor	r1, r1
    18de:	30 19       	sub	r19, r0
    18e0:	30 5d       	subi	r19, 0xD0	; 208
    18e2:	31 93       	st	Z+, r19
    18e4:	de f6       	brtc	.-74     	; 0x189c <__ultoa_invert+0xe>
    18e6:	cf 01       	movw	r24, r30
    18e8:	08 95       	ret
    18ea:	46 2f       	mov	r20, r22
    18ec:	47 70       	andi	r20, 0x07	; 7
    18ee:	40 5d       	subi	r20, 0xD0	; 208
    18f0:	41 93       	st	Z+, r20
    18f2:	b3 e0       	ldi	r27, 0x03	; 3
    18f4:	0f d0       	rcall	.+30     	; 0x1914 <__ultoa_invert+0x86>
    18f6:	c9 f7       	brne	.-14     	; 0x18ea <__ultoa_invert+0x5c>
    18f8:	f6 cf       	rjmp	.-20     	; 0x18e6 <__ultoa_invert+0x58>
    18fa:	46 2f       	mov	r20, r22
    18fc:	4f 70       	andi	r20, 0x0F	; 15
    18fe:	40 5d       	subi	r20, 0xD0	; 208
    1900:	4a 33       	cpi	r20, 0x3A	; 58
    1902:	18 f0       	brcs	.+6      	; 0x190a <__ultoa_invert+0x7c>
    1904:	49 5d       	subi	r20, 0xD9	; 217
    1906:	31 fd       	sbrc	r19, 1
    1908:	40 52       	subi	r20, 0x20	; 32
    190a:	41 93       	st	Z+, r20
    190c:	02 d0       	rcall	.+4      	; 0x1912 <__ultoa_invert+0x84>
    190e:	a9 f7       	brne	.-22     	; 0x18fa <__ultoa_invert+0x6c>
    1910:	ea cf       	rjmp	.-44     	; 0x18e6 <__ultoa_invert+0x58>
    1912:	b4 e0       	ldi	r27, 0x04	; 4
    1914:	a6 95       	lsr	r26
    1916:	97 95       	ror	r25
    1918:	87 95       	ror	r24
    191a:	77 95       	ror	r23
    191c:	67 95       	ror	r22
    191e:	ba 95       	dec	r27
    1920:	c9 f7       	brne	.-14     	; 0x1914 <__ultoa_invert+0x86>
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	61 05       	cpc	r22, r1
    1926:	71 05       	cpc	r23, r1
    1928:	08 95       	ret
    192a:	9b 01       	movw	r18, r22
    192c:	ac 01       	movw	r20, r24
    192e:	0a 2e       	mov	r0, r26
    1930:	06 94       	lsr	r0
    1932:	57 95       	ror	r21
    1934:	47 95       	ror	r20
    1936:	37 95       	ror	r19
    1938:	27 95       	ror	r18
    193a:	ba 95       	dec	r27
    193c:	c9 f7       	brne	.-14     	; 0x1930 <__ultoa_invert+0xa2>
    193e:	62 0f       	add	r22, r18
    1940:	73 1f       	adc	r23, r19
    1942:	84 1f       	adc	r24, r20
    1944:	95 1f       	adc	r25, r21
    1946:	a0 1d       	adc	r26, r0
    1948:	08 95       	ret

0000194a <__prologue_saves__>:
    194a:	2f 92       	push	r2
    194c:	3f 92       	push	r3
    194e:	4f 92       	push	r4
    1950:	5f 92       	push	r5
    1952:	6f 92       	push	r6
    1954:	7f 92       	push	r7
    1956:	8f 92       	push	r8
    1958:	9f 92       	push	r9
    195a:	af 92       	push	r10
    195c:	bf 92       	push	r11
    195e:	cf 92       	push	r12
    1960:	df 92       	push	r13
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	ca 1b       	sub	r28, r26
    1974:	db 0b       	sbc	r29, r27
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	09 94       	ijmp

00001982 <__epilogue_restores__>:
    1982:	2a 88       	ldd	r2, Y+18	; 0x12
    1984:	39 88       	ldd	r3, Y+17	; 0x11
    1986:	48 88       	ldd	r4, Y+16	; 0x10
    1988:	5f 84       	ldd	r5, Y+15	; 0x0f
    198a:	6e 84       	ldd	r6, Y+14	; 0x0e
    198c:	7d 84       	ldd	r7, Y+13	; 0x0d
    198e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1990:	9b 84       	ldd	r9, Y+11	; 0x0b
    1992:	aa 84       	ldd	r10, Y+10	; 0x0a
    1994:	b9 84       	ldd	r11, Y+9	; 0x09
    1996:	c8 84       	ldd	r12, Y+8	; 0x08
    1998:	df 80       	ldd	r13, Y+7	; 0x07
    199a:	ee 80       	ldd	r14, Y+6	; 0x06
    199c:	fd 80       	ldd	r15, Y+5	; 0x05
    199e:	0c 81       	ldd	r16, Y+4	; 0x04
    19a0:	1b 81       	ldd	r17, Y+3	; 0x03
    19a2:	aa 81       	ldd	r26, Y+2	; 0x02
    19a4:	b9 81       	ldd	r27, Y+1	; 0x01
    19a6:	ce 0f       	add	r28, r30
    19a8:	d1 1d       	adc	r29, r1
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	ed 01       	movw	r28, r26
    19b6:	08 95       	ret

000019b8 <_exit>:
    19b8:	f8 94       	cli

000019ba <__stop_program>:
    19ba:	ff cf       	rjmp	.-2      	; 0x19ba <__stop_program>
