
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001be  00800100  00001e80  00001f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  008002be  008002be  000020d2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002130  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e0d  00000000  00000000  0000242c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001406  00000000  00000000  00005239  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001769  00000000  00000000  0000663f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000704  00000000  00000000  00007da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093b  00000000  00000000  000084ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013ab  00000000  00000000  00008de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000a192  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	e0 e8       	ldi	r30, 0x80	; 128
     6d4:	fe e1       	ldi	r31, 0x1E	; 30
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	ae 3b       	cpi	r26, 0xBE	; 190
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	ae eb       	ldi	r26, 0xBE	; 190
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	a8 36       	cpi	r26, 0x68	; 104
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 90 05 	call	0xb20	; 0xb20 <main>
     6f6:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <adc_init>:
#include <avr/io.h>


void adc_init(){
	// Set pin as output
	DDRD |= (1<<DDD4);
     6fe:	81 b3       	in	r24, 0x11	; 17
     700:	80 61       	ori	r24, 0x10	; 16
     702:	81 bb       	out	0x11, r24	; 17
	
	// Toggle output pin on compare match with counter
	TCCR3A = (1<<COM3A0);
     704:	80 e4       	ldi	r24, 0x40	; 64
     706:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fc08b>
	
	// No clock prescaling on counter (i.e. update every clock cycle)
	// Set counter mode to CTC (clear on match)
	TCCR3B = (1<<WGM32)|(1<<CS30);
     70a:	89 e0       	ldi	r24, 0x09	; 9
     70c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fc08a>
	
	// Value to be matched (0 = toggle output each cycle)
	OCR3A = 0;
     710:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     714:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     718:	08 95       	ret

0000071a <adc_read>:
		uint8_t digitalVal = 0;
		
		// Write anything to the ADC to trigger a conversion
		// Triggers the chip select and write control strobe when external memory interface is active
		volatile char* mem_adc = (char *) DEF_ADR_ADC;
		mem_adc[0] = 0;
     71a:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x1098>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     71e:	97 e2       	ldi	r25, 0x27	; 39
     720:	9a 95       	dec	r25
     722:	f1 f7       	brne	.-4      	; 0x720 <adc_read+0x6>
     724:	00 00       	nop
		uint16_t convTime = DEF_ADC_CONV_TIME;
		_delay_us(convTime);
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
     726:	85 30       	cpi	r24, 0x05	; 5
     728:	40 f0       	brcs	.+16     	; 0x73a <adc_read+0x20>
}


volatile uint8_t adc_read(uint8_t channel){
		// Set up return data
		uint8_t digitalVal = 0;
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e c0       	rjmp	.+28     	; 0x74a <adc_read+0x30>
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
			for (int i = 0; i <= channel; ++i){
				digitalVal = mem_adc[i];
     72e:	f9 01       	movw	r30, r18
     730:	fc 5e       	subi	r31, 0xEC	; 236
     732:	90 81       	ld	r25, Z
		_delay_us(convTime);
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
			for (int i = 0; i <= channel; ++i){
     734:	2f 5f       	subi	r18, 0xFF	; 255
     736:	3f 4f       	sbci	r19, 0xFF	; 255
     738:	03 c0       	rjmp	.+6      	; 0x740 <adc_read+0x26>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	48 2f       	mov	r20, r24
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	42 17       	cp	r20, r18
     746:	53 07       	cpc	r21, r19
     748:	94 f7       	brge	.-28     	; 0x72e <adc_read+0x14>
				digitalVal = mem_adc[i];
			}
		}
		return digitalVal;
     74a:	89 2f       	mov	r24, r25
     74c:	08 95       	ret

0000074e <can_init>:

/*
* Initialize CAN Bus controller via SPI, in loopback mode (for testing)
*/
void can_init_loopback(void){
	mcp2515_init_loopback();
     74e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <mcp2515_init>
     752:	08 95       	ret

00000754 <can_recv>:

/*
* Receive a CAN message via MCP2515
* @param	msg		Received CAN Message
*/
void can_recv(CanMsg* msg){
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	8c 01       	movw	r16, r24
	msg->id = (mcp2515_read(MCP_RXB0SIDH)<<3); // Read top 8 bits
     75e:	81 e6       	ldi	r24, 0x61	; 97
     760:	0e 94 d1 06 	call	0xda2	; 0xda2 <mcp2515_read>
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	88 0f       	add	r24, r24
     768:	99 1f       	adc	r25, r25
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	88 0f       	add	r24, r24
     770:	99 1f       	adc	r25, r25
     772:	f8 01       	movw	r30, r16
     774:	91 83       	std	Z+1, r25	; 0x01
     776:	80 83       	st	Z, r24
	msg->id |= (mcp2515_read(MCP_RXB0SIDL)>>5) & 0b111; // Read bottom 3 bits
     778:	82 e6       	ldi	r24, 0x62	; 98
     77a:	0e 94 d1 06 	call	0xda2	; 0xda2 <mcp2515_read>
     77e:	28 2f       	mov	r18, r24
     780:	22 95       	swap	r18
     782:	26 95       	lsr	r18
     784:	27 70       	andi	r18, 0x07	; 7
     786:	f8 01       	movw	r30, r16
     788:	80 81       	ld	r24, Z
     78a:	91 81       	ldd	r25, Z+1	; 0x01
     78c:	82 2b       	or	r24, r18
     78e:	91 83       	std	Z+1, r25	; 0x01
     790:	80 83       	st	Z, r24
	msg->len = mcp2515_read(MCP_RXB0DLC);		// Read message length
     792:	85 e6       	ldi	r24, 0x65	; 101
     794:	0e 94 d1 06 	call	0xda2	; 0xda2 <mcp2515_read>
     798:	f8 01       	movw	r30, r16
     79a:	82 83       	std	Z+2, r24	; 0x02
	for (int i = 0; i<msg->len; i++){
     79c:	c0 e0       	ldi	r28, 0x00	; 0
     79e:	d0 e0       	ldi	r29, 0x00	; 0
     7a0:	09 c0       	rjmp	.+18     	; 0x7b4 <can_recv+0x60>
		msg->data[i] = mcp2515_read(MCP_RXB0D0 + i);
     7a2:	8c 2f       	mov	r24, r28
     7a4:	8a 59       	subi	r24, 0x9A	; 154
     7a6:	0e 94 d1 06 	call	0xda2	; 0xda2 <mcp2515_read>
     7aa:	f8 01       	movw	r30, r16
     7ac:	ec 0f       	add	r30, r28
     7ae:	fd 1f       	adc	r31, r29
     7b0:	83 83       	std	Z+3, r24	; 0x03
*/
void can_recv(CanMsg* msg){
	msg->id = (mcp2515_read(MCP_RXB0SIDH)<<3); // Read top 8 bits
	msg->id |= (mcp2515_read(MCP_RXB0SIDL)>>5) & 0b111; // Read bottom 3 bits
	msg->len = mcp2515_read(MCP_RXB0DLC);		// Read message length
	for (int i = 0; i<msg->len; i++){
     7b2:	21 96       	adiw	r28, 0x01	; 1
     7b4:	f8 01       	movw	r30, r16
     7b6:	82 81       	ldd	r24, Z+2	; 0x02
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	c8 17       	cp	r28, r24
     7bc:	d9 07       	cpc	r29, r25
     7be:	8c f3       	brlt	.-30     	; 0x7a2 <can_recv+0x4e>
		msg->data[i] = mcp2515_read(MCP_RXB0D0 + i);
	}
	mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0); // Reset receive buffer
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	8c e2       	ldi	r24, 0x2C	; 44
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 02 07 	call	0xe04	; 0xe04 <mcp2515_bit_modify>
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <can_send>:

/*
* Send a CAN message via MCP2515
* @param	msg		CAN message to send
*/
void can_send(CanMsg* msg){
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	8c 01       	movw	r16, r24
	mcp2515_write(TXB0SIDH, msg->id>>3);	// Write top 8 bits of ID
     7e4:	fc 01       	movw	r30, r24
     7e6:	60 81       	ld	r22, Z
     7e8:	71 81       	ldd	r23, Z+1	; 0x01
     7ea:	76 95       	lsr	r23
     7ec:	67 95       	ror	r22
     7ee:	76 95       	lsr	r23
     7f0:	67 95       	ror	r22
     7f2:	76 95       	lsr	r23
     7f4:	67 95       	ror	r22
     7f6:	81 e3       	ldi	r24, 0x31	; 49
     7f8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <mcp2515_write>
	mcp2515_write(TXB0SIDL, msg->id<<5);	// Write bottom 3 bits of ID (to MSb of register)
     7fc:	f8 01       	movw	r30, r16
     7fe:	60 81       	ld	r22, Z
     800:	62 95       	swap	r22
     802:	66 0f       	add	r22, r22
     804:	60 7e       	andi	r22, 0xE0	; 224
     806:	82 e3       	ldi	r24, 0x32	; 50
     808:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <mcp2515_write>
	mcp2515_write(TXB0DLC, msg->len);		// Write length of message
     80c:	f8 01       	movw	r30, r16
     80e:	62 81       	ldd	r22, Z+2	; 0x02
     810:	85 e3       	ldi	r24, 0x35	; 53
     812:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <mcp2515_write>
	for(int i=0; i<msg->len; i++){
     816:	c0 e0       	ldi	r28, 0x00	; 0
     818:	d0 e0       	ldi	r29, 0x00	; 0
     81a:	09 c0       	rjmp	.+18     	; 0x82e <can_send+0x54>
		mcp2515_write(TXB0D0 + i, msg->data[i]);
     81c:	f8 01       	movw	r30, r16
     81e:	ec 0f       	add	r30, r28
     820:	fd 1f       	adc	r31, r29
     822:	63 81       	ldd	r22, Z+3	; 0x03
     824:	8c 2f       	mov	r24, r28
     826:	8a 5c       	subi	r24, 0xCA	; 202
     828:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <mcp2515_write>
*/
void can_send(CanMsg* msg){
	mcp2515_write(TXB0SIDH, msg->id>>3);	// Write top 8 bits of ID
	mcp2515_write(TXB0SIDL, msg->id<<5);	// Write bottom 3 bits of ID (to MSb of register)
	mcp2515_write(TXB0DLC, msg->len);		// Write length of message
	for(int i=0; i<msg->len; i++){
     82c:	21 96       	adiw	r28, 0x01	; 1
     82e:	f8 01       	movw	r30, r16
     830:	82 81       	ldd	r24, Z+2	; 0x02
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	c8 17       	cp	r28, r24
     836:	d9 07       	cpc	r29, r25
     838:	8c f3       	brlt	.-30     	; 0x81c <can_send+0x42>
		mcp2515_write(TXB0D0 + i, msg->data[i]);
	}
	mcp2515_request_to_send(MCP_RTS_TX0); // Request to send via transmit buffer 0
     83a:	81 e8       	ldi	r24, 0x81	; 129
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <mcp2515_request_to_send>
}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	08 95       	ret

0000084c <end_game>:
#include <inttypes.h>
#include "def.h"

void end_game() {
    if (gScore > gHighScores[0]) {
     84c:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <gHighScores>
     850:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <__data_end>
     854:	98 17       	cp	r25, r24
     856:	38 f4       	brcc	.+14     	; 0x866 <end_game+0x1a>
        gHighScores[2] = gHighScores[1];
     858:	ef eb       	ldi	r30, 0xBF	; 191
     85a:	f2 e0       	ldi	r31, 0x02	; 2
     85c:	21 81       	ldd	r18, Z+1	; 0x01
     85e:	22 83       	std	Z+2, r18	; 0x02
        gHighScores[1] = gHighScores[0];
     860:	91 83       	std	Z+1, r25	; 0x01
        gHighScores[0] = gScore;
     862:	80 83       	st	Z, r24
        return;
     864:	08 95       	ret
    }
    if (gScore > gHighScores[1]) {
     866:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <gHighScores+0x1>
     86a:	98 17       	cp	r25, r24
     86c:	28 f4       	brcc	.+10     	; 0x878 <end_game+0x2c>
        gHighScores[2] = gHighScores[1];
     86e:	ef eb       	ldi	r30, 0xBF	; 191
     870:	f2 e0       	ldi	r31, 0x02	; 2
     872:	92 83       	std	Z+2, r25	; 0x02
        gHighScores[1] = gScore;
     874:	81 83       	std	Z+1, r24	; 0x01
        return;
     876:	08 95       	ret
    }
    if (gScore > gHighScores[2]) {
     878:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <gMem>
     87c:	98 17       	cp	r25, r24
     87e:	18 f4       	brcc	.+6      	; 0x886 <end_game+0x3a>
        gHighScores[2] = gScore;
     880:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <gMem>
        return;
     884:	08 95       	ret
    }
    gScore = 0;
     886:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
	DEF_STOP_GAME;
     88a:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <gMem>
     88e:	8e 7f       	andi	r24, 0xFE	; 254
     890:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <gMem>
     894:	08 95       	ret

00000896 <gamepad_init>:
#include "adc.h"
#include "gamepad.h"


void gamepad_init(){
	PORTB |= (1 << PB2); // Set pullup resistor for input
     896:	88 b3       	in	r24, 0x18	; 24
     898:	84 60       	ori	r24, 0x04	; 4
     89a:	88 bb       	out	0x18, r24	; 24
	DDRB &= ~(0 << DDB2); // Set PB2 to 0 (input for joystick button)
     89c:	87 b3       	in	r24, 0x17	; 23
     89e:	87 bb       	out	0x17, r24	; 23
     8a0:	08 95       	ret

000008a2 <read_gamepad>:
}

Gamepad read_gamepad(Gamepad gp){
     8a2:	af 92       	push	r10
     8a4:	bf 92       	push	r11
     8a6:	cf 92       	push	r12
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	2e 97       	sbiw	r28, 0x0e	; 14
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	8c 01       	movw	r16, r24
     8c8:	29 87       	std	Y+9, r18	; 0x09
     8ca:	3a 87       	std	Y+10, r19	; 0x0a
     8cc:	4b 87       	std	Y+11, r20	; 0x0b
     8ce:	5c 87       	std	Y+12, r21	; 0x0c
     8d0:	6d 87       	std	Y+13, r22	; 0x0d
     8d2:	7e 87       	std	Y+14, r23	; 0x0e
	gp.pos_x = (int16_t)adc_read(CH_JOYSTICK_X);
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	9a 83       	std	Y+2, r25	; 0x02
     8de:	89 83       	std	Y+1, r24	; 0x01
	gp.pos_y = (int16_t)adc_read(CH_JOYSTICK_Y);
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	9c 83       	std	Y+4, r25	; 0x04
     8ea:	8b 83       	std	Y+3, r24	; 0x03
	gp.pos_left = (int16_t)adc_read(CH_SLIDER_LEFT);
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	9e 83       	std	Y+6, r25	; 0x06
     8f6:	8d 83       	std	Y+5, r24	; 0x05
	gp.pos_right = (int16_t)adc_read(CH_SLIDER_RIGHT);
     8f8:	83 e0       	ldi	r24, 0x03	; 3
     8fa:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	98 87       	std	Y+8, r25	; 0x08
     902:	8f 83       	std	Y+7, r24	; 0x07
	gp.btn = !((PINB & (1 << PB2)) >> PB2);
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	b2 99       	sbic	0x16, 2	; 22
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	8d 87       	std	Y+13, r24	; 0x0d
	
	// printf("RAW X: %d    -    Y: %d    -    L: %d    -    R: %d\r\n\r\n", gp.pos_x, gp.pos_y, gp.pos_left, gp.pos_right);

	return gp;
     90c:	8e e0       	ldi	r24, 0x0E	; 14
     90e:	fe 01       	movw	r30, r28
     910:	31 96       	adiw	r30, 0x01	; 1
     912:	d8 01       	movw	r26, r16
     914:	01 90       	ld	r0, Z+
     916:	0d 92       	st	X+, r0
     918:	8a 95       	dec	r24
     91a:	e1 f7       	brne	.-8      	; 0x914 <read_gamepad+0x72>
}
     91c:	c8 01       	movw	r24, r16
     91e:	2e 96       	adiw	r28, 0x0e	; 14
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	de bf       	out	0x3e, r29	; 62
     926:	0f be       	out	0x3f, r0	; 63
     928:	cd bf       	out	0x3d, r28	; 61
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	ff 90       	pop	r15
     934:	ef 90       	pop	r14
     936:	df 90       	pop	r13
     938:	cf 90       	pop	r12
     93a:	bf 90       	pop	r11
     93c:	af 90       	pop	r10
     93e:	08 95       	ret

00000940 <calibrate_gamepad>:

Gamepad calibrate_gamepad(Gamepad input){
     940:	af 92       	push	r10
     942:	bf 92       	push	r11
     944:	cf 92       	push	r12
     946:	df 92       	push	r13
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
     958:	2e 97       	sbiw	r28, 0x0e	; 14
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	fc 01       	movw	r30, r24
     966:	a9 82       	std	Y+1, r10	; 0x01
     968:	ba 82       	std	Y+2, r11	; 0x02
     96a:	cb 82       	std	Y+3, r12	; 0x03
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	ed 82       	std	Y+5, r14	; 0x05
     970:	fe 82       	std	Y+6, r15	; 0x06
     972:	0f 83       	std	Y+7, r16	; 0x07
     974:	18 87       	std	Y+8, r17	; 0x08
     976:	6d 87       	std	Y+13, r22	; 0x0d
	Gamepad gp;
	
	gp.pos_x = ((input.pos_x - 127) * 100 / 127) - gp.offset_x; // Get direction as a percentage between -100 to +100
     978:	29 81       	ldd	r18, Y+1	; 0x01
     97a:	3a 81       	ldd	r19, Y+2	; 0x02
     97c:	2f 57       	subi	r18, 0x7F	; 127
     97e:	31 09       	sbc	r19, r1
     980:	44 e6       	ldi	r20, 0x64	; 100
     982:	42 9f       	mul	r20, r18
     984:	c0 01       	movw	r24, r0
     986:	43 9f       	mul	r20, r19
     988:	90 0d       	add	r25, r0
     98a:	11 24       	eor	r1, r1
     98c:	6f e7       	ldi	r22, 0x7F	; 127
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	0e 94 49 0a 	call	0x1492	; 0x1492 <__divmodhi4>
     994:	80 85       	ldd	r24, Z+8	; 0x08
     996:	91 85       	ldd	r25, Z+9	; 0x09
     998:	68 1b       	sub	r22, r24
     99a:	79 0b       	sbc	r23, r25
     99c:	71 83       	std	Z+1, r23	; 0x01
     99e:	60 83       	st	Z, r22
	if (gp.pos_x > 100){gp.pos_x = 100;} else if (gp.pos_x < -100){gp.pos_x = -100;}
     9a0:	65 36       	cpi	r22, 0x65	; 101
     9a2:	71 05       	cpc	r23, r1
     9a4:	2c f0       	brlt	.+10     	; 0x9b0 <calibrate_gamepad+0x70>
     9a6:	84 e6       	ldi	r24, 0x64	; 100
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	91 83       	std	Z+1, r25	; 0x01
     9ac:	80 83       	st	Z, r24
     9ae:	07 c0       	rjmp	.+14     	; 0x9be <calibrate_gamepad+0x7e>
     9b0:	6c 39       	cpi	r22, 0x9C	; 156
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	24 f4       	brge	.+8      	; 0x9be <calibrate_gamepad+0x7e>
     9b6:	8c e9       	ldi	r24, 0x9C	; 156
     9b8:	9f ef       	ldi	r25, 0xFF	; 255
     9ba:	91 83       	std	Z+1, r25	; 0x01
     9bc:	80 83       	st	Z, r24
	gp.pos_y = ((input.pos_y - 127) * 100 / 127) - gp.offset_y;
     9be:	2b 81       	ldd	r18, Y+3	; 0x03
     9c0:	3c 81       	ldd	r19, Y+4	; 0x04
     9c2:	2f 57       	subi	r18, 0x7F	; 127
     9c4:	31 09       	sbc	r19, r1
     9c6:	44 e6       	ldi	r20, 0x64	; 100
     9c8:	42 9f       	mul	r20, r18
     9ca:	c0 01       	movw	r24, r0
     9cc:	43 9f       	mul	r20, r19
     9ce:	90 0d       	add	r25, r0
     9d0:	11 24       	eor	r1, r1
     9d2:	6f e7       	ldi	r22, 0x7F	; 127
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	0e 94 49 0a 	call	0x1492	; 0x1492 <__divmodhi4>
     9da:	82 85       	ldd	r24, Z+10	; 0x0a
     9dc:	93 85       	ldd	r25, Z+11	; 0x0b
     9de:	68 1b       	sub	r22, r24
     9e0:	79 0b       	sbc	r23, r25
     9e2:	73 83       	std	Z+3, r23	; 0x03
     9e4:	62 83       	std	Z+2, r22	; 0x02
	if (gp.pos_y > 100){gp.pos_y = 100;} else if (gp.pos_y < -100){gp.pos_y = -100;}
     9e6:	65 36       	cpi	r22, 0x65	; 101
     9e8:	71 05       	cpc	r23, r1
     9ea:	2c f0       	brlt	.+10     	; 0x9f6 <calibrate_gamepad+0xb6>
     9ec:	84 e6       	ldi	r24, 0x64	; 100
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	93 83       	std	Z+3, r25	; 0x03
     9f2:	82 83       	std	Z+2, r24	; 0x02
     9f4:	07 c0       	rjmp	.+14     	; 0xa04 <calibrate_gamepad+0xc4>
     9f6:	6c 39       	cpi	r22, 0x9C	; 156
     9f8:	7f 4f       	sbci	r23, 0xFF	; 255
     9fa:	24 f4       	brge	.+8      	; 0xa04 <calibrate_gamepad+0xc4>
     9fc:	8c e9       	ldi	r24, 0x9C	; 156
     9fe:	9f ef       	ldi	r25, 0xFF	; 255
     a00:	93 83       	std	Z+3, r25	; 0x03
     a02:	82 83       	std	Z+2, r24	; 0x02
	gp.pos_left = (input.pos_left - 127) * 100 / 127;
     a04:	2d 81       	ldd	r18, Y+5	; 0x05
     a06:	3e 81       	ldd	r19, Y+6	; 0x06
     a08:	2f 57       	subi	r18, 0x7F	; 127
     a0a:	31 09       	sbc	r19, r1
     a0c:	44 e6       	ldi	r20, 0x64	; 100
     a0e:	42 9f       	mul	r20, r18
     a10:	c0 01       	movw	r24, r0
     a12:	43 9f       	mul	r20, r19
     a14:	90 0d       	add	r25, r0
     a16:	11 24       	eor	r1, r1
     a18:	0f e7       	ldi	r16, 0x7F	; 127
     a1a:	10 e0       	ldi	r17, 0x00	; 0
     a1c:	b8 01       	movw	r22, r16
     a1e:	0e 94 49 0a 	call	0x1492	; 0x1492 <__divmodhi4>
     a22:	75 83       	std	Z+5, r23	; 0x05
     a24:	64 83       	std	Z+4, r22	; 0x04
	gp.pos_right = (input.pos_right - 127) * 100 / 127;
     a26:	2f 81       	ldd	r18, Y+7	; 0x07
     a28:	38 85       	ldd	r19, Y+8	; 0x08
     a2a:	2f 57       	subi	r18, 0x7F	; 127
     a2c:	31 09       	sbc	r19, r1
     a2e:	42 9f       	mul	r20, r18
     a30:	c0 01       	movw	r24, r0
     a32:	43 9f       	mul	r20, r19
     a34:	90 0d       	add	r25, r0
     a36:	11 24       	eor	r1, r1
     a38:	b8 01       	movw	r22, r16
     a3a:	0e 94 49 0a 	call	0x1492	; 0x1492 <__divmodhi4>
     a3e:	77 83       	std	Z+7, r23	; 0x07
     a40:	66 83       	std	Z+6, r22	; 0x06
	
	gp.btn = input.btn;
     a42:	8d 85       	ldd	r24, Y+13	; 0x0d
     a44:	84 87       	std	Z+12, r24	; 0x0c
	
	// printf("CAL X: %d    -    Y: %d    -    L: %d    -    R: %d\r\n\r\n", gp.pos_x, gp.pos_y, gp.pos_left, gp.pos_right);
	
	return gp;
}
     a46:	cf 01       	movw	r24, r30
     a48:	2e 96       	adiw	r28, 0x0e	; 14
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	bf 90       	pop	r11
     a66:	af 90       	pop	r10
     a68:	08 95       	ret

00000a6a <getJoystickDir>:

Dir getJoystickDir(Gamepad gp){
     a6a:	cf 92       	push	r12
     a6c:	df 92       	push	r13
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	2e 97       	sbiw	r28, 0x0e	; 14
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	c9 82       	std	Y+1, r12	; 0x01
     a8c:	da 82       	std	Y+2, r13	; 0x02
     a8e:	eb 82       	std	Y+3, r14	; 0x03
     a90:	fc 82       	std	Y+4, r15	; 0x04
	int16_t deadzone = 40;
	Dir direction = NONE; // Default

	if (gp.pos_x < deadzone && gp.pos_x > -deadzone && gp.pos_y < deadzone && gp.pos_y > -deadzone){
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	9a 81       	ldd	r25, Y+2	; 0x02
     a96:	88 32       	cpi	r24, 0x28	; 40
     a98:	91 05       	cpc	r25, r1
     a9a:	64 f4       	brge	.+24     	; 0xab4 <getJoystickDir+0x4a>
     a9c:	89 3d       	cpi	r24, 0xD9	; 217
     a9e:	2f ef       	ldi	r18, 0xFF	; 255
     aa0:	92 07       	cpc	r25, r18
     aa2:	44 f0       	brlt	.+16     	; 0xab4 <getJoystickDir+0x4a>
     aa4:	2b 81       	ldd	r18, Y+3	; 0x03
     aa6:	3c 81       	ldd	r19, Y+4	; 0x04
     aa8:	28 32       	cpi	r18, 0x28	; 40
     aaa:	31 05       	cpc	r19, r1
     aac:	1c f4       	brge	.+6      	; 0xab4 <getJoystickDir+0x4a>
     aae:	29 3d       	cpi	r18, 0xD9	; 217
     ab0:	3f 4f       	sbci	r19, 0xFF	; 255
     ab2:	04 f5       	brge	.+64     	; 0xaf4 <getJoystickDir+0x8a>
		direction = NONE;

	} else if (abs(gp.pos_x) >= abs(gp.pos_y)){
     ab4:	ac 01       	movw	r20, r24
     ab6:	99 23       	and	r25, r25
     ab8:	24 f4       	brge	.+8      	; 0xac2 <getJoystickDir+0x58>
     aba:	44 27       	eor	r20, r20
     abc:	55 27       	eor	r21, r21
     abe:	48 1b       	sub	r20, r24
     ac0:	59 0b       	sbc	r21, r25
     ac2:	6b 81       	ldd	r22, Y+3	; 0x03
     ac4:	7c 81       	ldd	r23, Y+4	; 0x04
     ac6:	9b 01       	movw	r18, r22
     ac8:	77 23       	and	r23, r23
     aca:	24 f4       	brge	.+8      	; 0xad4 <getJoystickDir+0x6a>
     acc:	22 27       	eor	r18, r18
     ace:	33 27       	eor	r19, r19
     ad0:	26 1b       	sub	r18, r22
     ad2:	37 0b       	sbc	r19, r23
     ad4:	42 17       	cp	r20, r18
     ad6:	53 07       	cpc	r21, r19
     ad8:	2c f0       	brlt	.+10     	; 0xae4 <getJoystickDir+0x7a>
		if (gp.pos_x > 0){
     ada:	18 16       	cp	r1, r24
     adc:	19 06       	cpc	r1, r25
     ade:	64 f4       	brge	.+24     	; 0xaf8 <getJoystickDir+0x8e>
			direction = RIGHT;
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	0f c0       	rjmp	.+30     	; 0xb02 <getJoystickDir+0x98>
		} else{
			direction = LEFT;
		}

	} else if (abs(gp.pos_y) > abs(gp.pos_x)){
     ae4:	42 17       	cp	r20, r18
     ae6:	53 07       	cpc	r21, r19
     ae8:	4c f4       	brge	.+18     	; 0xafc <getJoystickDir+0x92>
		if (gp.pos_y > 0){
     aea:	16 16       	cp	r1, r22
     aec:	17 06       	cpc	r1, r23
     aee:	44 f4       	brge	.+16     	; 0xb00 <getJoystickDir+0x96>
			direction = UP;
     af0:	83 e0       	ldi	r24, 0x03	; 3
     af2:	07 c0       	rjmp	.+14     	; 0xb02 <getJoystickDir+0x98>
Dir getJoystickDir(Gamepad gp){
	int16_t deadzone = 40;
	Dir direction = NONE; // Default

	if (gp.pos_x < deadzone && gp.pos_x > -deadzone && gp.pos_y < deadzone && gp.pos_y > -deadzone){
		direction = NONE;
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <getJoystickDir+0x98>

	} else if (abs(gp.pos_x) >= abs(gp.pos_y)){
		if (gp.pos_x > 0){
			direction = RIGHT;
		} else{
			direction = LEFT;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	03 c0       	rjmp	.+6      	; 0xb02 <getJoystickDir+0x98>
	return gp;
}

Dir getJoystickDir(Gamepad gp){
	int16_t deadzone = 40;
	Dir direction = NONE; // Default
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <getJoystickDir+0x98>

	} else if (abs(gp.pos_y) > abs(gp.pos_x)){
		if (gp.pos_y > 0){
			direction = UP;
		}else{
			direction = DOWN;
     b00:	84 e0       	ldi	r24, 0x04	; 4
		}
		}
		
	return direction;
}
     b02:	2e 96       	adiw	r28, 0x0e	; 14
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	df 90       	pop	r13
     b1c:	cf 90       	pop	r12
     b1e:	08 95       	ret

00000b20 <main>:
#include "spi.h"
#include "mcp2515.h"
#include "can.h"
#include "game.h"

int main(void) {
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	e6 97       	sbiw	r28, 0x36	; 54
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	cd bf       	out	0x3d, r28	; 61
	UART_init(DEF_UBBR);
     b34:	8f e1       	ldi	r24, 0x1F	; 31
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 3c 0a 	call	0x1478	; 0x1478 <UART_init>
	SRAM_init();
     b3c:	0e 94 2b 0a 	call	0x1456	; 0x1456 <SRAM_init>
	adc_init();
     b40:	0e 94 7f 03 	call	0x6fe	; 0x6fe <adc_init>
	gamepad_init();
     b44:	0e 94 4b 04 	call	0x896	; 0x896 <gamepad_init>
	oled_init();
     b48:	0e 94 2f 09 	call	0x125e	; 0x125e <oled_init>
	oled_reset();
     b4c:	0e 94 9f 09 	call	0x133e	; 0x133e <oled_reset>
	menu_init();
     b50:	0e 94 95 08 	call	0x112a	; 0x112a <menu_init>
	can_init();
     b54:	0e 94 a7 03 	call	0x74e	; 0x74e <can_init>
	Gamepad gp;
	Dir new_gp_dir;
	Dir prev_gp_dir;
	
	// Calibrate joysticks
	gp = read_gamepad(gp);
     b58:	a9 80       	ldd	r10, Y+1	; 0x01
     b5a:	ba 80       	ldd	r11, Y+2	; 0x02
     b5c:	cb 80       	ldd	r12, Y+3	; 0x03
     b5e:	dc 80       	ldd	r13, Y+4	; 0x04
     b60:	ed 80       	ldd	r14, Y+5	; 0x05
     b62:	fe 80       	ldd	r15, Y+6	; 0x06
     b64:	0f 81       	ldd	r16, Y+7	; 0x07
     b66:	18 85       	ldd	r17, Y+8	; 0x08
     b68:	29 85       	ldd	r18, Y+9	; 0x09
     b6a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b6c:	4b 85       	ldd	r20, Y+11	; 0x0b
     b6e:	5c 85       	ldd	r21, Y+12	; 0x0c
     b70:	6d 85       	ldd	r22, Y+13	; 0x0d
     b72:	7e 85       	ldd	r23, Y+14	; 0x0e
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	0e 94 51 04 	call	0x8a2	; 0x8a2 <read_gamepad>
	gp = calibrate_gamepad(gp);
     b7c:	a9 80       	ldd	r10, Y+1	; 0x01
     b7e:	ba 80       	ldd	r11, Y+2	; 0x02
     b80:	cb 80       	ldd	r12, Y+3	; 0x03
     b82:	dc 80       	ldd	r13, Y+4	; 0x04
     b84:	ed 80       	ldd	r14, Y+5	; 0x05
     b86:	fe 80       	ldd	r15, Y+6	; 0x06
     b88:	0f 81       	ldd	r16, Y+7	; 0x07
     b8a:	18 85       	ldd	r17, Y+8	; 0x08
     b8c:	29 85       	ldd	r18, Y+9	; 0x09
     b8e:	3a 85       	ldd	r19, Y+10	; 0x0a
     b90:	4b 85       	ldd	r20, Y+11	; 0x0b
     b92:	5c 85       	ldd	r21, Y+12	; 0x0c
     b94:	6d 85       	ldd	r22, Y+13	; 0x0d
     b96:	7e 85       	ldd	r23, Y+14	; 0x0e
     b98:	ce 01       	movw	r24, r28
     b9a:	85 96       	adiw	r24, 0x25	; 37
     b9c:	0e 94 a0 04 	call	0x940	; 0x940 <calibrate_gamepad>
     ba0:	8e e0       	ldi	r24, 0x0E	; 14
     ba2:	fe 01       	movw	r30, r28
     ba4:	b5 96       	adiw	r30, 0x25	; 37
     ba6:	de 01       	movw	r26, r28
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	01 90       	ld	r0, Z+
     bac:	0d 92       	st	X+, r0
     bae:	8a 95       	dec	r24
     bb0:	e1 f7       	brne	.-8      	; 0xbaa <main+0x8a>
	
	uint32_t clk = 0;
	uint32_t prevClk = 0;
	uint8_t ballDetected = 0;
	
	printf("Init complete");
     bb2:	86 e0       	ldi	r24, 0x06	; 6
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	9f 93       	push	r25
     bb8:	8f 93       	push	r24
     bba:	0e 94 bc 0a 	call	0x1578	; 0x1578 <printf>
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
	//gp.offset_x = gp.pos_x;
	//gp.offset_y = gp.pos_y;
	
	uint32_t clk = 0;
	uint32_t prevClk = 0;
	uint8_t ballDetected = 0;
     bc2:	81 2c       	mov	r8, r1
	gp = calibrate_gamepad(gp);
	//gp.offset_x = gp.pos_x;
	//gp.offset_y = gp.pos_y;
	
	uint32_t clk = 0;
	uint32_t prevClk = 0;
     bc4:	1b aa       	std	Y+51, r1	; 0x33
     bc6:	1c aa       	std	Y+52, r1	; 0x34
     bc8:	1d aa       	std	Y+53, r1	; 0x35
     bca:	1e aa       	std	Y+54, r1	; 0x36
	gp = read_gamepad(gp);
	gp = calibrate_gamepad(gp);
	//gp.offset_x = gp.pos_x;
	//gp.offset_y = gp.pos_y;
	
	uint32_t clk = 0;
     bcc:	41 2c       	mov	r4, r1
     bce:	51 2c       	mov	r5, r1
     bd0:	32 01       	movw	r6, r4
	
	while(1){
		// =================================================
		// Read gamepad inputs
		
		gp = read_gamepad(gp);
     bd2:	a9 80       	ldd	r10, Y+1	; 0x01
     bd4:	ba 80       	ldd	r11, Y+2	; 0x02
     bd6:	cb 80       	ldd	r12, Y+3	; 0x03
     bd8:	dc 80       	ldd	r13, Y+4	; 0x04
     bda:	ed 80       	ldd	r14, Y+5	; 0x05
     bdc:	fe 80       	ldd	r15, Y+6	; 0x06
     bde:	0f 81       	ldd	r16, Y+7	; 0x07
     be0:	18 85       	ldd	r17, Y+8	; 0x08
     be2:	29 85       	ldd	r18, Y+9	; 0x09
     be4:	3a 85       	ldd	r19, Y+10	; 0x0a
     be6:	4b 85       	ldd	r20, Y+11	; 0x0b
     be8:	5c 85       	ldd	r21, Y+12	; 0x0c
     bea:	6d 85       	ldd	r22, Y+13	; 0x0d
     bec:	7e 85       	ldd	r23, Y+14	; 0x0e
     bee:	ce 01       	movw	r24, r28
     bf0:	85 96       	adiw	r24, 0x25	; 37
     bf2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <read_gamepad>
     bf6:	8e e0       	ldi	r24, 0x0E	; 14
     bf8:	fe 01       	movw	r30, r28
     bfa:	b5 96       	adiw	r30, 0x25	; 37
     bfc:	de 01       	movw	r26, r28
     bfe:	11 96       	adiw	r26, 0x01	; 1
     c00:	01 90       	ld	r0, Z+
     c02:	0d 92       	st	X+, r0
     c04:	8a 95       	dec	r24
     c06:	e1 f7       	brne	.-8      	; 0xc00 <main+0xe0>
		gp = calibrate_gamepad(gp);
     c08:	a9 80       	ldd	r10, Y+1	; 0x01
     c0a:	ba 80       	ldd	r11, Y+2	; 0x02
     c0c:	cb 80       	ldd	r12, Y+3	; 0x03
     c0e:	dc 80       	ldd	r13, Y+4	; 0x04
     c10:	ed 80       	ldd	r14, Y+5	; 0x05
     c12:	fe 80       	ldd	r15, Y+6	; 0x06
     c14:	0f 81       	ldd	r16, Y+7	; 0x07
     c16:	18 85       	ldd	r17, Y+8	; 0x08
     c18:	29 85       	ldd	r18, Y+9	; 0x09
     c1a:	3a 85       	ldd	r19, Y+10	; 0x0a
     c1c:	4b 85       	ldd	r20, Y+11	; 0x0b
     c1e:	5c 85       	ldd	r21, Y+12	; 0x0c
     c20:	6d 85       	ldd	r22, Y+13	; 0x0d
     c22:	7e 85       	ldd	r23, Y+14	; 0x0e
     c24:	ce 01       	movw	r24, r28
     c26:	85 96       	adiw	r24, 0x25	; 37
     c28:	0e 94 a0 04 	call	0x940	; 0x940 <calibrate_gamepad>
     c2c:	8e e0       	ldi	r24, 0x0E	; 14
     c2e:	fe 01       	movw	r30, r28
     c30:	b5 96       	adiw	r30, 0x25	; 37
     c32:	de 01       	movw	r26, r28
     c34:	11 96       	adiw	r26, 0x01	; 1
     c36:	01 90       	ld	r0, Z+
     c38:	0d 92       	st	X+, r0
     c3a:	8a 95       	dec	r24
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <main+0x116>
		new_gp_dir = getJoystickDir(gp);
     c3e:	c9 80       	ldd	r12, Y+1	; 0x01
     c40:	da 80       	ldd	r13, Y+2	; 0x02
     c42:	eb 80       	ldd	r14, Y+3	; 0x03
     c44:	fc 80       	ldd	r15, Y+4	; 0x04
     c46:	0d 81       	ldd	r16, Y+5	; 0x05
     c48:	1e 81       	ldd	r17, Y+6	; 0x06
     c4a:	2f 81       	ldd	r18, Y+7	; 0x07
     c4c:	38 85       	ldd	r19, Y+8	; 0x08
     c4e:	49 85       	ldd	r20, Y+9	; 0x09
     c50:	5a 85       	ldd	r21, Y+10	; 0x0a
     c52:	6b 85       	ldd	r22, Y+11	; 0x0b
     c54:	7c 85       	ldd	r23, Y+12	; 0x0c
     c56:	8d 85       	ldd	r24, Y+13	; 0x0d
     c58:	9e 85       	ldd	r25, Y+14	; 0x0e
     c5a:	0e 94 35 05 	call	0xa6a	; 0xa6a <getJoystickDir>
     c5e:	18 2f       	mov	r17, r24
		
		
		// =================================================
		// Display menu on OLED
		
		oled_reset();
     c60:	0e 94 9f 09 	call	0x133e	; 0x133e <oled_reset>
		if (new_gp_dir == UP && prev_gp_dir != UP ){
     c64:	13 30       	cpi	r17, 0x03	; 3
     c66:	39 f4       	brne	.+14     	; 0xc76 <main+0x156>
     c68:	23 e0       	ldi	r18, 0x03	; 3
     c6a:	32 16       	cp	r3, r18
     c6c:	21 f0       	breq	.+8      	; 0xc76 <main+0x156>
			menu_moveCursor(-1);
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	0e 94 11 09 	call	0x1222	; 0x1222 <menu_moveCursor>
     c74:	08 c0       	rjmp	.+16     	; 0xc86 <main+0x166>
		}
		else if (new_gp_dir == DOWN && prev_gp_dir != DOWN ){
     c76:	14 30       	cpi	r17, 0x04	; 4
     c78:	31 f4       	brne	.+12     	; 0xc86 <main+0x166>
     c7a:	34 e0       	ldi	r19, 0x04	; 4
     c7c:	33 16       	cp	r3, r19
     c7e:	19 f0       	breq	.+6      	; 0xc86 <main+0x166>
			menu_moveCursor(1);
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	0e 94 11 09 	call	0x1222	; 0x1222 <menu_moveCursor>
		}
		if(gp.btn & !prev_gp_btn){
     c86:	2d 85       	ldd	r18, Y+13	; 0x0d
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	99 20       	and	r9, r9
     c8e:	11 f0       	breq	.+4      	; 0xc94 <main+0x174>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	82 23       	and	r24, r18
     c98:	93 23       	and	r25, r19
     c9a:	89 2b       	or	r24, r25
     c9c:	51 f0       	breq	.+20     	; 0xcb2 <main+0x192>
			
			// Leave Highscore
			if (menu_is_highscore()){
     c9e:	0e 94 20 09 	call	0x1240	; 0x1240 <menu_is_highscore>
     ca2:	88 23       	and	r24, r24
     ca4:	19 f0       	breq	.+6      	; 0xcac <main+0x18c>
				menu_move_back();
     ca6:	0e 94 de 08 	call	0x11bc	; 0x11bc <menu_move_back>
     caa:	05 c0       	rjmp	.+10     	; 0xcb6 <main+0x196>
			}else{
				menu_selectPage();
     cac:	0e 94 e6 08 	call	0x11cc	; 0x11cc <menu_selectPage>
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <main+0x196>
			}
		}else{
			menu_run();
     cb2:	0e 94 17 09 	call	0x122e	; 0x122e <menu_run>
		}
		//menu_print();
		prev_gp_dir = new_gp_dir;
		prev_gp_btn = gp.btn;
     cb6:	9d 84       	ldd	r9, Y+13	; 0x0d
		
		// =================================================
		// CAN Communications
		
		CanMsg msgOut;
		msgOut.id = 0x42; // Not used for anything, since there's only one message type
     cb8:	82 e4       	ldi	r24, 0x42	; 66
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	9b 8f       	std	Y+27, r25	; 0x1b
     cbe:	8a 8f       	std	Y+26, r24	; 0x1a
		msgOut.len = 4;
     cc0:	84 e0       	ldi	r24, 0x04	; 4
     cc2:	8c 8f       	std	Y+28, r24	; 0x1c
		msgOut.data[0] = gp.pos_x;
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	8d 8f       	std	Y+29, r24	; 0x1d
		msgOut.data[1] = gp.pos_y;
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	8e 8f       	std	Y+30, r24	; 0x1e
		msgOut.data[2] = gp.btn;
     ccc:	9f 8e       	std	Y+31, r9	; 0x1f
		msgOut.data[3] = DEF_GAME_ACTIVE;
     cce:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <gMem>
     cd2:	81 70       	andi	r24, 0x01	; 1
     cd4:	88 a3       	std	Y+32, r24	; 0x20
		can_send(&msgOut);
     cd6:	ce 01       	movw	r24, r28
     cd8:	4a 96       	adiw	r24, 0x1a	; 26
     cda:	0e 94 ed 03 	call	0x7da	; 0x7da <can_send>
		printf("Sent: ID: %02X    -    Len: %02X    -    Dat: %02X %02X %01X %01X \r\n\r\n", msgOut.id, msgOut.len, msgOut.data[0], msgOut.data[1], msgOut.data[2], msgOut.data[3]);
     cde:	48 a1       	ldd	r20, Y+32	; 0x20
     ce0:	3f 8d       	ldd	r19, Y+31	; 0x1f
     ce2:	2e 8d       	ldd	r18, Y+30	; 0x1e
     ce4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ce6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ce8:	1f 92       	push	r1
     cea:	4f 93       	push	r20
     cec:	1f 92       	push	r1
     cee:	3f 93       	push	r19
     cf0:	1f 92       	push	r1
     cf2:	2f 93       	push	r18
     cf4:	1f 92       	push	r1
     cf6:	9f 93       	push	r25
     cf8:	1f 92       	push	r1
     cfa:	8f 93       	push	r24
     cfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cfe:	8f 93       	push	r24
     d00:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d02:	8f 93       	push	r24
     d04:	84 e1       	ldi	r24, 0x14	; 20
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	9f 93       	push	r25
     d0a:	8f 93       	push	r24
     d0c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <printf>

		if (mcp2515_read(MCP_CANINTF)&(0x01)){
     d10:	8c e2       	ldi	r24, 0x2C	; 44
     d12:	0e 94 d1 06 	call	0xda2	; 0xda2 <mcp2515_read>
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	80 ff       	sbrs	r24, 0
     d22:	07 c0       	rjmp	.+14     	; 0xd32 <main+0x212>
			CanMsg msgIn;
			can_recv(&msgIn);
     d24:	ce 01       	movw	r24, r28
     d26:	0f 96       	adiw	r24, 0x0f	; 15
     d28:	0e 94 aa 03 	call	0x754	; 0x754 <can_recv>
			ballDetected = msgIn.data[0] & (1 << 0);
     d2c:	8a 89       	ldd	r24, Y+18	; 0x12
     d2e:	81 70       	andi	r24, 0x01	; 1
     d30:	88 2e       	mov	r8, r24
		}
		
	
		// =================================================
		// Game logic - Increment score until ball is detected by IR (NB! Game is started by menu function)
		if DEF_GAME_ACTIVE{
     d32:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <gMem>
     d36:	80 ff       	sbrs	r24, 0
     d38:	32 c0       	rjmp	.+100    	; 0xd9e <main+0x27e>
			// Increase score based on time
			clk++;
     d3a:	5f ef       	ldi	r21, 0xFF	; 255
     d3c:	45 1a       	sub	r4, r21
     d3e:	55 0a       	sbc	r5, r21
     d40:	65 0a       	sbc	r6, r21
     d42:	75 0a       	sbc	r7, r21
			if ((clk > prevClk + 10)|(clk < prevClk)){
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	4b a9       	ldd	r20, Y+51	; 0x33
     d48:	5c a9       	ldd	r21, Y+52	; 0x34
     d4a:	6d a9       	ldd	r22, Y+53	; 0x35
     d4c:	7e a9       	ldd	r23, Y+54	; 0x36
     d4e:	46 5f       	subi	r20, 0xF6	; 246
     d50:	5f 4f       	sbci	r21, 0xFF	; 255
     d52:	6f 4f       	sbci	r22, 0xFF	; 255
     d54:	7f 4f       	sbci	r23, 0xFF	; 255
     d56:	44 15       	cp	r20, r4
     d58:	55 05       	cpc	r21, r5
     d5a:	66 05       	cpc	r22, r6
     d5c:	77 05       	cpc	r23, r7
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <main+0x242>
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	2b a9       	ldd	r18, Y+51	; 0x33
     d66:	3c a9       	ldd	r19, Y+52	; 0x34
     d68:	4d a9       	ldd	r20, Y+53	; 0x35
     d6a:	5e a9       	ldd	r21, Y+54	; 0x36
     d6c:	42 16       	cp	r4, r18
     d6e:	53 06       	cpc	r5, r19
     d70:	64 06       	cpc	r6, r20
     d72:	75 06       	cpc	r7, r21
     d74:	08 f0       	brcs	.+2      	; 0xd78 <main+0x258>
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	89 2b       	or	r24, r25
     d7a:	49 f0       	breq	.+18     	; 0xd8e <main+0x26e>
				gScore++;
     d7c:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <__data_end>
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <__data_end>
				prevClk = clk;
     d86:	4b aa       	std	Y+51, r4	; 0x33
     d88:	5c aa       	std	Y+52, r5	; 0x34
     d8a:	6d aa       	std	Y+53, r6	; 0x35
     d8c:	7e aa       	std	Y+54, r7	; 0x36
			}
			
			if (ballDetected != 0) {
     d8e:	88 20       	and	r8, r8
     d90:	31 f0       	breq	.+12     	; 0xd9e <main+0x27e>
				end_game();
     d92:	0e 94 26 04 	call	0x84c	; 0x84c <end_game>
				gScore = 0;
     d96:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
				menu_move_back();
     d9a:	0e 94 de 08 	call	0x11bc	; 0x11bc <menu_move_back>
			}
		}else{
			menu_run();
		}
		//menu_print();
		prev_gp_dir = new_gp_dir;
     d9e:	31 2e       	mov	r3, r17
				gScore = 0;
				menu_move_back();
			}
		}
	
	}
     da0:	18 cf       	rjmp	.-464    	; 0xbd2 <main+0xb2>

00000da2 <mcp2515_read>:
		printf("MCP2515 Entered loopback mode B-)\r\n");
	}
}


uint8_t mcp2515_read(uint8_t adr){
     da2:	cf 93       	push	r28
     da4:	c8 2f       	mov	r28, r24
	DEF_CAN_CS_ON;
     da6:	88 b3       	in	r24, 0x18	; 24
     da8:	8f 7e       	andi	r24, 0xEF	; 239
     daa:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_READ);
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	0e 94 22 0a 	call	0x1444	; 0x1444 <spi_send>
	spi_send(adr);
     db2:	8c 2f       	mov	r24, r28
     db4:	0e 94 22 0a 	call	0x1444	; 0x1444 <spi_send>
	uint8_t result = spi_recv();
     db8:	0e 94 26 0a 	call	0x144c	; 0x144c <spi_recv>
	DEF_CAN_CS_OFF;
     dbc:	98 b3       	in	r25, 0x18	; 24
     dbe:	90 61       	ori	r25, 0x10	; 16
     dc0:	98 bb       	out	0x18, r25	; 24
	return result;
}
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <mcp2515_write>:


void mcp2515_write(uint8_t adr, uint8_t data){
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	d8 2f       	mov	r29, r24
     dcc:	c6 2f       	mov	r28, r22
	DEF_CAN_CS_ON;
     dce:	88 b3       	in	r24, 0x18	; 24
     dd0:	8f 7e       	andi	r24, 0xEF	; 239
     dd2:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_WRITE);
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	0e 94 22 0a 	call	0x1444	; 0x1444 <spi_send>
	spi_send(adr);
     dda:	8d 2f       	mov	r24, r29
     ddc:	0e 94 22 0a 	call	0x1444	; 0x1444 <spi_send>
	spi_send(data);
     de0:	8c 2f       	mov	r24, r28
     de2:	0e 94 22 0a 	call	0x1444	; 0x1444 <spi_send>
	DEF_CAN_CS_OFF;
     de6:	88 b3       	in	r24, 0x18	; 24
     de8:	80 61       	ori	r24, 0x10	; 16
     dea:	88 bb       	out	0x18, r24	; 24
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	08 95       	ret

00000df2 <mcp2515_request_to_send>:


void mcp2515_request_to_send(uint8_t buffer){
	DEF_CAN_CS_ON;
     df2:	98 b3       	in	r25, 0x18	; 24
     df4:	9f 7e       	andi	r25, 0xEF	; 239
     df6:	98 bb       	out	0x18, r25	; 24
	spi_send(buffer);
     df8:	0e 94 22 0a 	call	0x1444	; 0x1444 <spi_send>
	DEF_CAN_CS_OFF;
     dfc:	88 b3       	in	r24, 0x18	; 24
     dfe:	80 61       	ori	r24, 0x10	; 16
     e00:	88 bb       	out	0x18, r24	; 24
     e02:	08 95       	ret

00000e04 <mcp2515_bit_modify>:
}


void mcp2515_bit_modify(uint8_t adr, uint8_t mask, uint8_t data){
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	18 2f       	mov	r17, r24
     e0c:	d6 2f       	mov	r29, r22
     e0e:	c4 2f       	mov	r28, r20
	DEF_CAN_CS_ON;
     e10:	88 b3       	in	r24, 0x18	; 24
     e12:	8f 7e       	andi	r24, 0xEF	; 239
     e14:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_BITMOD); 
     e16:	85 e0       	ldi	r24, 0x05	; 5
     e18:	0e 94 22 0a 	call	0x1444	; 0x1444 <spi_send>
	spi_send(adr);
     e1c:	81 2f       	mov	r24, r17
     e1e:	0e 94 22 0a 	call	0x1444	; 0x1444 <spi_send>
	spi_send(mask);
     e22:	8d 2f       	mov	r24, r29
     e24:	0e 94 22 0a 	call	0x1444	; 0x1444 <spi_send>
	spi_send(data);
     e28:	8c 2f       	mov	r24, r28
     e2a:	0e 94 22 0a 	call	0x1444	; 0x1444 <spi_send>
	DEF_CAN_CS_OFF;
     e2e:	88 b3       	in	r24, 0x18	; 24
     e30:	80 61       	ori	r24, 0x10	; 16
     e32:	88 bb       	out	0x18, r24	; 24
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	08 95       	ret

00000e3c <mcp2515_reset>:


void mcp2515_reset(){
	DEF_CAN_CS_ON;
     e3c:	88 b3       	in	r24, 0x18	; 24
     e3e:	8f 7e       	andi	r24, 0xEF	; 239
     e40:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_RESET);
     e42:	80 ec       	ldi	r24, 0xC0	; 192
     e44:	0e 94 22 0a 	call	0x1444	; 0x1444 <spi_send>
	DEF_CAN_CS_OFF;
     e48:	88 b3       	in	r24, 0x18	; 24
     e4a:	80 61       	ori	r24, 0x10	; 16
     e4c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e4e:	83 ec       	ldi	r24, 0xC3	; 195
     e50:	99 e0       	ldi	r25, 0x09	; 9
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <mcp2515_reset+0x16>
     e56:	00 c0       	rjmp	.+0      	; 0xe58 <mcp2515_reset+0x1c>
     e58:	00 00       	nop
     e5a:	08 95       	ret

00000e5c <mcp2515_init>:
#define PS1 0x06				// Propagation segment 1 = (PS1+1)*TQ = Positive time compensation for edge phase errors 
#define PS2 0x05				// Propagation segment 2 = (PS2+1*TQ) = Negative time compensation for edge phase errors


void mcp2515_init(){
	spi_init();
     e5c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <spi_init>
	// Set chip select pin as output, then keep it inactive (pin low)
	DEF_CAN_CS_ENABLE;
     e60:	87 b3       	in	r24, 0x17	; 23
     e62:	80 61       	ori	r24, 0x10	; 16
     e64:	87 bb       	out	0x17, r24	; 23
	DEF_CAN_CS_OFF;
     e66:	88 b3       	in	r24, 0x18	; 24
     e68:	80 61       	ori	r24, 0x10	; 16
     e6a:	88 bb       	out	0x18, r24	; 24
	
	mcp2515_reset();
     e6c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <mcp2515_reset>
	uint8_t mode = mcp2515_read(MCP_CANSTAT);
     e70:	8e e0       	ldi	r24, 0x0E	; 14
     e72:	0e 94 d1 06 	call	0xda2	; 0xda2 <mcp2515_read>
	if ((mode & MODE_MASK) != MODE_CONFIG){
     e76:	98 2f       	mov	r25, r24
     e78:	90 7e       	andi	r25, 0xE0	; 224
     e7a:	90 38       	cpi	r25, 0x80	; 128
     e7c:	69 f0       	breq	.+26     	; 0xe98 <mcp2515_init+0x3c>
		printf ("ERROR %02X: MCP2515 is NOT in config mode after reset!\r\n", mode);
     e7e:	1f 92       	push	r1
     e80:	8f 93       	push	r24
     e82:	8d eb       	ldi	r24, 0xBD	; 189
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	9f 93       	push	r25
     e88:	8f 93       	push	r24
     e8a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <printf>
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <mcp2515_init+0x44>
	}else{
	printf("MCP2515 entered config mode\r\n");
     e98:	8b e5       	ldi	r24, 0x5B	; 91
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <puts>
	//mcp2515_write(MCP_CNF2, ((PS1 << 3) | PROPSEG)); //Config CNF2, PS1 = 7+1, PropSeg = 1+1
	
	//mcp2515_write(MCP_CNF3, (PS2 | BTLMODE)); // Write to CNF3: PS2 = 6+1, BTLMode ON (muy importante)

	// Configure bit timing
	mcp2515_write(MCP_CNF1, 0x03);	// BRP (Baud Rate Prescaling) = 3+1
     ea0:	63 e0       	ldi	r22, 0x03	; 3
     ea2:	8a e2       	ldi	r24, 0x2A	; 42
     ea4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0xB1);	// Propagation Segment PS = 1+1, PS1 = 7+1
     ea8:	61 eb       	ldi	r22, 0xB1	; 177
     eaa:	89 e2       	ldi	r24, 0x29	; 41
     eac:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <mcp2515_write>
	mcp2515_write(MCP_CNF3, 0x85);	// PS2 = 5+1, BTLMode ON (muy importante)
     eb0:	65 e8       	ldi	r22, 0x85	; 133
     eb2:	88 e2       	ldi	r24, 0x28	; 40
     eb4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <mcp2515_write>

	mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 0); // Enable interrupt bit when Receive Buffer 0 has new data
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	8b e2       	ldi	r24, 0x2B	; 43
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 02 07 	call	0xe04	; 0xe04 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0); // Reset interrupt bit in buffer 0 (must be done to receive next 8 bits)
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	8c e2       	ldi	r24, 0x2C	; 44
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 02 07 	call	0xe04	; 0xe04 <mcp2515_bit_modify>
	

	mcp2515_write(MCP_CANCTRL, MODE_NORMAL); // Enter normal mode
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	8f e0       	ldi	r24, 0x0F	; 15
     edc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <mcp2515_write>
	mode = mcp2515_read(MCP_CANSTAT);
     ee0:	8e e0       	ldi	r24, 0x0E	; 14
     ee2:	0e 94 d1 06 	call	0xda2	; 0xda2 <mcp2515_read>
	if ((mode & MODE_MASK ) != MODE_NORMAL) {
     ee6:	80 7e       	andi	r24, 0xE0	; 224
     ee8:	29 f0       	breq	.+10     	; 0xef4 <mcp2515_init+0x98>
		printf("ERROR: MCP2515 is NOT in normal mode!\r\n");
     eea:	88 e7       	ldi	r24, 0x78	; 120
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <puts>
     ef2:	08 95       	ret
	}else{
		printf("MCP2515 entered normal mode\r\n");
     ef4:	8f e9       	ldi	r24, 0x9F	; 159
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <puts>
     efc:	08 95       	ret

00000efe <menu_func0>:
	
}

//void oled_print(const char *message, uint8_t line); // Assuming this is the OLED print function prototype

void menu_func0() { // Play Game function
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	60 97       	sbiw	r28, 0x10	; 16
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
    //printf("First menu selected\n");
	oled_pos(0, 0);
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	0e 94 84 09 	call	0x1308	; 0x1308 <oled_pos>
    oled_print("     Game in progress", 0);
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	88 e6       	ldi	r24, 0x68	; 104
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	0e 94 fd 09 	call	0x13fa	; 0x13fa <oled_print>

    if (!DEF_GAME_ACTIVE) {
     f28:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <gMem>
     f2c:	80 fd       	sbrc	r24, 0
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <menu_func0+0x38>
        DEF_START_GAME; // Start the game
     f30:	81 60       	ori	r24, 0x01	; 1
     f32:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <gMem>
    }
    
    char score_str[16];
    snprintf(score_str, sizeof(score_str), "Score: %u", gScore);
     f36:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <__data_end>
     f3a:	1f 92       	push	r1
     f3c:	8f 93       	push	r24
     f3e:	8e e7       	ldi	r24, 0x7E	; 126
     f40:	92 e0       	ldi	r25, 0x02	; 2
     f42:	9f 93       	push	r25
     f44:	8f 93       	push	r24
     f46:	1f 92       	push	r1
     f48:	80 e1       	ldi	r24, 0x10	; 16
     f4a:	8f 93       	push	r24
     f4c:	8e 01       	movw	r16, r28
     f4e:	0f 5f       	subi	r16, 0xFF	; 255
     f50:	1f 4f       	sbci	r17, 0xFF	; 255
     f52:	1f 93       	push	r17
     f54:	0f 93       	push	r16
     f56:	0e 94 02 0b 	call	0x1604	; 0x1604 <snprintf>
	oled_pos(1, 0);
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	0e 94 84 09 	call	0x1308	; 0x1308 <oled_pos>
    oled_print(score_str, 0);
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	c8 01       	movw	r24, r16
     f66:	0e 94 fd 09 	call	0x13fa	; 0x13fa <oled_print>

}
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	60 96       	adiw	r28, 0x10	; 16
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	08 95       	ret

00000f8a <menu_func1>:

void menu_func1() { // Show High Scores function
     f8a:	af 92       	push	r10
     f8c:	bf 92       	push	r11
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	2a 97       	sbiw	r28, 0x0a	; 10
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
    //printf("Second menu selected\r\n");
	char highScoreStr[10];
    oled_reset();
     fac:	0e 94 9f 09 	call	0x133e	; 0x133e <oled_reset>
	oled_pos(0,0);
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	0e 94 84 09 	call	0x1308	; 0x1308 <oled_pos>
    oled_print("HighScores", 0);
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	88 e8       	ldi	r24, 0x88	; 136
     fbc:	92 e0       	ldi	r25, 0x02	; 2
     fbe:	0e 94 fd 09 	call	0x13fa	; 0x13fa <oled_print>
	oled_pos(1,0);
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	0e 94 84 09 	call	0x1308	; 0x1308 <oled_pos>
	snprintf(highScoreStr, sizeof(highScoreStr), "%u", gHighScores[0]);
     fca:	0f 2e       	mov	r0, r31
     fcc:	ff eb       	ldi	r31, 0xBF	; 191
     fce:	af 2e       	mov	r10, r31
     fd0:	f2 e0       	ldi	r31, 0x02	; 2
     fd2:	bf 2e       	mov	r11, r31
     fd4:	f0 2d       	mov	r31, r0
     fd6:	f5 01       	movw	r30, r10
     fd8:	80 81       	ld	r24, Z
     fda:	1f 92       	push	r1
     fdc:	8f 93       	push	r24
     fde:	0f 2e       	mov	r0, r31
     fe0:	f5 e8       	ldi	r31, 0x85	; 133
     fe2:	ef 2e       	mov	r14, r31
     fe4:	f2 e0       	ldi	r31, 0x02	; 2
     fe6:	ff 2e       	mov	r15, r31
     fe8:	f0 2d       	mov	r31, r0
     fea:	ff 92       	push	r15
     fec:	ef 92       	push	r14
     fee:	1f 92       	push	r1
     ff0:	0f 2e       	mov	r0, r31
     ff2:	fa e0       	ldi	r31, 0x0A	; 10
     ff4:	df 2e       	mov	r13, r31
     ff6:	f0 2d       	mov	r31, r0
     ff8:	df 92       	push	r13
     ffa:	8e 01       	movw	r16, r28
     ffc:	0f 5f       	subi	r16, 0xFF	; 255
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	1f 93       	push	r17
    1002:	0f 93       	push	r16
    1004:	0e 94 02 0b 	call	0x1604	; 0x1604 <snprintf>
	oled_print(highScoreStr, 0);
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	c8 01       	movw	r24, r16
    100c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <oled_print>
	oled_pos(2,0);
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	0e 94 84 09 	call	0x1308	; 0x1308 <oled_pos>
	snprintf(highScoreStr, sizeof(highScoreStr), "%u", gHighScores[1]);
    1018:	f5 01       	movw	r30, r10
    101a:	81 81       	ldd	r24, Z+1	; 0x01
    101c:	1f 92       	push	r1
    101e:	8f 93       	push	r24
    1020:	ff 92       	push	r15
    1022:	ef 92       	push	r14
    1024:	1f 92       	push	r1
    1026:	df 92       	push	r13
    1028:	1f 93       	push	r17
    102a:	0f 93       	push	r16
    102c:	0e 94 02 0b 	call	0x1604	; 0x1604 <snprintf>
	oled_print(highScoreStr, 0);
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	c8 01       	movw	r24, r16
    1034:	0e 94 fd 09 	call	0x13fa	; 0x13fa <oled_print>
	oled_pos(3,0);
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	83 e0       	ldi	r24, 0x03	; 3
    103c:	0e 94 84 09 	call	0x1308	; 0x1308 <oled_pos>
	snprintf(highScoreStr, sizeof(highScoreStr), "%u", gHighScores[2]);
    1040:	f5 01       	movw	r30, r10
    1042:	82 81       	ldd	r24, Z+2	; 0x02
    1044:	1f 92       	push	r1
    1046:	8f 93       	push	r24
    1048:	ff 92       	push	r15
    104a:	ef 92       	push	r14
    104c:	1f 92       	push	r1
    104e:	df 92       	push	r13
    1050:	1f 93       	push	r17
    1052:	0f 93       	push	r16
    1054:	0e 94 02 0b 	call	0x1604	; 0x1604 <snprintf>
	oled_print(highScoreStr, 0);
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	c8 01       	movw	r24, r16
    105c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <oled_print>
        char score_display[16];
        snprintf(score_display, sizeof(score_display), "%d: %u", i + 1, gHighScores[i]);
        oled_print(score_display, i + 1);
    }
	*/
}
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	2a 96       	adiw	r28, 0x0a	; 10
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	bf 90       	pop	r11
    1086:	af 90       	pop	r10
    1088:	08 95       	ret

0000108a <menu_print>:
	int8_t index = menu.cursor + direction;
	menu_setCursor(index);
}


void menu_print(){
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
	oled_home();
    1092:	0e 94 8d 09 	call	0x131a	; 0x131a <oled_home>
	oled_print(menu.currentPage->name, 0);
    1096:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <menu>
    109a:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <menu+0x1>
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	47 96       	adiw	r24, 0x17	; 23
    10a2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <oled_print>
	oled_pos(1, 0);	// newline
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	0e 94 84 09 	call	0x1308	; 0x1308 <oled_pos>
	
	// Loop for each sub menu in current menu
	for (int i = 0; i <= menu.currentPage->totalSubMenu; i++){
    10ae:	c0 e0       	ldi	r28, 0x00	; 0
    10b0:	d0 e0       	ldi	r29, 0x00	; 0
    10b2:	2b c0       	rjmp	.+86     	; 0x110a <menu_print+0x80>
		// print cursor or space
		if (menu.cursor == i){
    10b4:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <menu+0x9b>
    10b8:	08 2e       	mov	r0, r24
    10ba:	00 0c       	add	r0, r0
    10bc:	99 0b       	sbc	r25, r25
    10be:	c8 17       	cp	r28, r24
    10c0:	d9 07       	cpc	r29, r25
    10c2:	31 f4       	brne	.+12     	; 0x10d0 <menu_print+0x46>
			oled_print("-> ", 0);
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	83 e9       	ldi	r24, 0x93	; 147
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	0e 94 fd 09 	call	0x13fa	; 0x13fa <oled_print>
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <menu_print+0x50>
		}
		else{
			oled_print("   ", 0);
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	87 e9       	ldi	r24, 0x97	; 151
    10d4:	92 e0       	ldi	r25, 0x02	; 2
    10d6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <oled_print>
		}
		// print selected sub menu name
		oled_print(menu.currentPage->subMenu[i]->name, 0);
    10da:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <menu>
    10de:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <menu+0x1>
    10e2:	8e 01       	movw	r16, r28
    10e4:	0f 5f       	subi	r16, 0xFF	; 255
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	c8 01       	movw	r24, r16
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	e8 0f       	add	r30, r24
    10f0:	f9 1f       	adc	r31, r25
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	47 96       	adiw	r24, 0x17	; 23
    10fa:	0e 94 fd 09 	call	0x13fa	; 0x13fa <oled_print>
		
		oled_pos(i+2, 0);	// newline
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	8c 2f       	mov	r24, r28
    1102:	8e 5f       	subi	r24, 0xFE	; 254
    1104:	0e 94 84 09 	call	0x1308	; 0x1308 <oled_pos>
	oled_home();
	oled_print(menu.currentPage->name, 0);
	oled_pos(1, 0);	// newline
	
	// Loop for each sub menu in current menu
	for (int i = 0; i <= menu.currentPage->totalSubMenu; i++){
    1108:	e8 01       	movw	r28, r16
    110a:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <menu>
    110e:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <menu+0x1>
    1112:	86 89       	ldd	r24, Z+22	; 0x16
    1114:	08 2e       	mov	r0, r24
    1116:	00 0c       	add	r0, r0
    1118:	99 0b       	sbc	r25, r25
    111a:	8c 17       	cp	r24, r28
    111c:	9d 07       	cpc	r25, r29
    111e:	54 f6       	brge	.-108    	; 0x10b4 <menu_print+0x2a>
		// print selected sub menu name
		oled_print(menu.currentPage->subMenu[i]->name, 0);
		
		oled_pos(i+2, 0);	// newline
	}
}
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	08 95       	ret

0000112a <menu_init>:
#include <inttypes.h>
#include <stdbool.h>
#include <util/delay.h>
#include <string.h>

void menu_init(){
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
	strcpy(menu.root.name, "Ping Pong Simulator 3000");
    112e:	89 e1       	ldi	r24, 0x19	; 25
    1130:	e5 ea       	ldi	r30, 0xA5	; 165
    1132:	f2 e0       	ldi	r31, 0x02	; 2
    1134:	ab ed       	ldi	r26, 0xDB	; 219
    1136:	b2 e0       	ldi	r27, 0x02	; 2
    1138:	01 90       	ld	r0, Z+
    113a:	0d 92       	st	X+, r0
    113c:	8a 95       	dec	r24
    113e:	e1 f7       	brne	.-8      	; 0x1138 <menu_init+0xe>
	menu.root.run = menu_print;
    1140:	c2 ec       	ldi	r28, 0xC2	; 194
    1142:	d2 e0       	ldi	r29, 0x02	; 2
    1144:	85 e4       	ldi	r24, 0x45	; 69
    1146:	98 e0       	ldi	r25, 0x08	; 8
    1148:	9b ab       	std	Y+51, r25	; 0x33
    114a:	8a ab       	std	Y+50, r24	; 0x32
	menu.root.totalSubMenu = 2;
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	88 8f       	std	Y+24, r24	; 0x18
	menu.currentPage = &menu.root;
    1150:	84 ec       	ldi	r24, 0xC4	; 196
    1152:	92 e0       	ldi	r25, 0x02	; 2
    1154:	99 83       	std	Y+1, r25	; 0x01
    1156:	88 83       	st	Y, r24
	
	strcpy(menu.subMenu1.name, "Play Game");
    1158:	8a e0       	ldi	r24, 0x0A	; 10
    115a:	eb e9       	ldi	r30, 0x9B	; 155
    115c:	f2 e0       	ldi	r31, 0x02	; 2
    115e:	ae e0       	ldi	r26, 0x0E	; 14
    1160:	b3 e0       	ldi	r27, 0x03	; 3
    1162:	01 90       	ld	r0, Z+
    1164:	0d 92       	st	X+, r0
    1166:	8a 95       	dec	r24
    1168:	e1 f7       	brne	.-8      	; 0x1162 <menu_init+0x38>
	menu.subMenu1.run = menu_func0;
    116a:	8f e7       	ldi	r24, 0x7F	; 127
    116c:	97 e0       	ldi	r25, 0x07	; 7
    116e:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <menu+0x66>
    1172:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <menu+0x65>
	menu.subMenu1.totalSubMenu = 0;
    1176:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <menu+0x4b>
	menu.root.subMenu[0] = &menu.subMenu1;
    117a:	87 ef       	ldi	r24, 0xF7	; 247
    117c:	92 e0       	ldi	r25, 0x02	; 2
    117e:	9d 83       	std	Y+5, r25	; 0x05
    1180:	8c 83       	std	Y+4, r24	; 0x04
	
	
	strcpy(menu.subMenu2.name, "HighScores");
    1182:	8b e0       	ldi	r24, 0x0B	; 11
    1184:	e8 e8       	ldi	r30, 0x88	; 136
    1186:	f2 e0       	ldi	r31, 0x02	; 2
    1188:	a1 e4       	ldi	r26, 0x41	; 65
    118a:	b3 e0       	ldi	r27, 0x03	; 3
    118c:	01 90       	ld	r0, Z+
    118e:	0d 92       	st	X+, r0
    1190:	8a 95       	dec	r24
    1192:	e1 f7       	brne	.-8      	; 0x118c <menu_init+0x62>
	menu.subMenu2.run = menu_func1;
    1194:	85 ec       	ldi	r24, 0xC5	; 197
    1196:	97 e0       	ldi	r25, 0x07	; 7
    1198:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <menu+0x99>
    119c:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <menu+0x98>
	menu.subMenu2.totalSubMenu = 0;
    11a0:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <menu+0x7e>
	menu.subMenu2.id = 1;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <menu+0x9a>
	menu.root.subMenu[1] = &menu.subMenu2;
    11aa:	8a e2       	ldi	r24, 0x2A	; 42
    11ac:	93 e0       	ldi	r25, 0x03	; 3
    11ae:	9f 83       	std	Y+7, r25	; 0x07
    11b0:	8e 83       	std	Y+6, r24	; 0x06
	
	
	menu.cursor = 0;
    11b2:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <menu+0x9b>
	
}
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <menu_move_back>:

bool menu_move_back(){
	//if (menu.currentPage->parentMenu == NULL){
		//return 0;	// Already in main menu (root) do nothing
	//}
	menu.currentPage = &menu.root;	// Select parent menu of the current page.
    11bc:	84 ec       	ldi	r24, 0xC4	; 196
    11be:	92 e0       	ldi	r25, 0x02	; 2
    11c0:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <menu+0x1>
    11c4:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <menu>
	return 1;
}
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	08 95       	ret

000011cc <menu_selectPage>:


void menu_selectPage(){
	if(menu.currentPage->totalSubMenu != 0){ // Endrer kun page hvis current page har sub pages
    11cc:	a0 91 c2 02 	lds	r26, 0x02C2	; 0x8002c2 <menu>
    11d0:	b0 91 c3 02 	lds	r27, 0x02C3	; 0x8002c3 <menu+0x1>
    11d4:	56 96       	adiw	r26, 0x16	; 22
    11d6:	8c 91       	ld	r24, X
    11d8:	56 97       	sbiw	r26, 0x16	; 22
    11da:	88 23       	and	r24, r24
    11dc:	81 f0       	breq	.+32     	; 0x11fe <menu_selectPage+0x32>
		menu.currentPage = menu.currentPage->subMenu[menu.cursor];
    11de:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <menu+0x9b>
    11e2:	0e 2e       	mov	r0, r30
    11e4:	00 0c       	add	r0, r0
    11e6:	ff 0b       	sbc	r31, r31
    11e8:	31 96       	adiw	r30, 0x01	; 1
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	ea 0f       	add	r30, r26
    11f0:	fb 1f       	adc	r31, r27
    11f2:	80 81       	ld	r24, Z
    11f4:	91 81       	ldd	r25, Z+1	; 0x01
    11f6:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <menu+0x1>
    11fa:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <menu>
    11fe:	08 95       	ret

00001200 <menu_setCursor>:
}


bool menu_setCursor(int8_t index){
	// check if index is out of range
	if (index < 0){
    1200:	88 23       	and	r24, r24
    1202:	5c f0       	brlt	.+22     	; 0x121a <menu_setCursor+0x1a>
		return 0;	// do nothing
	}
	else if(index >= menu.currentPage->totalSubMenu){
    1204:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <menu>
    1208:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <menu+0x1>
    120c:	96 89       	ldd	r25, Z+22	; 0x16
    120e:	89 17       	cp	r24, r25
    1210:	34 f4       	brge	.+12     	; 0x121e <menu_setCursor+0x1e>
		return 0;	// do nothing
	}
	menu.cursor = index;	// update cursor location
    1212:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <menu+0x9b>
	return 1;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	08 95       	ret


bool menu_setCursor(int8_t index){
	// check if index is out of range
	if (index < 0){
		return 0;	// do nothing
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	08 95       	ret
	}
	else if(index >= menu.currentPage->totalSubMenu){
		return 0;	// do nothing
    121e:	80 e0       	ldi	r24, 0x00	; 0
	}
	menu.cursor = index;	// update cursor location
	return 1;
}
    1220:	08 95       	ret

00001222 <menu_moveCursor>:


bool menu_moveCursor(int8_t direction){
	int8_t index = menu.cursor + direction;
    1222:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <menu+0x9b>
	menu_setCursor(index);
    1226:	89 0f       	add	r24, r25
    1228:	0e 94 00 09 	call	0x1200	; 0x1200 <menu_setCursor>
}
    122c:	08 95       	ret

0000122e <menu_run>:
		oled_pos(i+2, 0);	// newline
	}
}

void menu_run(){
	menu.currentPage->run();
    122e:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <menu>
    1232:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <menu+0x1>
    1236:	00 a8       	ldd	r0, Z+48	; 0x30
    1238:	f1 a9       	ldd	r31, Z+49	; 0x31
    123a:	e0 2d       	mov	r30, r0
    123c:	09 95       	icall
    123e:	08 95       	ret

00001240 <menu_is_highscore>:
}

uint8_t menu_is_highscore(){
	if (menu.currentPage->id == 1){
    1240:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <menu>
    1244:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <menu+0x1>
    1248:	82 a9       	ldd	r24, Z+50	; 0x32
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	09 f0       	breq	.+2      	; 0x1250 <menu_is_highscore+0x10>
		return 1;
	}
	return 0;
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	08 95       	ret

00001252 <oled_write_data>:
void oled_write_line(uint8_t page){
	oled_goto_page(page);
	for (uint8_t i = 0; i < 128; i++){
		oled_write_data(0x01);
	}
}
    1252:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xe98>
    1256:	08 95       	ret

00001258 <oled_write_cmd>:
    1258:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xc98>
    125c:	08 95       	ret

0000125e <oled_init>:
    125e:	8e ea       	ldi	r24, 0xAE	; 174
    1260:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    1264:	81 ea       	ldi	r24, 0xA1	; 161
    1266:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    126a:	8a ed       	ldi	r24, 0xDA	; 218
    126c:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    1270:	82 e1       	ldi	r24, 0x12	; 18
    1272:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    1276:	88 ec       	ldi	r24, 0xC8	; 200
    1278:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    127c:	88 ea       	ldi	r24, 0xA8	; 168
    127e:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    1282:	8f e3       	ldi	r24, 0x3F	; 63
    1284:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    1288:	85 ed       	ldi	r24, 0xD5	; 213
    128a:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    128e:	80 e8       	ldi	r24, 0x80	; 128
    1290:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    1294:	81 e8       	ldi	r24, 0x81	; 129
    1296:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    129a:	80 e5       	ldi	r24, 0x50	; 80
    129c:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12a0:	89 ed       	ldi	r24, 0xD9	; 217
    12a2:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12a6:	81 e2       	ldi	r24, 0x21	; 33
    12a8:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12ac:	80 e2       	ldi	r24, 0x20	; 32
    12ae:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12b8:	8b ed       	ldi	r24, 0xDB	; 219
    12ba:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12be:	80 e3       	ldi	r24, 0x30	; 48
    12c0:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12c4:	8d ea       	ldi	r24, 0xAD	; 173
    12c6:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12d0:	84 ea       	ldi	r24, 0xA4	; 164
    12d2:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12d6:	86 ea       	ldi	r24, 0xA6	; 166
    12d8:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12dc:	8f ea       	ldi	r24, 0xAF	; 175
    12de:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12e2:	08 95       	ret

000012e4 <oled_goto_page>:
    12e4:	87 70       	andi	r24, 0x07	; 7
    12e6:	80 6b       	ori	r24, 0xB0	; 176
    12e8:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12ec:	08 95       	ret

000012ee <oled_goto_col>:
    12ee:	cf 93       	push	r28
    12f0:	c8 2f       	mov	r28, r24
    12f2:	8f 70       	andi	r24, 0x0F	; 15
    12f4:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    12f8:	8c 2f       	mov	r24, r28
    12fa:	82 95       	swap	r24
    12fc:	8f 70       	andi	r24, 0x0F	; 15
    12fe:	80 61       	ori	r24, 0x10	; 16
    1300:	0e 94 2c 09 	call	0x1258	; 0x1258 <oled_write_cmd>
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <oled_pos>:
    1308:	cf 93       	push	r28
    130a:	c6 2f       	mov	r28, r22
    130c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <oled_goto_page>
    1310:	8c 2f       	mov	r24, r28
    1312:	0e 94 77 09 	call	0x12ee	; 0x12ee <oled_goto_col>
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <oled_home>:
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	0e 94 84 09 	call	0x1308	; 0x1308 <oled_pos>
    1322:	08 95       	ret

00001324 <oled_clear_line>:


void oled_clear_line(uint8_t page){
    1324:	cf 93       	push	r28
	oled_goto_page(page);
    1326:	0e 94 72 09 	call	0x12e4	; 0x12e4 <oled_goto_page>
	for (uint8_t i = 0; i < 128; i++){
    132a:	c0 e0       	ldi	r28, 0x00	; 0
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <oled_clear_line+0x12>
		oled_write_data(0x00);
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	0e 94 29 09 	call	0x1252	; 0x1252 <oled_write_data>
}


void oled_clear_line(uint8_t page){
	oled_goto_page(page);
	for (uint8_t i = 0; i < 128; i++){
    1334:	cf 5f       	subi	r28, 0xFF	; 255
    1336:	cc 23       	and	r28, r28
    1338:	d4 f7       	brge	.-12     	; 0x132e <oled_clear_line+0xa>
		oled_write_data(0x00);
	}
}
    133a:	cf 91       	pop	r28
    133c:	08 95       	ret

0000133e <oled_reset>:


void oled_reset(){
    133e:	cf 93       	push	r28
	for (uint8_t i=0; i < 8; i++){
    1340:	c0 e0       	ldi	r28, 0x00	; 0
    1342:	04 c0       	rjmp	.+8      	; 0x134c <oled_reset+0xe>
		oled_clear_line(i);
    1344:	8c 2f       	mov	r24, r28
    1346:	0e 94 92 09 	call	0x1324	; 0x1324 <oled_clear_line>
	}
}


void oled_reset(){
	for (uint8_t i=0; i < 8; i++){
    134a:	cf 5f       	subi	r28, 0xFF	; 255
    134c:	c8 30       	cpi	r28, 0x08	; 8
    134e:	d0 f3       	brcs	.-12     	; 0x1344 <oled_reset+0x6>
		oled_clear_line(i);
	}
	oled_home();
    1350:	0e 94 8d 09 	call	0x131a	; 0x131a <oled_home>
}
    1354:	cf 91       	pop	r28
    1356:	08 95       	ret

00001358 <oled_printChar>:


void oled_printChar(char c, char font){
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
    135c:	90 ee       	ldi	r25, 0xE0	; 224
    135e:	98 0f       	add	r25, r24
    1360:	90 36       	cpi	r25, 0x60	; 96
    1362:	08 f0       	brcs	.+2      	; 0x1366 <oled_printChar+0xe>
    1364:	47 c0       	rjmp	.+142    	; 0x13f4 <oled_printChar+0x9c>
    1366:	c8 2f       	mov	r28, r24
		switch (font){
    1368:	64 30       	cpi	r22, 0x04	; 4
    136a:	99 f0       	breq	.+38     	; 0x1392 <oled_printChar+0x3a>
    136c:	68 30       	cpi	r22, 0x08	; 8
    136e:	39 f1       	breq	.+78     	; 0x13be <oled_printChar+0x66>
    1370:	3e c0       	rjmp	.+124    	; 0x13ee <oled_printChar+0x96>
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
    1372:	ec 2f       	mov	r30, r28
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	b0 97       	sbiw	r30, 0x20	; 32
    1378:	ee 0f       	add	r30, r30
    137a:	ff 1f       	adc	r31, r31
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31
    1380:	ed 0f       	add	r30, r29
    1382:	f1 1d       	adc	r31, r1
    1384:	e0 59       	subi	r30, 0x90	; 144
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	84 91       	lpm	r24, Z
    138a:	0e 94 29 09 	call	0x1252	; 0x1252 <oled_write_data>
void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
    138e:	df 5f       	subi	r29, 0xFF	; 255
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <oled_printChar+0x3c>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
    1392:	d0 e0       	ldi	r29, 0x00	; 0
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
    1394:	d4 30       	cpi	r29, 0x04	; 4
    1396:	68 f3       	brcs	.-38     	; 0x1372 <oled_printChar+0x1a>
    1398:	2d c0       	rjmp	.+90     	; 0x13f4 <oled_printChar+0x9c>
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
    139a:	ec 2f       	mov	r30, r28
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	b0 97       	sbiw	r30, 0x20	; 32
    13a0:	ee 0f       	add	r30, r30
    13a2:	ff 1f       	adc	r31, r31
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	ee 0f       	add	r30, r30
    13aa:	ff 1f       	adc	r31, r31
    13ac:	ed 0f       	add	r30, r29
    13ae:	f1 1d       	adc	r31, r1
    13b0:	e9 53       	subi	r30, 0x39	; 57
    13b2:	fc 4f       	sbci	r31, 0xFC	; 252
    13b4:	84 91       	lpm	r24, Z
    13b6:	0e 94 29 09 	call	0x1252	; 0x1252 <oled_write_data>
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
    13ba:	df 5f       	subi	r29, 0xFF	; 255
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <oled_printChar+0x68>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
    13be:	d0 e0       	ldi	r29, 0x00	; 0
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
    13c0:	d8 30       	cpi	r29, 0x08	; 8
    13c2:	58 f3       	brcs	.-42     	; 0x139a <oled_printChar+0x42>
    13c4:	17 c0       	rjmp	.+46     	; 0x13f4 <oled_printChar+0x9c>
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
					oled_write_data(pgm_read_byte(&font5[c-32][i]));
    13c6:	2c 2f       	mov	r18, r28
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	20 52       	subi	r18, 0x20	; 32
    13cc:	31 09       	sbc	r19, r1
    13ce:	f9 01       	movw	r30, r18
    13d0:	ee 0f       	add	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	ee 0f       	add	r30, r30
    13d6:	ff 1f       	adc	r31, r31
    13d8:	e2 0f       	add	r30, r18
    13da:	f3 1f       	adc	r31, r19
    13dc:	ed 0f       	add	r30, r29
    13de:	f1 1d       	adc	r31, r1
    13e0:	e4 51       	subi	r30, 0x14	; 20
    13e2:	fe 4f       	sbci	r31, 0xFE	; 254
    13e4:	84 91       	lpm	r24, Z
    13e6:	0e 94 29 09 	call	0x1252	; 0x1252 <oled_write_data>
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
    13ea:	df 5f       	subi	r29, 0xFF	; 255
    13ec:	01 c0       	rjmp	.+2      	; 0x13f0 <oled_printChar+0x98>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
    13ee:	d0 e0       	ldi	r29, 0x00	; 0
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
    13f0:	d5 30       	cpi	r29, 0x05	; 5
    13f2:	48 f3       	brcs	.-46     	; 0x13c6 <oled_printChar+0x6e>
					oled_write_data(pgm_read_byte(&font5[c-32][i]));
				}
				break;
		}
	}
}
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	08 95       	ret

000013fa <oled_print>:


// Print strings to OLED
void oled_print(const char* data, char font){
    13fa:	ef 92       	push	r14
    13fc:	ff 92       	push	r15
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	7c 01       	movw	r14, r24
    1406:	16 2f       	mov	r17, r22
	// Select font (from fonts.h)
	char f = 5; // Default font (5x8 NORMAL)
	if (font == 4 || font == 8){ // Selected fonts 4x8 SMALL or 8x8 LARGE
    1408:	64 30       	cpi	r22, 0x04	; 4
    140a:	19 f0       	breq	.+6      	; 0x1412 <oled_print+0x18>
    140c:	68 30       	cpi	r22, 0x08	; 8
    140e:	09 f0       	breq	.+2      	; 0x1412 <oled_print+0x18>


// Print strings to OLED
void oled_print(const char* data, char font){
	// Select font (from fonts.h)
	char f = 5; // Default font (5x8 NORMAL)
    1410:	15 e0       	ldi	r17, 0x05	; 5
	if (font == 4 || font == 8){ // Selected fonts 4x8 SMALL or 8x8 LARGE
		f = font;
	}
	
	int i = 0;
    1412:	c0 e0       	ldi	r28, 0x00	; 0
    1414:	d0 e0       	ldi	r29, 0x00	; 0
	while(data[i] != '\0'){
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <oled_print+0x26>
		oled_printChar(data[i], f);
    1418:	61 2f       	mov	r22, r17
    141a:	0e 94 ac 09 	call	0x1358	; 0x1358 <oled_printChar>
		++i;
    141e:	21 96       	adiw	r28, 0x01	; 1
	if (font == 4 || font == 8){ // Selected fonts 4x8 SMALL or 8x8 LARGE
		f = font;
	}
	
	int i = 0;
	while(data[i] != '\0'){
    1420:	f7 01       	movw	r30, r14
    1422:	ec 0f       	add	r30, r28
    1424:	fd 1f       	adc	r31, r29
    1426:	80 81       	ld	r24, Z
    1428:	81 11       	cpse	r24, r1
    142a:	f6 cf       	rjmp	.-20     	; 0x1418 <oled_print+0x1e>
		oled_printChar(data[i], f);
		++i;
	}
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	ff 90       	pop	r15
    1434:	ef 90       	pop	r14
    1436:	08 95       	ret

00001438 <spi_init>:
#include <avr/io.h>

// Initialize as master
// Code modified from ATMega162 data sheet
void spi_init(void){
	DDRB |= (1 << PB5)|(1 << PB7); // MOSI out, SCK out
    1438:	87 b3       	in	r24, 0x17	; 23
    143a:	80 6a       	ori	r24, 0xA0	; 160
    143c:	87 bb       	out	0x17, r24	; 23
	// Enable SPI as master (SPE, MSTR)
	// Set clock rate F_CPU/16 (SPR0)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    143e:	81 e5       	ldi	r24, 0x51	; 81
    1440:	8d b9       	out	0x0d, r24	; 13
    1442:	08 95       	ret

00001444 <spi_send>:
}


// Send data as master
void spi_send(char cData){
	SPDR = cData;
    1444:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for transmission complete
	while(!(SPSR & 1<<SPIF)){;};
    1446:	77 9b       	sbis	0x0e, 7	; 14
    1448:	fe cf       	rjmp	.-4      	; 0x1446 <spi_send+0x2>
}
    144a:	08 95       	ret

0000144c <spi_recv>:

// Receive data as master
// Same as sending
// Moves ring buffer by 8 bits to receive 8 bits from slave
uint8_t spi_recv(void){
	spi_send(0);
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	0e 94 22 0a 	call	0x1444	; 0x1444 <spi_send>
	return SPDR;
    1452:	8f b1       	in	r24, 0x0f	; 15
    1454:	08 95       	ret

00001456 <SRAM_init>:
#include <avr/io.h>
#include <inttypes.h> // Needed for uint16_t


void SRAM_init() {
	MCUCR |= (1 << SRE); // Enable SRAM
    1456:	85 b7       	in	r24, 0x35	; 53
    1458:	80 68       	ori	r24, 0x80	; 128
    145a:	85 bf       	out	0x35, r24	; 53
	SFIOR = (1 << XMM2); // Masks PC4-PC7 to make sure JTAG remains untouched
    145c:	80 e2       	ldi	r24, 0x20	; 32
    145e:	80 bf       	out	0x30, r24	; 48
    1460:	08 95       	ret

00001462 <UART_receive>:
#include <stdio.h>
#include <avr/io.h>


int UART_receive(FILE * file) {
    while (!(UCSR0A & (1 << RXC0)));  // Wait until data is available to read
    1462:	5f 9b       	sbis	0x0b, 7	; 11
    1464:	fe cf       	rjmp	.-4      	; 0x1462 <UART_receive>
    return UDR0;  // Return the received data
    1466:	8c b1       	in	r24, 0x0c	; 12
}
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	08 95       	ret

0000146c <UART_transmit>:


int UART_transmit(char data, FILE * file) {
    while (!(UCSR0A & (1 << UDRE0)));  // Wait for the data register to be empty
    146c:	5d 9b       	sbis	0x0b, 5	; 11
    146e:	fe cf       	rjmp	.-4      	; 0x146c <UART_transmit>
    UDR0 = data;  // Load the data into the register for transmission
    1470:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	08 95       	ret

00001478 <UART_init>:


void UART_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
    1478:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    147a:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    147c:	88 e1       	ldi	r24, 0x18	; 24
    147e:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, synchronous mode */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1480:	8e e8       	ldi	r24, 0x8E	; 142
    1482:	80 bd       	out	0x20, r24	; 32
	// Make the transmit & receive functions write to a stream / file
	fdevopen(UART_transmit, UART_receive);
    1484:	61 e3       	ldi	r22, 0x31	; 49
    1486:	7a e0       	ldi	r23, 0x0A	; 10
    1488:	86 e3       	ldi	r24, 0x36	; 54
    148a:	9a e0       	ldi	r25, 0x0A	; 10
    148c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <fdevopen>
    1490:	08 95       	ret

00001492 <__divmodhi4>:
    1492:	97 fb       	bst	r25, 7
    1494:	07 2e       	mov	r0, r23
    1496:	16 f4       	brtc	.+4      	; 0x149c <__divmodhi4+0xa>
    1498:	00 94       	com	r0
    149a:	07 d0       	rcall	.+14     	; 0x14aa <__divmodhi4_neg1>
    149c:	77 fd       	sbrc	r23, 7
    149e:	09 d0       	rcall	.+18     	; 0x14b2 <__divmodhi4_neg2>
    14a0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__udivmodhi4>
    14a4:	07 fc       	sbrc	r0, 7
    14a6:	05 d0       	rcall	.+10     	; 0x14b2 <__divmodhi4_neg2>
    14a8:	3e f4       	brtc	.+14     	; 0x14b8 <__divmodhi4_exit>

000014aa <__divmodhi4_neg1>:
    14aa:	90 95       	com	r25
    14ac:	81 95       	neg	r24
    14ae:	9f 4f       	sbci	r25, 0xFF	; 255
    14b0:	08 95       	ret

000014b2 <__divmodhi4_neg2>:
    14b2:	70 95       	com	r23
    14b4:	61 95       	neg	r22
    14b6:	7f 4f       	sbci	r23, 0xFF	; 255

000014b8 <__divmodhi4_exit>:
    14b8:	08 95       	ret

000014ba <__udivmodhi4>:
    14ba:	aa 1b       	sub	r26, r26
    14bc:	bb 1b       	sub	r27, r27
    14be:	51 e1       	ldi	r21, 0x11	; 17
    14c0:	07 c0       	rjmp	.+14     	; 0x14d0 <__udivmodhi4_ep>

000014c2 <__udivmodhi4_loop>:
    14c2:	aa 1f       	adc	r26, r26
    14c4:	bb 1f       	adc	r27, r27
    14c6:	a6 17       	cp	r26, r22
    14c8:	b7 07       	cpc	r27, r23
    14ca:	10 f0       	brcs	.+4      	; 0x14d0 <__udivmodhi4_ep>
    14cc:	a6 1b       	sub	r26, r22
    14ce:	b7 0b       	sbc	r27, r23

000014d0 <__udivmodhi4_ep>:
    14d0:	88 1f       	adc	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	5a 95       	dec	r21
    14d6:	a9 f7       	brne	.-22     	; 0x14c2 <__udivmodhi4_loop>
    14d8:	80 95       	com	r24
    14da:	90 95       	com	r25
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	08 95       	ret

000014e2 <fdevopen>:
    14e2:	0f 93       	push	r16
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	31 f4       	brne	.+12     	; 0x14fa <fdevopen+0x18>
    14ee:	61 15       	cp	r22, r1
    14f0:	71 05       	cpc	r23, r1
    14f2:	19 f4       	brne	.+6      	; 0x14fa <fdevopen+0x18>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	3a c0       	rjmp	.+116    	; 0x156e <fdevopen+0x8c>
    14fa:	8b 01       	movw	r16, r22
    14fc:	ec 01       	movw	r28, r24
    14fe:	6e e0       	ldi	r22, 0x0E	; 14
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <calloc>
    150a:	fc 01       	movw	r30, r24
    150c:	89 2b       	or	r24, r25
    150e:	91 f3       	breq	.-28     	; 0x14f4 <fdevopen+0x12>
    1510:	80 e8       	ldi	r24, 0x80	; 128
    1512:	83 83       	std	Z+3, r24	; 0x03
    1514:	01 15       	cp	r16, r1
    1516:	11 05       	cpc	r17, r1
    1518:	71 f0       	breq	.+28     	; 0x1536 <fdevopen+0x54>
    151a:	13 87       	std	Z+11, r17	; 0x0b
    151c:	02 87       	std	Z+10, r16	; 0x0a
    151e:	81 e8       	ldi	r24, 0x81	; 129
    1520:	83 83       	std	Z+3, r24	; 0x03
    1522:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <__iob>
    1526:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <__iob+0x1>
    152a:	89 2b       	or	r24, r25
    152c:	21 f4       	brne	.+8      	; 0x1536 <fdevopen+0x54>
    152e:	f0 93 5f 03 	sts	0x035F, r31	; 0x80035f <__iob+0x1>
    1532:	e0 93 5e 03 	sts	0x035E, r30	; 0x80035e <__iob>
    1536:	20 97       	sbiw	r28, 0x00	; 0
    1538:	c9 f0       	breq	.+50     	; 0x156c <fdevopen+0x8a>
    153a:	d1 87       	std	Z+9, r29	; 0x09
    153c:	c0 87       	std	Z+8, r28	; 0x08
    153e:	83 81       	ldd	r24, Z+3	; 0x03
    1540:	82 60       	ori	r24, 0x02	; 2
    1542:	83 83       	std	Z+3, r24	; 0x03
    1544:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <__iob+0x2>
    1548:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <__iob+0x3>
    154c:	89 2b       	or	r24, r25
    154e:	71 f4       	brne	.+28     	; 0x156c <fdevopen+0x8a>
    1550:	f0 93 61 03 	sts	0x0361, r31	; 0x800361 <__iob+0x3>
    1554:	e0 93 60 03 	sts	0x0360, r30	; 0x800360 <__iob+0x2>
    1558:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <__iob+0x4>
    155c:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <__iob+0x5>
    1560:	89 2b       	or	r24, r25
    1562:	21 f4       	brne	.+8      	; 0x156c <fdevopen+0x8a>
    1564:	f0 93 63 03 	sts	0x0363, r31	; 0x800363 <__iob+0x5>
    1568:	e0 93 62 03 	sts	0x0362, r30	; 0x800362 <__iob+0x4>
    156c:	cf 01       	movw	r24, r30
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	08 95       	ret

00001578 <printf>:
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e2 ec       	ldi	r30, 0xC2	; 194
    157e:	fa e0       	ldi	r31, 0x0A	; 10
    1580:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__prologue_saves__+0x20>
    1584:	ae 01       	movw	r20, r28
    1586:	4b 5f       	subi	r20, 0xFB	; 251
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	fa 01       	movw	r30, r20
    158c:	61 91       	ld	r22, Z+
    158e:	71 91       	ld	r23, Z+
    1590:	af 01       	movw	r20, r30
    1592:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <__iob+0x2>
    1596:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <__iob+0x3>
    159a:	0e 94 32 0b 	call	0x1664	; 0x1664 <vfprintf>
    159e:	e2 e0       	ldi	r30, 0x02	; 2
    15a0:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__epilogue_restores__+0x20>

000015a4 <puts>:
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <__iob+0x2>
    15b0:	f0 91 61 03 	lds	r31, 0x0361	; 0x800361 <__iob+0x3>
    15b4:	23 81       	ldd	r18, Z+3	; 0x03
    15b6:	21 ff       	sbrs	r18, 1
    15b8:	1b c0       	rjmp	.+54     	; 0x15f0 <puts+0x4c>
    15ba:	8c 01       	movw	r16, r24
    15bc:	d0 e0       	ldi	r29, 0x00	; 0
    15be:	c0 e0       	ldi	r28, 0x00	; 0
    15c0:	f8 01       	movw	r30, r16
    15c2:	81 91       	ld	r24, Z+
    15c4:	8f 01       	movw	r16, r30
    15c6:	60 91 60 03 	lds	r22, 0x0360	; 0x800360 <__iob+0x2>
    15ca:	70 91 61 03 	lds	r23, 0x0361	; 0x800361 <__iob+0x3>
    15ce:	db 01       	movw	r26, r22
    15d0:	18 96       	adiw	r26, 0x08	; 8
    15d2:	ed 91       	ld	r30, X+
    15d4:	fc 91       	ld	r31, X
    15d6:	19 97       	sbiw	r26, 0x09	; 9
    15d8:	88 23       	and	r24, r24
    15da:	31 f0       	breq	.+12     	; 0x15e8 <puts+0x44>
    15dc:	09 95       	icall
    15de:	89 2b       	or	r24, r25
    15e0:	79 f3       	breq	.-34     	; 0x15c0 <puts+0x1c>
    15e2:	df ef       	ldi	r29, 0xFF	; 255
    15e4:	cf ef       	ldi	r28, 0xFF	; 255
    15e6:	ec cf       	rjmp	.-40     	; 0x15c0 <puts+0x1c>
    15e8:	8a e0       	ldi	r24, 0x0A	; 10
    15ea:	09 95       	icall
    15ec:	89 2b       	or	r24, r25
    15ee:	19 f0       	breq	.+6      	; 0x15f6 <puts+0x52>
    15f0:	8f ef       	ldi	r24, 0xFF	; 255
    15f2:	9f ef       	ldi	r25, 0xFF	; 255
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <puts+0x56>
    15f6:	8d 2f       	mov	r24, r29
    15f8:	9c 2f       	mov	r25, r28
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	08 95       	ret

00001604 <snprintf>:
    1604:	ae e0       	ldi	r26, 0x0E	; 14
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e8 e0       	ldi	r30, 0x08	; 8
    160a:	fb e0       	ldi	r31, 0x0B	; 11
    160c:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__prologue_saves__+0x1c>
    1610:	0d 89       	ldd	r16, Y+21	; 0x15
    1612:	1e 89       	ldd	r17, Y+22	; 0x16
    1614:	8f 89       	ldd	r24, Y+23	; 0x17
    1616:	98 8d       	ldd	r25, Y+24	; 0x18
    1618:	26 e0       	ldi	r18, 0x06	; 6
    161a:	2c 83       	std	Y+4, r18	; 0x04
    161c:	1a 83       	std	Y+2, r17	; 0x02
    161e:	09 83       	std	Y+1, r16	; 0x01
    1620:	97 ff       	sbrs	r25, 7
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <snprintf+0x24>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e8       	ldi	r25, 0x80	; 128
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	9e 83       	std	Y+6, r25	; 0x06
    162c:	8d 83       	std	Y+5, r24	; 0x05
    162e:	ae 01       	movw	r20, r28
    1630:	45 5e       	subi	r20, 0xE5	; 229
    1632:	5f 4f       	sbci	r21, 0xFF	; 255
    1634:	69 8d       	ldd	r22, Y+25	; 0x19
    1636:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1638:	ce 01       	movw	r24, r28
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	0e 94 32 0b 	call	0x1664	; 0x1664 <vfprintf>
    1640:	4d 81       	ldd	r20, Y+5	; 0x05
    1642:	5e 81       	ldd	r21, Y+6	; 0x06
    1644:	57 fd       	sbrc	r21, 7
    1646:	0a c0       	rjmp	.+20     	; 0x165c <snprintf+0x58>
    1648:	2f 81       	ldd	r18, Y+7	; 0x07
    164a:	38 85       	ldd	r19, Y+8	; 0x08
    164c:	42 17       	cp	r20, r18
    164e:	53 07       	cpc	r21, r19
    1650:	0c f4       	brge	.+2      	; 0x1654 <snprintf+0x50>
    1652:	9a 01       	movw	r18, r20
    1654:	f8 01       	movw	r30, r16
    1656:	e2 0f       	add	r30, r18
    1658:	f3 1f       	adc	r31, r19
    165a:	10 82       	st	Z, r1
    165c:	2e 96       	adiw	r28, 0x0e	; 14
    165e:	e4 e0       	ldi	r30, 0x04	; 4
    1660:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__epilogue_restores__+0x1c>

00001664 <vfprintf>:
    1664:	ab e0       	ldi	r26, 0x0B	; 11
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e8 e3       	ldi	r30, 0x38	; 56
    166a:	fb e0       	ldi	r31, 0x0B	; 11
    166c:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__prologue_saves__>
    1670:	6c 01       	movw	r12, r24
    1672:	7b 01       	movw	r14, r22
    1674:	8a 01       	movw	r16, r20
    1676:	fc 01       	movw	r30, r24
    1678:	17 82       	std	Z+7, r1	; 0x07
    167a:	16 82       	std	Z+6, r1	; 0x06
    167c:	83 81       	ldd	r24, Z+3	; 0x03
    167e:	81 ff       	sbrs	r24, 1
    1680:	cc c1       	rjmp	.+920    	; 0x1a1a <vfprintf+0x3b6>
    1682:	ce 01       	movw	r24, r28
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	3c 01       	movw	r6, r24
    1688:	f6 01       	movw	r30, r12
    168a:	93 81       	ldd	r25, Z+3	; 0x03
    168c:	f7 01       	movw	r30, r14
    168e:	93 fd       	sbrc	r25, 3
    1690:	85 91       	lpm	r24, Z+
    1692:	93 ff       	sbrs	r25, 3
    1694:	81 91       	ld	r24, Z+
    1696:	7f 01       	movw	r14, r30
    1698:	88 23       	and	r24, r24
    169a:	09 f4       	brne	.+2      	; 0x169e <vfprintf+0x3a>
    169c:	ba c1       	rjmp	.+884    	; 0x1a12 <vfprintf+0x3ae>
    169e:	85 32       	cpi	r24, 0x25	; 37
    16a0:	39 f4       	brne	.+14     	; 0x16b0 <vfprintf+0x4c>
    16a2:	93 fd       	sbrc	r25, 3
    16a4:	85 91       	lpm	r24, Z+
    16a6:	93 ff       	sbrs	r25, 3
    16a8:	81 91       	ld	r24, Z+
    16aa:	7f 01       	movw	r14, r30
    16ac:	85 32       	cpi	r24, 0x25	; 37
    16ae:	29 f4       	brne	.+10     	; 0x16ba <vfprintf+0x56>
    16b0:	b6 01       	movw	r22, r12
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <fputc>
    16b8:	e7 cf       	rjmp	.-50     	; 0x1688 <vfprintf+0x24>
    16ba:	91 2c       	mov	r9, r1
    16bc:	21 2c       	mov	r2, r1
    16be:	31 2c       	mov	r3, r1
    16c0:	ff e1       	ldi	r31, 0x1F	; 31
    16c2:	f3 15       	cp	r31, r3
    16c4:	d8 f0       	brcs	.+54     	; 0x16fc <vfprintf+0x98>
    16c6:	8b 32       	cpi	r24, 0x2B	; 43
    16c8:	79 f0       	breq	.+30     	; 0x16e8 <vfprintf+0x84>
    16ca:	38 f4       	brcc	.+14     	; 0x16da <vfprintf+0x76>
    16cc:	80 32       	cpi	r24, 0x20	; 32
    16ce:	79 f0       	breq	.+30     	; 0x16ee <vfprintf+0x8a>
    16d0:	83 32       	cpi	r24, 0x23	; 35
    16d2:	a1 f4       	brne	.+40     	; 0x16fc <vfprintf+0x98>
    16d4:	23 2d       	mov	r18, r3
    16d6:	20 61       	ori	r18, 0x10	; 16
    16d8:	1d c0       	rjmp	.+58     	; 0x1714 <vfprintf+0xb0>
    16da:	8d 32       	cpi	r24, 0x2D	; 45
    16dc:	61 f0       	breq	.+24     	; 0x16f6 <vfprintf+0x92>
    16de:	80 33       	cpi	r24, 0x30	; 48
    16e0:	69 f4       	brne	.+26     	; 0x16fc <vfprintf+0x98>
    16e2:	23 2d       	mov	r18, r3
    16e4:	21 60       	ori	r18, 0x01	; 1
    16e6:	16 c0       	rjmp	.+44     	; 0x1714 <vfprintf+0xb0>
    16e8:	83 2d       	mov	r24, r3
    16ea:	82 60       	ori	r24, 0x02	; 2
    16ec:	38 2e       	mov	r3, r24
    16ee:	e3 2d       	mov	r30, r3
    16f0:	e4 60       	ori	r30, 0x04	; 4
    16f2:	3e 2e       	mov	r3, r30
    16f4:	2a c0       	rjmp	.+84     	; 0x174a <vfprintf+0xe6>
    16f6:	f3 2d       	mov	r31, r3
    16f8:	f8 60       	ori	r31, 0x08	; 8
    16fa:	1d c0       	rjmp	.+58     	; 0x1736 <vfprintf+0xd2>
    16fc:	37 fc       	sbrc	r3, 7
    16fe:	2d c0       	rjmp	.+90     	; 0x175a <vfprintf+0xf6>
    1700:	20 ed       	ldi	r18, 0xD0	; 208
    1702:	28 0f       	add	r18, r24
    1704:	2a 30       	cpi	r18, 0x0A	; 10
    1706:	40 f0       	brcs	.+16     	; 0x1718 <vfprintf+0xb4>
    1708:	8e 32       	cpi	r24, 0x2E	; 46
    170a:	b9 f4       	brne	.+46     	; 0x173a <vfprintf+0xd6>
    170c:	36 fc       	sbrc	r3, 6
    170e:	81 c1       	rjmp	.+770    	; 0x1a12 <vfprintf+0x3ae>
    1710:	23 2d       	mov	r18, r3
    1712:	20 64       	ori	r18, 0x40	; 64
    1714:	32 2e       	mov	r3, r18
    1716:	19 c0       	rjmp	.+50     	; 0x174a <vfprintf+0xe6>
    1718:	36 fe       	sbrs	r3, 6
    171a:	06 c0       	rjmp	.+12     	; 0x1728 <vfprintf+0xc4>
    171c:	8a e0       	ldi	r24, 0x0A	; 10
    171e:	98 9e       	mul	r9, r24
    1720:	20 0d       	add	r18, r0
    1722:	11 24       	eor	r1, r1
    1724:	92 2e       	mov	r9, r18
    1726:	11 c0       	rjmp	.+34     	; 0x174a <vfprintf+0xe6>
    1728:	ea e0       	ldi	r30, 0x0A	; 10
    172a:	2e 9e       	mul	r2, r30
    172c:	20 0d       	add	r18, r0
    172e:	11 24       	eor	r1, r1
    1730:	22 2e       	mov	r2, r18
    1732:	f3 2d       	mov	r31, r3
    1734:	f0 62       	ori	r31, 0x20	; 32
    1736:	3f 2e       	mov	r3, r31
    1738:	08 c0       	rjmp	.+16     	; 0x174a <vfprintf+0xe6>
    173a:	8c 36       	cpi	r24, 0x6C	; 108
    173c:	21 f4       	brne	.+8      	; 0x1746 <vfprintf+0xe2>
    173e:	83 2d       	mov	r24, r3
    1740:	80 68       	ori	r24, 0x80	; 128
    1742:	38 2e       	mov	r3, r24
    1744:	02 c0       	rjmp	.+4      	; 0x174a <vfprintf+0xe6>
    1746:	88 36       	cpi	r24, 0x68	; 104
    1748:	41 f4       	brne	.+16     	; 0x175a <vfprintf+0xf6>
    174a:	f7 01       	movw	r30, r14
    174c:	93 fd       	sbrc	r25, 3
    174e:	85 91       	lpm	r24, Z+
    1750:	93 ff       	sbrs	r25, 3
    1752:	81 91       	ld	r24, Z+
    1754:	7f 01       	movw	r14, r30
    1756:	81 11       	cpse	r24, r1
    1758:	b3 cf       	rjmp	.-154    	; 0x16c0 <vfprintf+0x5c>
    175a:	98 2f       	mov	r25, r24
    175c:	9f 7d       	andi	r25, 0xDF	; 223
    175e:	95 54       	subi	r25, 0x45	; 69
    1760:	93 30       	cpi	r25, 0x03	; 3
    1762:	28 f4       	brcc	.+10     	; 0x176e <vfprintf+0x10a>
    1764:	0c 5f       	subi	r16, 0xFC	; 252
    1766:	1f 4f       	sbci	r17, 0xFF	; 255
    1768:	9f e3       	ldi	r25, 0x3F	; 63
    176a:	99 83       	std	Y+1, r25	; 0x01
    176c:	0d c0       	rjmp	.+26     	; 0x1788 <vfprintf+0x124>
    176e:	83 36       	cpi	r24, 0x63	; 99
    1770:	31 f0       	breq	.+12     	; 0x177e <vfprintf+0x11a>
    1772:	83 37       	cpi	r24, 0x73	; 115
    1774:	71 f0       	breq	.+28     	; 0x1792 <vfprintf+0x12e>
    1776:	83 35       	cpi	r24, 0x53	; 83
    1778:	09 f0       	breq	.+2      	; 0x177c <vfprintf+0x118>
    177a:	59 c0       	rjmp	.+178    	; 0x182e <vfprintf+0x1ca>
    177c:	21 c0       	rjmp	.+66     	; 0x17c0 <vfprintf+0x15c>
    177e:	f8 01       	movw	r30, r16
    1780:	80 81       	ld	r24, Z
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	0e 5f       	subi	r16, 0xFE	; 254
    1786:	1f 4f       	sbci	r17, 0xFF	; 255
    1788:	88 24       	eor	r8, r8
    178a:	83 94       	inc	r8
    178c:	91 2c       	mov	r9, r1
    178e:	53 01       	movw	r10, r6
    1790:	13 c0       	rjmp	.+38     	; 0x17b8 <vfprintf+0x154>
    1792:	28 01       	movw	r4, r16
    1794:	f2 e0       	ldi	r31, 0x02	; 2
    1796:	4f 0e       	add	r4, r31
    1798:	51 1c       	adc	r5, r1
    179a:	f8 01       	movw	r30, r16
    179c:	a0 80       	ld	r10, Z
    179e:	b1 80       	ldd	r11, Z+1	; 0x01
    17a0:	36 fe       	sbrs	r3, 6
    17a2:	03 c0       	rjmp	.+6      	; 0x17aa <vfprintf+0x146>
    17a4:	69 2d       	mov	r22, r9
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <vfprintf+0x14a>
    17aa:	6f ef       	ldi	r22, 0xFF	; 255
    17ac:	7f ef       	ldi	r23, 0xFF	; 255
    17ae:	c5 01       	movw	r24, r10
    17b0:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <strnlen>
    17b4:	4c 01       	movw	r8, r24
    17b6:	82 01       	movw	r16, r4
    17b8:	f3 2d       	mov	r31, r3
    17ba:	ff 77       	andi	r31, 0x7F	; 127
    17bc:	3f 2e       	mov	r3, r31
    17be:	16 c0       	rjmp	.+44     	; 0x17ec <vfprintf+0x188>
    17c0:	28 01       	movw	r4, r16
    17c2:	22 e0       	ldi	r18, 0x02	; 2
    17c4:	42 0e       	add	r4, r18
    17c6:	51 1c       	adc	r5, r1
    17c8:	f8 01       	movw	r30, r16
    17ca:	a0 80       	ld	r10, Z
    17cc:	b1 80       	ldd	r11, Z+1	; 0x01
    17ce:	36 fe       	sbrs	r3, 6
    17d0:	03 c0       	rjmp	.+6      	; 0x17d8 <vfprintf+0x174>
    17d2:	69 2d       	mov	r22, r9
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <vfprintf+0x178>
    17d8:	6f ef       	ldi	r22, 0xFF	; 255
    17da:	7f ef       	ldi	r23, 0xFF	; 255
    17dc:	c5 01       	movw	r24, r10
    17de:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <strnlen_P>
    17e2:	4c 01       	movw	r8, r24
    17e4:	f3 2d       	mov	r31, r3
    17e6:	f0 68       	ori	r31, 0x80	; 128
    17e8:	3f 2e       	mov	r3, r31
    17ea:	82 01       	movw	r16, r4
    17ec:	33 fc       	sbrc	r3, 3
    17ee:	1b c0       	rjmp	.+54     	; 0x1826 <vfprintf+0x1c2>
    17f0:	82 2d       	mov	r24, r2
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	88 16       	cp	r8, r24
    17f6:	99 06       	cpc	r9, r25
    17f8:	b0 f4       	brcc	.+44     	; 0x1826 <vfprintf+0x1c2>
    17fa:	b6 01       	movw	r22, r12
    17fc:	80 e2       	ldi	r24, 0x20	; 32
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <fputc>
    1804:	2a 94       	dec	r2
    1806:	f4 cf       	rjmp	.-24     	; 0x17f0 <vfprintf+0x18c>
    1808:	f5 01       	movw	r30, r10
    180a:	37 fc       	sbrc	r3, 7
    180c:	85 91       	lpm	r24, Z+
    180e:	37 fe       	sbrs	r3, 7
    1810:	81 91       	ld	r24, Z+
    1812:	5f 01       	movw	r10, r30
    1814:	b6 01       	movw	r22, r12
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <fputc>
    181c:	21 10       	cpse	r2, r1
    181e:	2a 94       	dec	r2
    1820:	21 e0       	ldi	r18, 0x01	; 1
    1822:	82 1a       	sub	r8, r18
    1824:	91 08       	sbc	r9, r1
    1826:	81 14       	cp	r8, r1
    1828:	91 04       	cpc	r9, r1
    182a:	71 f7       	brne	.-36     	; 0x1808 <vfprintf+0x1a4>
    182c:	e8 c0       	rjmp	.+464    	; 0x19fe <vfprintf+0x39a>
    182e:	84 36       	cpi	r24, 0x64	; 100
    1830:	11 f0       	breq	.+4      	; 0x1836 <vfprintf+0x1d2>
    1832:	89 36       	cpi	r24, 0x69	; 105
    1834:	41 f5       	brne	.+80     	; 0x1886 <vfprintf+0x222>
    1836:	f8 01       	movw	r30, r16
    1838:	37 fe       	sbrs	r3, 7
    183a:	07 c0       	rjmp	.+14     	; 0x184a <vfprintf+0x1e6>
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	0c 5f       	subi	r16, 0xFC	; 252
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	08 c0       	rjmp	.+16     	; 0x185a <vfprintf+0x1f6>
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	07 2e       	mov	r0, r23
    1850:	00 0c       	add	r0, r0
    1852:	88 0b       	sbc	r24, r24
    1854:	99 0b       	sbc	r25, r25
    1856:	0e 5f       	subi	r16, 0xFE	; 254
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
    185a:	f3 2d       	mov	r31, r3
    185c:	ff 76       	andi	r31, 0x6F	; 111
    185e:	3f 2e       	mov	r3, r31
    1860:	97 ff       	sbrs	r25, 7
    1862:	09 c0       	rjmp	.+18     	; 0x1876 <vfprintf+0x212>
    1864:	90 95       	com	r25
    1866:	80 95       	com	r24
    1868:	70 95       	com	r23
    186a:	61 95       	neg	r22
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	8f 4f       	sbci	r24, 0xFF	; 255
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	f0 68       	ori	r31, 0x80	; 128
    1874:	3f 2e       	mov	r3, r31
    1876:	2a e0       	ldi	r18, 0x0A	; 10
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	a3 01       	movw	r20, r6
    187c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__ultoa_invert>
    1880:	88 2e       	mov	r8, r24
    1882:	86 18       	sub	r8, r6
    1884:	45 c0       	rjmp	.+138    	; 0x1910 <vfprintf+0x2ac>
    1886:	85 37       	cpi	r24, 0x75	; 117
    1888:	31 f4       	brne	.+12     	; 0x1896 <vfprintf+0x232>
    188a:	23 2d       	mov	r18, r3
    188c:	2f 7e       	andi	r18, 0xEF	; 239
    188e:	b2 2e       	mov	r11, r18
    1890:	2a e0       	ldi	r18, 0x0A	; 10
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	25 c0       	rjmp	.+74     	; 0x18e0 <vfprintf+0x27c>
    1896:	93 2d       	mov	r25, r3
    1898:	99 7f       	andi	r25, 0xF9	; 249
    189a:	b9 2e       	mov	r11, r25
    189c:	8f 36       	cpi	r24, 0x6F	; 111
    189e:	c1 f0       	breq	.+48     	; 0x18d0 <vfprintf+0x26c>
    18a0:	18 f4       	brcc	.+6      	; 0x18a8 <vfprintf+0x244>
    18a2:	88 35       	cpi	r24, 0x58	; 88
    18a4:	79 f0       	breq	.+30     	; 0x18c4 <vfprintf+0x260>
    18a6:	b5 c0       	rjmp	.+362    	; 0x1a12 <vfprintf+0x3ae>
    18a8:	80 37       	cpi	r24, 0x70	; 112
    18aa:	19 f0       	breq	.+6      	; 0x18b2 <vfprintf+0x24e>
    18ac:	88 37       	cpi	r24, 0x78	; 120
    18ae:	21 f0       	breq	.+8      	; 0x18b8 <vfprintf+0x254>
    18b0:	b0 c0       	rjmp	.+352    	; 0x1a12 <vfprintf+0x3ae>
    18b2:	e9 2f       	mov	r30, r25
    18b4:	e0 61       	ori	r30, 0x10	; 16
    18b6:	be 2e       	mov	r11, r30
    18b8:	b4 fe       	sbrs	r11, 4
    18ba:	0d c0       	rjmp	.+26     	; 0x18d6 <vfprintf+0x272>
    18bc:	fb 2d       	mov	r31, r11
    18be:	f4 60       	ori	r31, 0x04	; 4
    18c0:	bf 2e       	mov	r11, r31
    18c2:	09 c0       	rjmp	.+18     	; 0x18d6 <vfprintf+0x272>
    18c4:	34 fe       	sbrs	r3, 4
    18c6:	0a c0       	rjmp	.+20     	; 0x18dc <vfprintf+0x278>
    18c8:	29 2f       	mov	r18, r25
    18ca:	26 60       	ori	r18, 0x06	; 6
    18cc:	b2 2e       	mov	r11, r18
    18ce:	06 c0       	rjmp	.+12     	; 0x18dc <vfprintf+0x278>
    18d0:	28 e0       	ldi	r18, 0x08	; 8
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	05 c0       	rjmp	.+10     	; 0x18e0 <vfprintf+0x27c>
    18d6:	20 e1       	ldi	r18, 0x10	; 16
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <vfprintf+0x27c>
    18dc:	20 e1       	ldi	r18, 0x10	; 16
    18de:	32 e0       	ldi	r19, 0x02	; 2
    18e0:	f8 01       	movw	r30, r16
    18e2:	b7 fe       	sbrs	r11, 7
    18e4:	07 c0       	rjmp	.+14     	; 0x18f4 <vfprintf+0x290>
    18e6:	60 81       	ld	r22, Z
    18e8:	71 81       	ldd	r23, Z+1	; 0x01
    18ea:	82 81       	ldd	r24, Z+2	; 0x02
    18ec:	93 81       	ldd	r25, Z+3	; 0x03
    18ee:	0c 5f       	subi	r16, 0xFC	; 252
    18f0:	1f 4f       	sbci	r17, 0xFF	; 255
    18f2:	06 c0       	rjmp	.+12     	; 0x1900 <vfprintf+0x29c>
    18f4:	60 81       	ld	r22, Z
    18f6:	71 81       	ldd	r23, Z+1	; 0x01
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 5f       	subi	r16, 0xFE	; 254
    18fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1900:	a3 01       	movw	r20, r6
    1902:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__ultoa_invert>
    1906:	88 2e       	mov	r8, r24
    1908:	86 18       	sub	r8, r6
    190a:	fb 2d       	mov	r31, r11
    190c:	ff 77       	andi	r31, 0x7F	; 127
    190e:	3f 2e       	mov	r3, r31
    1910:	36 fe       	sbrs	r3, 6
    1912:	0d c0       	rjmp	.+26     	; 0x192e <vfprintf+0x2ca>
    1914:	23 2d       	mov	r18, r3
    1916:	2e 7f       	andi	r18, 0xFE	; 254
    1918:	a2 2e       	mov	r10, r18
    191a:	89 14       	cp	r8, r9
    191c:	58 f4       	brcc	.+22     	; 0x1934 <vfprintf+0x2d0>
    191e:	34 fe       	sbrs	r3, 4
    1920:	0b c0       	rjmp	.+22     	; 0x1938 <vfprintf+0x2d4>
    1922:	32 fc       	sbrc	r3, 2
    1924:	09 c0       	rjmp	.+18     	; 0x1938 <vfprintf+0x2d4>
    1926:	83 2d       	mov	r24, r3
    1928:	8e 7e       	andi	r24, 0xEE	; 238
    192a:	a8 2e       	mov	r10, r24
    192c:	05 c0       	rjmp	.+10     	; 0x1938 <vfprintf+0x2d4>
    192e:	b8 2c       	mov	r11, r8
    1930:	a3 2c       	mov	r10, r3
    1932:	03 c0       	rjmp	.+6      	; 0x193a <vfprintf+0x2d6>
    1934:	b8 2c       	mov	r11, r8
    1936:	01 c0       	rjmp	.+2      	; 0x193a <vfprintf+0x2d6>
    1938:	b9 2c       	mov	r11, r9
    193a:	a4 fe       	sbrs	r10, 4
    193c:	0f c0       	rjmp	.+30     	; 0x195c <vfprintf+0x2f8>
    193e:	fe 01       	movw	r30, r28
    1940:	e8 0d       	add	r30, r8
    1942:	f1 1d       	adc	r31, r1
    1944:	80 81       	ld	r24, Z
    1946:	80 33       	cpi	r24, 0x30	; 48
    1948:	21 f4       	brne	.+8      	; 0x1952 <vfprintf+0x2ee>
    194a:	9a 2d       	mov	r25, r10
    194c:	99 7e       	andi	r25, 0xE9	; 233
    194e:	a9 2e       	mov	r10, r25
    1950:	09 c0       	rjmp	.+18     	; 0x1964 <vfprintf+0x300>
    1952:	a2 fe       	sbrs	r10, 2
    1954:	06 c0       	rjmp	.+12     	; 0x1962 <vfprintf+0x2fe>
    1956:	b3 94       	inc	r11
    1958:	b3 94       	inc	r11
    195a:	04 c0       	rjmp	.+8      	; 0x1964 <vfprintf+0x300>
    195c:	8a 2d       	mov	r24, r10
    195e:	86 78       	andi	r24, 0x86	; 134
    1960:	09 f0       	breq	.+2      	; 0x1964 <vfprintf+0x300>
    1962:	b3 94       	inc	r11
    1964:	a3 fc       	sbrc	r10, 3
    1966:	11 c0       	rjmp	.+34     	; 0x198a <vfprintf+0x326>
    1968:	a0 fe       	sbrs	r10, 0
    196a:	06 c0       	rjmp	.+12     	; 0x1978 <vfprintf+0x314>
    196c:	b2 14       	cp	r11, r2
    196e:	88 f4       	brcc	.+34     	; 0x1992 <vfprintf+0x32e>
    1970:	28 0c       	add	r2, r8
    1972:	92 2c       	mov	r9, r2
    1974:	9b 18       	sub	r9, r11
    1976:	0e c0       	rjmp	.+28     	; 0x1994 <vfprintf+0x330>
    1978:	b2 14       	cp	r11, r2
    197a:	60 f4       	brcc	.+24     	; 0x1994 <vfprintf+0x330>
    197c:	b6 01       	movw	r22, r12
    197e:	80 e2       	ldi	r24, 0x20	; 32
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <fputc>
    1986:	b3 94       	inc	r11
    1988:	f7 cf       	rjmp	.-18     	; 0x1978 <vfprintf+0x314>
    198a:	b2 14       	cp	r11, r2
    198c:	18 f4       	brcc	.+6      	; 0x1994 <vfprintf+0x330>
    198e:	2b 18       	sub	r2, r11
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <vfprintf+0x332>
    1992:	98 2c       	mov	r9, r8
    1994:	21 2c       	mov	r2, r1
    1996:	a4 fe       	sbrs	r10, 4
    1998:	10 c0       	rjmp	.+32     	; 0x19ba <vfprintf+0x356>
    199a:	b6 01       	movw	r22, r12
    199c:	80 e3       	ldi	r24, 0x30	; 48
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <fputc>
    19a4:	a2 fe       	sbrs	r10, 2
    19a6:	17 c0       	rjmp	.+46     	; 0x19d6 <vfprintf+0x372>
    19a8:	a1 fc       	sbrc	r10, 1
    19aa:	03 c0       	rjmp	.+6      	; 0x19b2 <vfprintf+0x34e>
    19ac:	88 e7       	ldi	r24, 0x78	; 120
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <vfprintf+0x352>
    19b2:	88 e5       	ldi	r24, 0x58	; 88
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	b6 01       	movw	r22, r12
    19b8:	0c c0       	rjmp	.+24     	; 0x19d2 <vfprintf+0x36e>
    19ba:	8a 2d       	mov	r24, r10
    19bc:	86 78       	andi	r24, 0x86	; 134
    19be:	59 f0       	breq	.+22     	; 0x19d6 <vfprintf+0x372>
    19c0:	a1 fe       	sbrs	r10, 1
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <vfprintf+0x364>
    19c4:	8b e2       	ldi	r24, 0x2B	; 43
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <vfprintf+0x366>
    19c8:	80 e2       	ldi	r24, 0x20	; 32
    19ca:	a7 fc       	sbrc	r10, 7
    19cc:	8d e2       	ldi	r24, 0x2D	; 45
    19ce:	b6 01       	movw	r22, r12
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <fputc>
    19d6:	89 14       	cp	r8, r9
    19d8:	38 f4       	brcc	.+14     	; 0x19e8 <vfprintf+0x384>
    19da:	b6 01       	movw	r22, r12
    19dc:	80 e3       	ldi	r24, 0x30	; 48
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <fputc>
    19e4:	9a 94       	dec	r9
    19e6:	f7 cf       	rjmp	.-18     	; 0x19d6 <vfprintf+0x372>
    19e8:	8a 94       	dec	r8
    19ea:	f3 01       	movw	r30, r6
    19ec:	e8 0d       	add	r30, r8
    19ee:	f1 1d       	adc	r31, r1
    19f0:	80 81       	ld	r24, Z
    19f2:	b6 01       	movw	r22, r12
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <fputc>
    19fa:	81 10       	cpse	r8, r1
    19fc:	f5 cf       	rjmp	.-22     	; 0x19e8 <vfprintf+0x384>
    19fe:	22 20       	and	r2, r2
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <vfprintf+0x3a0>
    1a02:	42 ce       	rjmp	.-892    	; 0x1688 <vfprintf+0x24>
    1a04:	b6 01       	movw	r22, r12
    1a06:	80 e2       	ldi	r24, 0x20	; 32
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <fputc>
    1a0e:	2a 94       	dec	r2
    1a10:	f6 cf       	rjmp	.-20     	; 0x19fe <vfprintf+0x39a>
    1a12:	f6 01       	movw	r30, r12
    1a14:	86 81       	ldd	r24, Z+6	; 0x06
    1a16:	97 81       	ldd	r25, Z+7	; 0x07
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <vfprintf+0x3ba>
    1a1a:	8f ef       	ldi	r24, 0xFF	; 255
    1a1c:	9f ef       	ldi	r25, 0xFF	; 255
    1a1e:	2b 96       	adiw	r28, 0x0b	; 11
    1a20:	e2 e1       	ldi	r30, 0x12	; 18
    1a22:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__epilogue_restores__>

00001a26 <calloc>:
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	86 9f       	mul	r24, r22
    1a30:	80 01       	movw	r16, r0
    1a32:	87 9f       	mul	r24, r23
    1a34:	10 0d       	add	r17, r0
    1a36:	96 9f       	mul	r25, r22
    1a38:	10 0d       	add	r17, r0
    1a3a:	11 24       	eor	r1, r1
    1a3c:	c8 01       	movw	r24, r16
    1a3e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <malloc>
    1a42:	ec 01       	movw	r28, r24
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	29 f0       	breq	.+10     	; 0x1a52 <calloc+0x2c>
    1a48:	a8 01       	movw	r20, r16
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <memset>
    1a52:	ce 01       	movw	r24, r28
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	08 95       	ret

00001a5e <malloc>:
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	91 05       	cpc	r25, r1
    1a6a:	10 f4       	brcc	.+4      	; 0x1a70 <malloc+0x12>
    1a6c:	82 e0       	ldi	r24, 0x02	; 2
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	e0 91 66 03 	lds	r30, 0x0366	; 0x800366 <__flp>
    1a74:	f0 91 67 03 	lds	r31, 0x0367	; 0x800367 <__flp+0x1>
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	a0 e0       	ldi	r26, 0x00	; 0
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	30 97       	sbiw	r30, 0x00	; 0
    1a82:	19 f1       	breq	.+70     	; 0x1aca <malloc+0x6c>
    1a84:	40 81       	ld	r20, Z
    1a86:	51 81       	ldd	r21, Z+1	; 0x01
    1a88:	02 81       	ldd	r16, Z+2	; 0x02
    1a8a:	13 81       	ldd	r17, Z+3	; 0x03
    1a8c:	48 17       	cp	r20, r24
    1a8e:	59 07       	cpc	r21, r25
    1a90:	c8 f0       	brcs	.+50     	; 0x1ac4 <malloc+0x66>
    1a92:	84 17       	cp	r24, r20
    1a94:	95 07       	cpc	r25, r21
    1a96:	69 f4       	brne	.+26     	; 0x1ab2 <malloc+0x54>
    1a98:	10 97       	sbiw	r26, 0x00	; 0
    1a9a:	31 f0       	breq	.+12     	; 0x1aa8 <malloc+0x4a>
    1a9c:	12 96       	adiw	r26, 0x02	; 2
    1a9e:	0c 93       	st	X, r16
    1aa0:	12 97       	sbiw	r26, 0x02	; 2
    1aa2:	13 96       	adiw	r26, 0x03	; 3
    1aa4:	1c 93       	st	X, r17
    1aa6:	27 c0       	rjmp	.+78     	; 0x1af6 <malloc+0x98>
    1aa8:	00 93 66 03 	sts	0x0366, r16	; 0x800366 <__flp>
    1aac:	10 93 67 03 	sts	0x0367, r17	; 0x800367 <__flp+0x1>
    1ab0:	22 c0       	rjmp	.+68     	; 0x1af6 <malloc+0x98>
    1ab2:	21 15       	cp	r18, r1
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	19 f0       	breq	.+6      	; 0x1abe <malloc+0x60>
    1ab8:	42 17       	cp	r20, r18
    1aba:	53 07       	cpc	r21, r19
    1abc:	18 f4       	brcc	.+6      	; 0x1ac4 <malloc+0x66>
    1abe:	9a 01       	movw	r18, r20
    1ac0:	bd 01       	movw	r22, r26
    1ac2:	ef 01       	movw	r28, r30
    1ac4:	df 01       	movw	r26, r30
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	db cf       	rjmp	.-74     	; 0x1a80 <malloc+0x22>
    1aca:	21 15       	cp	r18, r1
    1acc:	31 05       	cpc	r19, r1
    1ace:	f9 f0       	breq	.+62     	; 0x1b0e <malloc+0xb0>
    1ad0:	28 1b       	sub	r18, r24
    1ad2:	39 0b       	sbc	r19, r25
    1ad4:	24 30       	cpi	r18, 0x04	; 4
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	80 f4       	brcc	.+32     	; 0x1afa <malloc+0x9c>
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ade:	61 15       	cp	r22, r1
    1ae0:	71 05       	cpc	r23, r1
    1ae2:	21 f0       	breq	.+8      	; 0x1aec <malloc+0x8e>
    1ae4:	fb 01       	movw	r30, r22
    1ae6:	93 83       	std	Z+3, r25	; 0x03
    1ae8:	82 83       	std	Z+2, r24	; 0x02
    1aea:	04 c0       	rjmp	.+8      	; 0x1af4 <malloc+0x96>
    1aec:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <__flp+0x1>
    1af0:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <__flp>
    1af4:	fe 01       	movw	r30, r28
    1af6:	32 96       	adiw	r30, 0x02	; 2
    1af8:	44 c0       	rjmp	.+136    	; 0x1b82 <malloc+0x124>
    1afa:	fe 01       	movw	r30, r28
    1afc:	e2 0f       	add	r30, r18
    1afe:	f3 1f       	adc	r31, r19
    1b00:	81 93       	st	Z+, r24
    1b02:	91 93       	st	Z+, r25
    1b04:	22 50       	subi	r18, 0x02	; 2
    1b06:	31 09       	sbc	r19, r1
    1b08:	39 83       	std	Y+1, r19	; 0x01
    1b0a:	28 83       	st	Y, r18
    1b0c:	3a c0       	rjmp	.+116    	; 0x1b82 <malloc+0x124>
    1b0e:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <__brkval>
    1b12:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <__brkval+0x1>
    1b16:	23 2b       	or	r18, r19
    1b18:	41 f4       	brne	.+16     	; 0x1b2a <malloc+0xcc>
    1b1a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1b1e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1b22:	30 93 65 03 	sts	0x0365, r19	; 0x800365 <__brkval+0x1>
    1b26:	20 93 64 03 	sts	0x0364, r18	; 0x800364 <__brkval>
    1b2a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b2e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1b32:	21 15       	cp	r18, r1
    1b34:	31 05       	cpc	r19, r1
    1b36:	41 f4       	brne	.+16     	; 0x1b48 <malloc+0xea>
    1b38:	2d b7       	in	r18, 0x3d	; 61
    1b3a:	3e b7       	in	r19, 0x3e	; 62
    1b3c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1b40:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1b44:	24 1b       	sub	r18, r20
    1b46:	35 0b       	sbc	r19, r21
    1b48:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <__brkval>
    1b4c:	f0 91 65 03 	lds	r31, 0x0365	; 0x800365 <__brkval+0x1>
    1b50:	e2 17       	cp	r30, r18
    1b52:	f3 07       	cpc	r31, r19
    1b54:	a0 f4       	brcc	.+40     	; 0x1b7e <malloc+0x120>
    1b56:	2e 1b       	sub	r18, r30
    1b58:	3f 0b       	sbc	r19, r31
    1b5a:	28 17       	cp	r18, r24
    1b5c:	39 07       	cpc	r19, r25
    1b5e:	78 f0       	brcs	.+30     	; 0x1b7e <malloc+0x120>
    1b60:	ac 01       	movw	r20, r24
    1b62:	4e 5f       	subi	r20, 0xFE	; 254
    1b64:	5f 4f       	sbci	r21, 0xFF	; 255
    1b66:	24 17       	cp	r18, r20
    1b68:	35 07       	cpc	r19, r21
    1b6a:	48 f0       	brcs	.+18     	; 0x1b7e <malloc+0x120>
    1b6c:	4e 0f       	add	r20, r30
    1b6e:	5f 1f       	adc	r21, r31
    1b70:	50 93 65 03 	sts	0x0365, r21	; 0x800365 <__brkval+0x1>
    1b74:	40 93 64 03 	sts	0x0364, r20	; 0x800364 <__brkval>
    1b78:	81 93       	st	Z+, r24
    1b7a:	91 93       	st	Z+, r25
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <malloc+0x124>
    1b7e:	e0 e0       	ldi	r30, 0x00	; 0
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	cf 01       	movw	r24, r30
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	08 95       	ret

00001b8e <free>:
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <free+0xa>
    1b96:	81 c0       	rjmp	.+258    	; 0x1c9a <free+0x10c>
    1b98:	fc 01       	movw	r30, r24
    1b9a:	32 97       	sbiw	r30, 0x02	; 2
    1b9c:	13 82       	std	Z+3, r1	; 0x03
    1b9e:	12 82       	std	Z+2, r1	; 0x02
    1ba0:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <__flp>
    1ba4:	b0 91 67 03 	lds	r27, 0x0367	; 0x800367 <__flp+0x1>
    1ba8:	10 97       	sbiw	r26, 0x00	; 0
    1baa:	81 f4       	brne	.+32     	; 0x1bcc <free+0x3e>
    1bac:	20 81       	ld	r18, Z
    1bae:	31 81       	ldd	r19, Z+1	; 0x01
    1bb0:	82 0f       	add	r24, r18
    1bb2:	93 1f       	adc	r25, r19
    1bb4:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <__brkval>
    1bb8:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <__brkval+0x1>
    1bbc:	28 17       	cp	r18, r24
    1bbe:	39 07       	cpc	r19, r25
    1bc0:	51 f5       	brne	.+84     	; 0x1c16 <free+0x88>
    1bc2:	f0 93 65 03 	sts	0x0365, r31	; 0x800365 <__brkval+0x1>
    1bc6:	e0 93 64 03 	sts	0x0364, r30	; 0x800364 <__brkval>
    1bca:	67 c0       	rjmp	.+206    	; 0x1c9a <free+0x10c>
    1bcc:	ed 01       	movw	r28, r26
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	ce 17       	cp	r28, r30
    1bd4:	df 07       	cpc	r29, r31
    1bd6:	40 f4       	brcc	.+16     	; 0x1be8 <free+0x5a>
    1bd8:	4a 81       	ldd	r20, Y+2	; 0x02
    1bda:	5b 81       	ldd	r21, Y+3	; 0x03
    1bdc:	9e 01       	movw	r18, r28
    1bde:	41 15       	cp	r20, r1
    1be0:	51 05       	cpc	r21, r1
    1be2:	f1 f0       	breq	.+60     	; 0x1c20 <free+0x92>
    1be4:	ea 01       	movw	r28, r20
    1be6:	f5 cf       	rjmp	.-22     	; 0x1bd2 <free+0x44>
    1be8:	d3 83       	std	Z+3, r29	; 0x03
    1bea:	c2 83       	std	Z+2, r28	; 0x02
    1bec:	40 81       	ld	r20, Z
    1bee:	51 81       	ldd	r21, Z+1	; 0x01
    1bf0:	84 0f       	add	r24, r20
    1bf2:	95 1f       	adc	r25, r21
    1bf4:	c8 17       	cp	r28, r24
    1bf6:	d9 07       	cpc	r29, r25
    1bf8:	59 f4       	brne	.+22     	; 0x1c10 <free+0x82>
    1bfa:	88 81       	ld	r24, Y
    1bfc:	99 81       	ldd	r25, Y+1	; 0x01
    1bfe:	84 0f       	add	r24, r20
    1c00:	95 1f       	adc	r25, r21
    1c02:	02 96       	adiw	r24, 0x02	; 2
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0c:	93 83       	std	Z+3, r25	; 0x03
    1c0e:	82 83       	std	Z+2, r24	; 0x02
    1c10:	21 15       	cp	r18, r1
    1c12:	31 05       	cpc	r19, r1
    1c14:	29 f4       	brne	.+10     	; 0x1c20 <free+0x92>
    1c16:	f0 93 67 03 	sts	0x0367, r31	; 0x800367 <__flp+0x1>
    1c1a:	e0 93 66 03 	sts	0x0366, r30	; 0x800366 <__flp>
    1c1e:	3d c0       	rjmp	.+122    	; 0x1c9a <free+0x10c>
    1c20:	e9 01       	movw	r28, r18
    1c22:	fb 83       	std	Y+3, r31	; 0x03
    1c24:	ea 83       	std	Y+2, r30	; 0x02
    1c26:	49 91       	ld	r20, Y+
    1c28:	59 91       	ld	r21, Y+
    1c2a:	c4 0f       	add	r28, r20
    1c2c:	d5 1f       	adc	r29, r21
    1c2e:	ec 17       	cp	r30, r28
    1c30:	fd 07       	cpc	r31, r29
    1c32:	61 f4       	brne	.+24     	; 0x1c4c <free+0xbe>
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	84 0f       	add	r24, r20
    1c3a:	95 1f       	adc	r25, r21
    1c3c:	02 96       	adiw	r24, 0x02	; 2
    1c3e:	e9 01       	movw	r28, r18
    1c40:	99 83       	std	Y+1, r25	; 0x01
    1c42:	88 83       	st	Y, r24
    1c44:	82 81       	ldd	r24, Z+2	; 0x02
    1c46:	93 81       	ldd	r25, Z+3	; 0x03
    1c48:	9b 83       	std	Y+3, r25	; 0x03
    1c4a:	8a 83       	std	Y+2, r24	; 0x02
    1c4c:	e0 e0       	ldi	r30, 0x00	; 0
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	12 96       	adiw	r26, 0x02	; 2
    1c52:	8d 91       	ld	r24, X+
    1c54:	9c 91       	ld	r25, X
    1c56:	13 97       	sbiw	r26, 0x03	; 3
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	19 f0       	breq	.+6      	; 0x1c62 <free+0xd4>
    1c5c:	fd 01       	movw	r30, r26
    1c5e:	dc 01       	movw	r26, r24
    1c60:	f7 cf       	rjmp	.-18     	; 0x1c50 <free+0xc2>
    1c62:	8d 91       	ld	r24, X+
    1c64:	9c 91       	ld	r25, X
    1c66:	11 97       	sbiw	r26, 0x01	; 1
    1c68:	9d 01       	movw	r18, r26
    1c6a:	2e 5f       	subi	r18, 0xFE	; 254
    1c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6e:	82 0f       	add	r24, r18
    1c70:	93 1f       	adc	r25, r19
    1c72:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <__brkval>
    1c76:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <__brkval+0x1>
    1c7a:	28 17       	cp	r18, r24
    1c7c:	39 07       	cpc	r19, r25
    1c7e:	69 f4       	brne	.+26     	; 0x1c9a <free+0x10c>
    1c80:	30 97       	sbiw	r30, 0x00	; 0
    1c82:	29 f4       	brne	.+10     	; 0x1c8e <free+0x100>
    1c84:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <__flp+0x1>
    1c88:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <__flp>
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <free+0x104>
    1c8e:	13 82       	std	Z+3, r1	; 0x03
    1c90:	12 82       	std	Z+2, r1	; 0x02
    1c92:	b0 93 65 03 	sts	0x0365, r27	; 0x800365 <__brkval+0x1>
    1c96:	a0 93 64 03 	sts	0x0364, r26	; 0x800364 <__brkval>
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	08 95       	ret

00001ca0 <strnlen_P>:
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	05 90       	lpm	r0, Z+
    1ca4:	61 50       	subi	r22, 0x01	; 1
    1ca6:	70 40       	sbci	r23, 0x00	; 0
    1ca8:	01 10       	cpse	r0, r1
    1caa:	d8 f7       	brcc	.-10     	; 0x1ca2 <strnlen_P+0x2>
    1cac:	80 95       	com	r24
    1cae:	90 95       	com	r25
    1cb0:	8e 0f       	add	r24, r30
    1cb2:	9f 1f       	adc	r25, r31
    1cb4:	08 95       	ret

00001cb6 <memset>:
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	01 c0       	rjmp	.+2      	; 0x1cbc <memset+0x6>
    1cba:	6d 93       	st	X+, r22
    1cbc:	41 50       	subi	r20, 0x01	; 1
    1cbe:	50 40       	sbci	r21, 0x00	; 0
    1cc0:	e0 f7       	brcc	.-8      	; 0x1cba <memset+0x4>
    1cc2:	08 95       	ret

00001cc4 <strnlen>:
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	61 50       	subi	r22, 0x01	; 1
    1cc8:	70 40       	sbci	r23, 0x00	; 0
    1cca:	01 90       	ld	r0, Z+
    1ccc:	01 10       	cpse	r0, r1
    1cce:	d8 f7       	brcc	.-10     	; 0x1cc6 <strnlen+0x2>
    1cd0:	80 95       	com	r24
    1cd2:	90 95       	com	r25
    1cd4:	8e 0f       	add	r24, r30
    1cd6:	9f 1f       	adc	r25, r31
    1cd8:	08 95       	ret

00001cda <fputc>:
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	fb 01       	movw	r30, r22
    1ce4:	23 81       	ldd	r18, Z+3	; 0x03
    1ce6:	21 fd       	sbrc	r18, 1
    1ce8:	03 c0       	rjmp	.+6      	; 0x1cf0 <fputc+0x16>
    1cea:	8f ef       	ldi	r24, 0xFF	; 255
    1cec:	9f ef       	ldi	r25, 0xFF	; 255
    1cee:	2c c0       	rjmp	.+88     	; 0x1d48 <fputc+0x6e>
    1cf0:	22 ff       	sbrs	r18, 2
    1cf2:	16 c0       	rjmp	.+44     	; 0x1d20 <fputc+0x46>
    1cf4:	46 81       	ldd	r20, Z+6	; 0x06
    1cf6:	57 81       	ldd	r21, Z+7	; 0x07
    1cf8:	24 81       	ldd	r18, Z+4	; 0x04
    1cfa:	35 81       	ldd	r19, Z+5	; 0x05
    1cfc:	42 17       	cp	r20, r18
    1cfe:	53 07       	cpc	r21, r19
    1d00:	44 f4       	brge	.+16     	; 0x1d12 <fputc+0x38>
    1d02:	a0 81       	ld	r26, Z
    1d04:	b1 81       	ldd	r27, Z+1	; 0x01
    1d06:	9d 01       	movw	r18, r26
    1d08:	2f 5f       	subi	r18, 0xFF	; 255
    1d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0c:	31 83       	std	Z+1, r19	; 0x01
    1d0e:	20 83       	st	Z, r18
    1d10:	8c 93       	st	X, r24
    1d12:	26 81       	ldd	r18, Z+6	; 0x06
    1d14:	37 81       	ldd	r19, Z+7	; 0x07
    1d16:	2f 5f       	subi	r18, 0xFF	; 255
    1d18:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1a:	37 83       	std	Z+7, r19	; 0x07
    1d1c:	26 83       	std	Z+6, r18	; 0x06
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <fputc+0x6e>
    1d20:	8b 01       	movw	r16, r22
    1d22:	ec 01       	movw	r28, r24
    1d24:	fb 01       	movw	r30, r22
    1d26:	00 84       	ldd	r0, Z+8	; 0x08
    1d28:	f1 85       	ldd	r31, Z+9	; 0x09
    1d2a:	e0 2d       	mov	r30, r0
    1d2c:	09 95       	icall
    1d2e:	89 2b       	or	r24, r25
    1d30:	e1 f6       	brne	.-72     	; 0x1cea <fputc+0x10>
    1d32:	d8 01       	movw	r26, r16
    1d34:	16 96       	adiw	r26, 0x06	; 6
    1d36:	8d 91       	ld	r24, X+
    1d38:	9c 91       	ld	r25, X
    1d3a:	17 97       	sbiw	r26, 0x07	; 7
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	17 96       	adiw	r26, 0x07	; 7
    1d40:	9c 93       	st	X, r25
    1d42:	8e 93       	st	-X, r24
    1d44:	16 97       	sbiw	r26, 0x06	; 6
    1d46:	ce 01       	movw	r24, r28
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	08 95       	ret

00001d52 <__ultoa_invert>:
    1d52:	fa 01       	movw	r30, r20
    1d54:	aa 27       	eor	r26, r26
    1d56:	28 30       	cpi	r18, 0x08	; 8
    1d58:	51 f1       	breq	.+84     	; 0x1dae <__ultoa_invert+0x5c>
    1d5a:	20 31       	cpi	r18, 0x10	; 16
    1d5c:	81 f1       	breq	.+96     	; 0x1dbe <__ultoa_invert+0x6c>
    1d5e:	e8 94       	clt
    1d60:	6f 93       	push	r22
    1d62:	6e 7f       	andi	r22, 0xFE	; 254
    1d64:	6e 5f       	subi	r22, 0xFE	; 254
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	af 4f       	sbci	r26, 0xFF	; 255
    1d6e:	b1 e0       	ldi	r27, 0x01	; 1
    1d70:	3e d0       	rcall	.+124    	; 0x1dee <__ultoa_invert+0x9c>
    1d72:	b4 e0       	ldi	r27, 0x04	; 4
    1d74:	3c d0       	rcall	.+120    	; 0x1dee <__ultoa_invert+0x9c>
    1d76:	67 0f       	add	r22, r23
    1d78:	78 1f       	adc	r23, r24
    1d7a:	89 1f       	adc	r24, r25
    1d7c:	9a 1f       	adc	r25, r26
    1d7e:	a1 1d       	adc	r26, r1
    1d80:	68 0f       	add	r22, r24
    1d82:	79 1f       	adc	r23, r25
    1d84:	8a 1f       	adc	r24, r26
    1d86:	91 1d       	adc	r25, r1
    1d88:	a1 1d       	adc	r26, r1
    1d8a:	6a 0f       	add	r22, r26
    1d8c:	71 1d       	adc	r23, r1
    1d8e:	81 1d       	adc	r24, r1
    1d90:	91 1d       	adc	r25, r1
    1d92:	a1 1d       	adc	r26, r1
    1d94:	20 d0       	rcall	.+64     	; 0x1dd6 <__ultoa_invert+0x84>
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <__ultoa_invert+0x48>
    1d98:	68 94       	set
    1d9a:	3f 91       	pop	r19
    1d9c:	2a e0       	ldi	r18, 0x0A	; 10
    1d9e:	26 9f       	mul	r18, r22
    1da0:	11 24       	eor	r1, r1
    1da2:	30 19       	sub	r19, r0
    1da4:	30 5d       	subi	r19, 0xD0	; 208
    1da6:	31 93       	st	Z+, r19
    1da8:	de f6       	brtc	.-74     	; 0x1d60 <__ultoa_invert+0xe>
    1daa:	cf 01       	movw	r24, r30
    1dac:	08 95       	ret
    1dae:	46 2f       	mov	r20, r22
    1db0:	47 70       	andi	r20, 0x07	; 7
    1db2:	40 5d       	subi	r20, 0xD0	; 208
    1db4:	41 93       	st	Z+, r20
    1db6:	b3 e0       	ldi	r27, 0x03	; 3
    1db8:	0f d0       	rcall	.+30     	; 0x1dd8 <__ultoa_invert+0x86>
    1dba:	c9 f7       	brne	.-14     	; 0x1dae <__ultoa_invert+0x5c>
    1dbc:	f6 cf       	rjmp	.-20     	; 0x1daa <__ultoa_invert+0x58>
    1dbe:	46 2f       	mov	r20, r22
    1dc0:	4f 70       	andi	r20, 0x0F	; 15
    1dc2:	40 5d       	subi	r20, 0xD0	; 208
    1dc4:	4a 33       	cpi	r20, 0x3A	; 58
    1dc6:	18 f0       	brcs	.+6      	; 0x1dce <__ultoa_invert+0x7c>
    1dc8:	49 5d       	subi	r20, 0xD9	; 217
    1dca:	31 fd       	sbrc	r19, 1
    1dcc:	40 52       	subi	r20, 0x20	; 32
    1dce:	41 93       	st	Z+, r20
    1dd0:	02 d0       	rcall	.+4      	; 0x1dd6 <__ultoa_invert+0x84>
    1dd2:	a9 f7       	brne	.-22     	; 0x1dbe <__ultoa_invert+0x6c>
    1dd4:	ea cf       	rjmp	.-44     	; 0x1daa <__ultoa_invert+0x58>
    1dd6:	b4 e0       	ldi	r27, 0x04	; 4
    1dd8:	a6 95       	lsr	r26
    1dda:	97 95       	ror	r25
    1ddc:	87 95       	ror	r24
    1dde:	77 95       	ror	r23
    1de0:	67 95       	ror	r22
    1de2:	ba 95       	dec	r27
    1de4:	c9 f7       	brne	.-14     	; 0x1dd8 <__ultoa_invert+0x86>
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	61 05       	cpc	r22, r1
    1dea:	71 05       	cpc	r23, r1
    1dec:	08 95       	ret
    1dee:	9b 01       	movw	r18, r22
    1df0:	ac 01       	movw	r20, r24
    1df2:	0a 2e       	mov	r0, r26
    1df4:	06 94       	lsr	r0
    1df6:	57 95       	ror	r21
    1df8:	47 95       	ror	r20
    1dfa:	37 95       	ror	r19
    1dfc:	27 95       	ror	r18
    1dfe:	ba 95       	dec	r27
    1e00:	c9 f7       	brne	.-14     	; 0x1df4 <__ultoa_invert+0xa2>
    1e02:	62 0f       	add	r22, r18
    1e04:	73 1f       	adc	r23, r19
    1e06:	84 1f       	adc	r24, r20
    1e08:	95 1f       	adc	r25, r21
    1e0a:	a0 1d       	adc	r26, r0
    1e0c:	08 95       	ret

00001e0e <__prologue_saves__>:
    1e0e:	2f 92       	push	r2
    1e10:	3f 92       	push	r3
    1e12:	4f 92       	push	r4
    1e14:	5f 92       	push	r5
    1e16:	6f 92       	push	r6
    1e18:	7f 92       	push	r7
    1e1a:	8f 92       	push	r8
    1e1c:	9f 92       	push	r9
    1e1e:	af 92       	push	r10
    1e20:	bf 92       	push	r11
    1e22:	cf 92       	push	r12
    1e24:	df 92       	push	r13
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	ca 1b       	sub	r28, r26
    1e38:	db 0b       	sbc	r29, r27
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	09 94       	ijmp

00001e46 <__epilogue_restores__>:
    1e46:	2a 88       	ldd	r2, Y+18	; 0x12
    1e48:	39 88       	ldd	r3, Y+17	; 0x11
    1e4a:	48 88       	ldd	r4, Y+16	; 0x10
    1e4c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e4e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e50:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e52:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e54:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e56:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e58:	b9 84       	ldd	r11, Y+9	; 0x09
    1e5a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e5c:	df 80       	ldd	r13, Y+7	; 0x07
    1e5e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e60:	fd 80       	ldd	r15, Y+5	; 0x05
    1e62:	0c 81       	ldd	r16, Y+4	; 0x04
    1e64:	1b 81       	ldd	r17, Y+3	; 0x03
    1e66:	aa 81       	ldd	r26, Y+2	; 0x02
    1e68:	b9 81       	ldd	r27, Y+1	; 0x01
    1e6a:	ce 0f       	add	r28, r30
    1e6c:	d1 1d       	adc	r29, r1
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	ed 01       	movw	r28, r26
    1e7a:	08 95       	ret

00001e7c <_exit>:
    1e7c:	f8 94       	cli

00001e7e <__stop_program>:
    1e7e:	ff cf       	rjmp	.-2      	; 0x1e7e <__stop_program>
