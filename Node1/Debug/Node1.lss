
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e2  00800100  00001e90  00001f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  008002e2  008002e2  00002106  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002106  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dbb  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013b2  00000000  00000000  000051fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016a5  00000000  00000000  000065ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e4  00000000  00000000  00007c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000934  00000000  00000000  00008338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013fc  00000000  00000000  00008c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	e0 e9       	ldi	r30, 0x90	; 144
     6d4:	fe e1       	ldi	r31, 0x1E	; 30
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	a2 3e       	cpi	r26, 0xE2	; 226
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	a2 ee       	ldi	r26, 0xE2	; 226
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	ac 38       	cpi	r26, 0x8C	; 140
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 6b 05 	call	0xad6	; 0xad6 <main>
     6f6:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <adc_init>:
#include <avr/io.h>


void adc_init(){
	// Set pin as output
	DDRD |= (1<<DDD4);
     6fe:	81 b3       	in	r24, 0x11	; 17
     700:	80 61       	ori	r24, 0x10	; 16
     702:	81 bb       	out	0x11, r24	; 17
	
	// Toggle output pin on compare match with counter
	TCCR3A = (1<<COM3A0);
     704:	80 e4       	ldi	r24, 0x40	; 64
     706:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fc08b>
	
	// No clock prescaling on counter (i.e. update every clock cycle)
	// Set counter mode to CTC (clear on match)
	TCCR3B = (1<<WGM32)|(1<<CS30);
     70a:	89 e0       	ldi	r24, 0x09	; 9
     70c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fc08a>
	
	// Value to be matched (0 = toggle output each cycle)
	OCR3A = 0;
     710:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     714:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     718:	08 95       	ret

0000071a <adc_read>:
		uint8_t digitalVal = 0;
		
		// Write anything to the ADC to trigger a conversion
		// Triggers the chip select and write control strobe when external memory interface is active
		volatile char* mem_adc = (char *) DEF_ADR_ADC;
		mem_adc[0] = 0;
     71a:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x1074>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     71e:	97 e2       	ldi	r25, 0x27	; 39
     720:	9a 95       	dec	r25
     722:	f1 f7       	brne	.-4      	; 0x720 <adc_read+0x6>
     724:	00 00       	nop
		uint16_t convTime = DEF_ADC_CONV_TIME;
		_delay_us(convTime);
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
     726:	85 30       	cpi	r24, 0x05	; 5
     728:	40 f0       	brcs	.+16     	; 0x73a <adc_read+0x20>
}


volatile uint8_t adc_read(uint8_t channel){
		// Set up return data
		uint8_t digitalVal = 0;
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e c0       	rjmp	.+28     	; 0x74a <adc_read+0x30>
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
			for (int i = 0; i <= channel; ++i){
				digitalVal = mem_adc[i];
     72e:	f9 01       	movw	r30, r18
     730:	fc 5e       	subi	r31, 0xEC	; 236
     732:	90 81       	ld	r25, Z
		_delay_us(convTime);
		//_delay_ms(convTime);

		// Read requested channel
		if (channel <= DEF_ADC_CHANNELS){ // Returns 0 if channel number is invalid
			for (int i = 0; i <= channel; ++i){
     734:	2f 5f       	subi	r18, 0xFF	; 255
     736:	3f 4f       	sbci	r19, 0xFF	; 255
     738:	03 c0       	rjmp	.+6      	; 0x740 <adc_read+0x26>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	48 2f       	mov	r20, r24
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	42 17       	cp	r20, r18
     746:	53 07       	cpc	r21, r19
     748:	94 f7       	brge	.-28     	; 0x72e <adc_read+0x14>
				digitalVal = mem_adc[i];
			}
		}
		return digitalVal;
     74a:	89 2f       	mov	r24, r25
     74c:	08 95       	ret

0000074e <can_init>:

/*
* Initialize CAN Bus controller via SPI, in loopback mode (for testing)
*/
void can_init_loopback(void){
	mcp2515_init_loopback();
     74e:	0e 94 00 07 	call	0xe00	; 0xe00 <mcp2515_init>
     752:	08 95       	ret

00000754 <can_recv>:

/*
* Receive a CAN message via MCP2515
* @param	msg		Received CAN Message
*/
void can_recv(CanMsg* msg){
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	8c 01       	movw	r16, r24
	msg->id = (mcp2515_read(MCP_RXB0SIDH)<<3); // Read top 8 bits
     75e:	81 e6       	ldi	r24, 0x61	; 97
     760:	0e 94 a3 06 	call	0xd46	; 0xd46 <mcp2515_read>
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	88 0f       	add	r24, r24
     768:	99 1f       	adc	r25, r25
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	88 0f       	add	r24, r24
     770:	99 1f       	adc	r25, r25
     772:	f8 01       	movw	r30, r16
     774:	91 83       	std	Z+1, r25	; 0x01
     776:	80 83       	st	Z, r24
	msg->id |= (mcp2515_read(MCP_RXB0SIDL)>>5) & 0b111; // Read bottom 3 bits
     778:	82 e6       	ldi	r24, 0x62	; 98
     77a:	0e 94 a3 06 	call	0xd46	; 0xd46 <mcp2515_read>
     77e:	28 2f       	mov	r18, r24
     780:	22 95       	swap	r18
     782:	26 95       	lsr	r18
     784:	27 70       	andi	r18, 0x07	; 7
     786:	f8 01       	movw	r30, r16
     788:	80 81       	ld	r24, Z
     78a:	91 81       	ldd	r25, Z+1	; 0x01
     78c:	82 2b       	or	r24, r18
     78e:	91 83       	std	Z+1, r25	; 0x01
     790:	80 83       	st	Z, r24
	msg->len = mcp2515_read(MCP_RXB0DLC);		// Read message length
     792:	85 e6       	ldi	r24, 0x65	; 101
     794:	0e 94 a3 06 	call	0xd46	; 0xd46 <mcp2515_read>
     798:	f8 01       	movw	r30, r16
     79a:	82 83       	std	Z+2, r24	; 0x02
	for (int i = 0; i<msg->len; i++){
     79c:	c0 e0       	ldi	r28, 0x00	; 0
     79e:	d0 e0       	ldi	r29, 0x00	; 0
     7a0:	09 c0       	rjmp	.+18     	; 0x7b4 <can_recv+0x60>
		msg->data[i] = mcp2515_read(MCP_RXB0D0 + i);
     7a2:	8c 2f       	mov	r24, r28
     7a4:	8a 59       	subi	r24, 0x9A	; 154
     7a6:	0e 94 a3 06 	call	0xd46	; 0xd46 <mcp2515_read>
     7aa:	f8 01       	movw	r30, r16
     7ac:	ec 0f       	add	r30, r28
     7ae:	fd 1f       	adc	r31, r29
     7b0:	83 83       	std	Z+3, r24	; 0x03
*/
void can_recv(CanMsg* msg){
	msg->id = (mcp2515_read(MCP_RXB0SIDH)<<3); // Read top 8 bits
	msg->id |= (mcp2515_read(MCP_RXB0SIDL)>>5) & 0b111; // Read bottom 3 bits
	msg->len = mcp2515_read(MCP_RXB0DLC);		// Read message length
	for (int i = 0; i<msg->len; i++){
     7b2:	21 96       	adiw	r28, 0x01	; 1
     7b4:	f8 01       	movw	r30, r16
     7b6:	82 81       	ldd	r24, Z+2	; 0x02
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	c8 17       	cp	r28, r24
     7bc:	d9 07       	cpc	r29, r25
     7be:	8c f3       	brlt	.-30     	; 0x7a2 <can_recv+0x4e>
		msg->data[i] = mcp2515_read(MCP_RXB0D0 + i);
	}
	mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0); // Reset receive buffer
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	8c e2       	ldi	r24, 0x2C	; 44
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 d4 06 	call	0xda8	; 0xda8 <mcp2515_bit_modify>
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <can_send>:

/*
* Send a CAN message via MCP2515
* @param	msg		CAN message to send
*/
void can_send(CanMsg* msg){
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	8c 01       	movw	r16, r24
	mcp2515_write(TXB0SIDH, msg->id>>3);	// Write top 8 bits of ID
     7e4:	fc 01       	movw	r30, r24
     7e6:	60 81       	ld	r22, Z
     7e8:	71 81       	ldd	r23, Z+1	; 0x01
     7ea:	76 95       	lsr	r23
     7ec:	67 95       	ror	r22
     7ee:	76 95       	lsr	r23
     7f0:	67 95       	ror	r22
     7f2:	76 95       	lsr	r23
     7f4:	67 95       	ror	r22
     7f6:	81 e3       	ldi	r24, 0x31	; 49
     7f8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <mcp2515_write>
	mcp2515_write(TXB0SIDL, msg->id<<5);	// Write bottom 3 bits of ID (to MSb of register)
     7fc:	f8 01       	movw	r30, r16
     7fe:	60 81       	ld	r22, Z
     800:	62 95       	swap	r22
     802:	66 0f       	add	r22, r22
     804:	60 7e       	andi	r22, 0xE0	; 224
     806:	82 e3       	ldi	r24, 0x32	; 50
     808:	0e 94 b5 06 	call	0xd6a	; 0xd6a <mcp2515_write>
	mcp2515_write(TXB0DLC, msg->len);		// Write length of message
     80c:	f8 01       	movw	r30, r16
     80e:	62 81       	ldd	r22, Z+2	; 0x02
     810:	85 e3       	ldi	r24, 0x35	; 53
     812:	0e 94 b5 06 	call	0xd6a	; 0xd6a <mcp2515_write>
	for(int i=0; i<msg->len; i++){
     816:	c0 e0       	ldi	r28, 0x00	; 0
     818:	d0 e0       	ldi	r29, 0x00	; 0
     81a:	09 c0       	rjmp	.+18     	; 0x82e <can_send+0x54>
		mcp2515_write(TXB0D0 + i, msg->data[i]);
     81c:	f8 01       	movw	r30, r16
     81e:	ec 0f       	add	r30, r28
     820:	fd 1f       	adc	r31, r29
     822:	63 81       	ldd	r22, Z+3	; 0x03
     824:	8c 2f       	mov	r24, r28
     826:	8a 5c       	subi	r24, 0xCA	; 202
     828:	0e 94 b5 06 	call	0xd6a	; 0xd6a <mcp2515_write>
*/
void can_send(CanMsg* msg){
	mcp2515_write(TXB0SIDH, msg->id>>3);	// Write top 8 bits of ID
	mcp2515_write(TXB0SIDL, msg->id<<5);	// Write bottom 3 bits of ID (to MSb of register)
	mcp2515_write(TXB0DLC, msg->len);		// Write length of message
	for(int i=0; i<msg->len; i++){
     82c:	21 96       	adiw	r28, 0x01	; 1
     82e:	f8 01       	movw	r30, r16
     830:	82 81       	ldd	r24, Z+2	; 0x02
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	c8 17       	cp	r28, r24
     836:	d9 07       	cpc	r29, r25
     838:	8c f3       	brlt	.-30     	; 0x81c <can_send+0x42>
		mcp2515_write(TXB0D0 + i, msg->data[i]);
	}
	mcp2515_request_to_send(MCP_RTS_TX0); // Request to send via transmit buffer 0
     83a:	81 e8       	ldi	r24, 0x81	; 129
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 cb 06 	call	0xd96	; 0xd96 <mcp2515_request_to_send>
}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	08 95       	ret

0000084c <gamepad_init>:
#include "adc.h"
#include "gamepad.h"


void gamepad_init(){
	PORTB |= (1 << PB2); // Set pullup resistor for input
     84c:	88 b3       	in	r24, 0x18	; 24
     84e:	84 60       	ori	r24, 0x04	; 4
     850:	88 bb       	out	0x18, r24	; 24
	DDRB &= ~(0 << DDB2); // Set PB2 to 0 (input for joystick button)
     852:	87 b3       	in	r24, 0x17	; 23
     854:	87 bb       	out	0x17, r24	; 23
     856:	08 95       	ret

00000858 <read_gamepad>:
}

Gamepad read_gamepad(Gamepad gp){
     858:	af 92       	push	r10
     85a:	bf 92       	push	r11
     85c:	cf 92       	push	r12
     85e:	df 92       	push	r13
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	2e 97       	sbiw	r28, 0x0e	; 14
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	8c 01       	movw	r16, r24
     87e:	29 87       	std	Y+9, r18	; 0x09
     880:	3a 87       	std	Y+10, r19	; 0x0a
     882:	4b 87       	std	Y+11, r20	; 0x0b
     884:	5c 87       	std	Y+12, r21	; 0x0c
     886:	6d 87       	std	Y+13, r22	; 0x0d
     888:	7e 87       	std	Y+14, r23	; 0x0e
	gp.pos_x = (int16_t)adc_read(CH_JOYSTICK_X);
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	9a 83       	std	Y+2, r25	; 0x02
     894:	89 83       	std	Y+1, r24	; 0x01
	gp.pos_y = (int16_t)adc_read(CH_JOYSTICK_Y);
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	9c 83       	std	Y+4, r25	; 0x04
     8a0:	8b 83       	std	Y+3, r24	; 0x03
	gp.pos_left = (int16_t)adc_read(CH_SLIDER_LEFT);
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	9e 83       	std	Y+6, r25	; 0x06
     8ac:	8d 83       	std	Y+5, r24	; 0x05
	gp.pos_right = (int16_t)adc_read(CH_SLIDER_RIGHT);
     8ae:	83 e0       	ldi	r24, 0x03	; 3
     8b0:	0e 94 8d 03 	call	0x71a	; 0x71a <adc_read>
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	98 87       	std	Y+8, r25	; 0x08
     8b8:	8f 83       	std	Y+7, r24	; 0x07
	gp.btn = !((PINB & (1 << PB2)) >> PB2);
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	b2 99       	sbic	0x16, 2	; 22
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	8d 87       	std	Y+13, r24	; 0x0d
	
	// printf("RAW X: %d    -    Y: %d    -    L: %d    -    R: %d\r\n\r\n", gp.pos_x, gp.pos_y, gp.pos_left, gp.pos_right);

	return gp;
     8c2:	8e e0       	ldi	r24, 0x0E	; 14
     8c4:	fe 01       	movw	r30, r28
     8c6:	31 96       	adiw	r30, 0x01	; 1
     8c8:	d8 01       	movw	r26, r16
     8ca:	01 90       	ld	r0, Z+
     8cc:	0d 92       	st	X+, r0
     8ce:	8a 95       	dec	r24
     8d0:	e1 f7       	brne	.-8      	; 0x8ca <read_gamepad+0x72>
}
     8d2:	c8 01       	movw	r24, r16
     8d4:	2e 96       	adiw	r28, 0x0e	; 14
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	ff 90       	pop	r15
     8ea:	ef 90       	pop	r14
     8ec:	df 90       	pop	r13
     8ee:	cf 90       	pop	r12
     8f0:	bf 90       	pop	r11
     8f2:	af 90       	pop	r10
     8f4:	08 95       	ret

000008f6 <calibrate_gamepad>:

Gamepad calibrate_gamepad(Gamepad input){
     8f6:	af 92       	push	r10
     8f8:	bf 92       	push	r11
     8fa:	cf 92       	push	r12
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	2e 97       	sbiw	r28, 0x0e	; 14
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	fc 01       	movw	r30, r24
     91c:	a9 82       	std	Y+1, r10	; 0x01
     91e:	ba 82       	std	Y+2, r11	; 0x02
     920:	cb 82       	std	Y+3, r12	; 0x03
     922:	dc 82       	std	Y+4, r13	; 0x04
     924:	ed 82       	std	Y+5, r14	; 0x05
     926:	fe 82       	std	Y+6, r15	; 0x06
     928:	0f 83       	std	Y+7, r16	; 0x07
     92a:	18 87       	std	Y+8, r17	; 0x08
     92c:	6d 87       	std	Y+13, r22	; 0x0d
	Gamepad gp;
	
	gp.pos_x = ((input.pos_x - 127) * 100 / 120) - gp.offset_x; // Get direction as a percentage between -100 to +100
     92e:	29 81       	ldd	r18, Y+1	; 0x01
     930:	3a 81       	ldd	r19, Y+2	; 0x02
     932:	2f 57       	subi	r18, 0x7F	; 127
     934:	31 09       	sbc	r19, r1
     936:	44 e6       	ldi	r20, 0x64	; 100
     938:	42 9f       	mul	r20, r18
     93a:	c0 01       	movw	r24, r0
     93c:	43 9f       	mul	r20, r19
     93e:	90 0d       	add	r25, r0
     940:	11 24       	eor	r1, r1
     942:	68 e7       	ldi	r22, 0x78	; 120
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__divmodhi4>
     94a:	80 85       	ldd	r24, Z+8	; 0x08
     94c:	91 85       	ldd	r25, Z+9	; 0x09
     94e:	68 1b       	sub	r22, r24
     950:	79 0b       	sbc	r23, r25
     952:	71 83       	std	Z+1, r23	; 0x01
     954:	60 83       	st	Z, r22
	if (gp.pos_x > 100){gp.pos_x = 100;} else if (gp.pos_x < -100){gp.pos_x = -100;}
     956:	65 36       	cpi	r22, 0x65	; 101
     958:	71 05       	cpc	r23, r1
     95a:	2c f0       	brlt	.+10     	; 0x966 <calibrate_gamepad+0x70>
     95c:	84 e6       	ldi	r24, 0x64	; 100
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	91 83       	std	Z+1, r25	; 0x01
     962:	80 83       	st	Z, r24
     964:	07 c0       	rjmp	.+14     	; 0x974 <calibrate_gamepad+0x7e>
     966:	6c 39       	cpi	r22, 0x9C	; 156
     968:	7f 4f       	sbci	r23, 0xFF	; 255
     96a:	24 f4       	brge	.+8      	; 0x974 <calibrate_gamepad+0x7e>
     96c:	8c e9       	ldi	r24, 0x9C	; 156
     96e:	9f ef       	ldi	r25, 0xFF	; 255
     970:	91 83       	std	Z+1, r25	; 0x01
     972:	80 83       	st	Z, r24
	gp.pos_y = ((input.pos_y - 127) * 100 / 120) - gp.offset_y;
     974:	2b 81       	ldd	r18, Y+3	; 0x03
     976:	3c 81       	ldd	r19, Y+4	; 0x04
     978:	2f 57       	subi	r18, 0x7F	; 127
     97a:	31 09       	sbc	r19, r1
     97c:	44 e6       	ldi	r20, 0x64	; 100
     97e:	42 9f       	mul	r20, r18
     980:	c0 01       	movw	r24, r0
     982:	43 9f       	mul	r20, r19
     984:	90 0d       	add	r25, r0
     986:	11 24       	eor	r1, r1
     988:	68 e7       	ldi	r22, 0x78	; 120
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__divmodhi4>
     990:	82 85       	ldd	r24, Z+10	; 0x0a
     992:	93 85       	ldd	r25, Z+11	; 0x0b
     994:	68 1b       	sub	r22, r24
     996:	79 0b       	sbc	r23, r25
     998:	73 83       	std	Z+3, r23	; 0x03
     99a:	62 83       	std	Z+2, r22	; 0x02
	if (gp.pos_y > 100){gp.pos_y = 100;} else if (gp.pos_y < -100){gp.pos_y = -100;}
     99c:	65 36       	cpi	r22, 0x65	; 101
     99e:	71 05       	cpc	r23, r1
     9a0:	2c f0       	brlt	.+10     	; 0x9ac <calibrate_gamepad+0xb6>
     9a2:	84 e6       	ldi	r24, 0x64	; 100
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	93 83       	std	Z+3, r25	; 0x03
     9a8:	82 83       	std	Z+2, r24	; 0x02
     9aa:	07 c0       	rjmp	.+14     	; 0x9ba <calibrate_gamepad+0xc4>
     9ac:	6c 39       	cpi	r22, 0x9C	; 156
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	24 f4       	brge	.+8      	; 0x9ba <calibrate_gamepad+0xc4>
     9b2:	8c e9       	ldi	r24, 0x9C	; 156
     9b4:	9f ef       	ldi	r25, 0xFF	; 255
     9b6:	93 83       	std	Z+3, r25	; 0x03
     9b8:	82 83       	std	Z+2, r24	; 0x02
	gp.pos_left = (input.pos_left - 127) * 100 / 127;
     9ba:	2d 81       	ldd	r18, Y+5	; 0x05
     9bc:	3e 81       	ldd	r19, Y+6	; 0x06
     9be:	2f 57       	subi	r18, 0x7F	; 127
     9c0:	31 09       	sbc	r19, r1
     9c2:	44 e6       	ldi	r20, 0x64	; 100
     9c4:	42 9f       	mul	r20, r18
     9c6:	c0 01       	movw	r24, r0
     9c8:	43 9f       	mul	r20, r19
     9ca:	90 0d       	add	r25, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	0f e7       	ldi	r16, 0x7F	; 127
     9d0:	10 e0       	ldi	r17, 0x00	; 0
     9d2:	b8 01       	movw	r22, r16
     9d4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__divmodhi4>
     9d8:	75 83       	std	Z+5, r23	; 0x05
     9da:	64 83       	std	Z+4, r22	; 0x04
	gp.pos_right = (input.pos_right - 127) * 100 / 127;
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	2f 57       	subi	r18, 0x7F	; 127
     9e2:	31 09       	sbc	r19, r1
     9e4:	42 9f       	mul	r20, r18
     9e6:	c0 01       	movw	r24, r0
     9e8:	43 9f       	mul	r20, r19
     9ea:	90 0d       	add	r25, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	b8 01       	movw	r22, r16
     9f0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__divmodhi4>
     9f4:	77 83       	std	Z+7, r23	; 0x07
     9f6:	66 83       	std	Z+6, r22	; 0x06
	
	gp.btn = input.btn;
     9f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9fa:	84 87       	std	Z+12, r24	; 0x0c
	
	// printf("CAL X: %d    -    Y: %d    -    L: %d    -    R: %d\r\n\r\n", gp.pos_x, gp.pos_y, gp.pos_left, gp.pos_right);
	
	return gp;
}
     9fc:	cf 01       	movw	r24, r30
     9fe:	2e 96       	adiw	r28, 0x0e	; 14
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	cf 90       	pop	r12
     a1a:	bf 90       	pop	r11
     a1c:	af 90       	pop	r10
     a1e:	08 95       	ret

00000a20 <getJoystickDir>:

Dir getJoystickDir(Gamepad gp){
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	2e 97       	sbiw	r28, 0x0e	; 14
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	c9 82       	std	Y+1, r12	; 0x01
     a42:	da 82       	std	Y+2, r13	; 0x02
     a44:	eb 82       	std	Y+3, r14	; 0x03
     a46:	fc 82       	std	Y+4, r15	; 0x04
	int16_t deadzone = 40;
	Dir direction = NONE; // Default

	if (gp.pos_x < deadzone && gp.pos_x > -deadzone && gp.pos_y < deadzone && gp.pos_y > -deadzone){
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	9a 81       	ldd	r25, Y+2	; 0x02
     a4c:	88 32       	cpi	r24, 0x28	; 40
     a4e:	91 05       	cpc	r25, r1
     a50:	64 f4       	brge	.+24     	; 0xa6a <getJoystickDir+0x4a>
     a52:	89 3d       	cpi	r24, 0xD9	; 217
     a54:	2f ef       	ldi	r18, 0xFF	; 255
     a56:	92 07       	cpc	r25, r18
     a58:	44 f0       	brlt	.+16     	; 0xa6a <getJoystickDir+0x4a>
     a5a:	2b 81       	ldd	r18, Y+3	; 0x03
     a5c:	3c 81       	ldd	r19, Y+4	; 0x04
     a5e:	28 32       	cpi	r18, 0x28	; 40
     a60:	31 05       	cpc	r19, r1
     a62:	1c f4       	brge	.+6      	; 0xa6a <getJoystickDir+0x4a>
     a64:	29 3d       	cpi	r18, 0xD9	; 217
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	04 f5       	brge	.+64     	; 0xaaa <getJoystickDir+0x8a>
		direction = NONE;

	} else if (abs(gp.pos_x) >= abs(gp.pos_y)){
     a6a:	ac 01       	movw	r20, r24
     a6c:	99 23       	and	r25, r25
     a6e:	24 f4       	brge	.+8      	; 0xa78 <getJoystickDir+0x58>
     a70:	44 27       	eor	r20, r20
     a72:	55 27       	eor	r21, r21
     a74:	48 1b       	sub	r20, r24
     a76:	59 0b       	sbc	r21, r25
     a78:	6b 81       	ldd	r22, Y+3	; 0x03
     a7a:	7c 81       	ldd	r23, Y+4	; 0x04
     a7c:	9b 01       	movw	r18, r22
     a7e:	77 23       	and	r23, r23
     a80:	24 f4       	brge	.+8      	; 0xa8a <getJoystickDir+0x6a>
     a82:	22 27       	eor	r18, r18
     a84:	33 27       	eor	r19, r19
     a86:	26 1b       	sub	r18, r22
     a88:	37 0b       	sbc	r19, r23
     a8a:	42 17       	cp	r20, r18
     a8c:	53 07       	cpc	r21, r19
     a8e:	2c f0       	brlt	.+10     	; 0xa9a <getJoystickDir+0x7a>
		if (gp.pos_x > 0){
     a90:	18 16       	cp	r1, r24
     a92:	19 06       	cpc	r1, r25
     a94:	64 f4       	brge	.+24     	; 0xaae <getJoystickDir+0x8e>
			direction = RIGHT;
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	0f c0       	rjmp	.+30     	; 0xab8 <getJoystickDir+0x98>
		} else{
			direction = LEFT;
		}

	} else if (abs(gp.pos_y) > abs(gp.pos_x)){
     a9a:	42 17       	cp	r20, r18
     a9c:	53 07       	cpc	r21, r19
     a9e:	4c f4       	brge	.+18     	; 0xab2 <getJoystickDir+0x92>
		if (gp.pos_y > 0){
     aa0:	16 16       	cp	r1, r22
     aa2:	17 06       	cpc	r1, r23
     aa4:	44 f4       	brge	.+16     	; 0xab6 <getJoystickDir+0x96>
			direction = UP;
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	07 c0       	rjmp	.+14     	; 0xab8 <getJoystickDir+0x98>
Dir getJoystickDir(Gamepad gp){
	int16_t deadzone = 40;
	Dir direction = NONE; // Default

	if (gp.pos_x < deadzone && gp.pos_x > -deadzone && gp.pos_y < deadzone && gp.pos_y > -deadzone){
		direction = NONE;
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <getJoystickDir+0x98>

	} else if (abs(gp.pos_x) >= abs(gp.pos_y)){
		if (gp.pos_x > 0){
			direction = RIGHT;
		} else{
			direction = LEFT;
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <getJoystickDir+0x98>
	return gp;
}

Dir getJoystickDir(Gamepad gp){
	int16_t deadzone = 40;
	Dir direction = NONE; // Default
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	01 c0       	rjmp	.+2      	; 0xab8 <getJoystickDir+0x98>

	} else if (abs(gp.pos_y) > abs(gp.pos_x)){
		if (gp.pos_y > 0){
			direction = UP;
		}else{
			direction = DOWN;
     ab6:	84 e0       	ldi	r24, 0x04	; 4
		}
		}
		
	return direction;
}
     ab8:	2e 96       	adiw	r28, 0x0e	; 14
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	cd bf       	out	0x3d, r28	; 61
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	cf 90       	pop	r12
     ad4:	08 95       	ret

00000ad6 <main>:
#include "spi.h"
#include "mcp2515.h"
#include "can.h"
#include "game.h"

int main(void) {
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	e6 97       	sbiw	r28, 0x36	; 54
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	cd bf       	out	0x3d, r28	; 61
	UART_init(DEF_UBBR);
     aea:	8f e1       	ldi	r24, 0x1F	; 31
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 44 0a 	call	0x1488	; 0x1488 <UART_init>
	SRAM_init();
     af2:	0e 94 33 0a 	call	0x1466	; 0x1466 <SRAM_init>
	adc_init();
     af6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <adc_init>
	gamepad_init();
     afa:	0e 94 26 04 	call	0x84c	; 0x84c <gamepad_init>
	oled_init();
     afe:	0e 94 37 09 	call	0x126e	; 0x126e <oled_init>
	oled_reset();
     b02:	0e 94 a7 09 	call	0x134e	; 0x134e <oled_reset>
	menu_init();
     b06:	0e 94 9d 08 	call	0x113a	; 0x113a <menu_init>

	can_init();
     b0a:	0e 94 a7 03 	call	0x74e	; 0x74e <can_init>
	Gamepad gp;
	Dir new_gp_dir;
	Dir prev_gp_dir;
	
	// Calibrate joysticks
	gp = read_gamepad(gp);
     b0e:	a9 80       	ldd	r10, Y+1	; 0x01
     b10:	ba 80       	ldd	r11, Y+2	; 0x02
     b12:	cb 80       	ldd	r12, Y+3	; 0x03
     b14:	dc 80       	ldd	r13, Y+4	; 0x04
     b16:	ed 80       	ldd	r14, Y+5	; 0x05
     b18:	fe 80       	ldd	r15, Y+6	; 0x06
     b1a:	0f 81       	ldd	r16, Y+7	; 0x07
     b1c:	18 85       	ldd	r17, Y+8	; 0x08
     b1e:	29 85       	ldd	r18, Y+9	; 0x09
     b20:	3a 85       	ldd	r19, Y+10	; 0x0a
     b22:	4b 85       	ldd	r20, Y+11	; 0x0b
     b24:	5c 85       	ldd	r21, Y+12	; 0x0c
     b26:	6d 85       	ldd	r22, Y+13	; 0x0d
     b28:	7e 85       	ldd	r23, Y+14	; 0x0e
     b2a:	ce 01       	movw	r24, r28
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	0e 94 2c 04 	call	0x858	; 0x858 <read_gamepad>
	gp = calibrate_gamepad(gp);
     b32:	a9 80       	ldd	r10, Y+1	; 0x01
     b34:	ba 80       	ldd	r11, Y+2	; 0x02
     b36:	cb 80       	ldd	r12, Y+3	; 0x03
     b38:	dc 80       	ldd	r13, Y+4	; 0x04
     b3a:	ed 80       	ldd	r14, Y+5	; 0x05
     b3c:	fe 80       	ldd	r15, Y+6	; 0x06
     b3e:	0f 81       	ldd	r16, Y+7	; 0x07
     b40:	18 85       	ldd	r17, Y+8	; 0x08
     b42:	29 85       	ldd	r18, Y+9	; 0x09
     b44:	3a 85       	ldd	r19, Y+10	; 0x0a
     b46:	4b 85       	ldd	r20, Y+11	; 0x0b
     b48:	5c 85       	ldd	r21, Y+12	; 0x0c
     b4a:	6d 85       	ldd	r22, Y+13	; 0x0d
     b4c:	7e 85       	ldd	r23, Y+14	; 0x0e
     b4e:	ce 01       	movw	r24, r28
     b50:	85 96       	adiw	r24, 0x25	; 37
     b52:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <calibrate_gamepad>
     b56:	8e e0       	ldi	r24, 0x0E	; 14
     b58:	fe 01       	movw	r30, r28
     b5a:	b5 96       	adiw	r30, 0x25	; 37
     b5c:	de 01       	movw	r26, r28
     b5e:	11 96       	adiw	r26, 0x01	; 1
     b60:	01 90       	ld	r0, Z+
     b62:	0d 92       	st	X+, r0
     b64:	8a 95       	dec	r24
     b66:	e1 f7       	brne	.-8      	; 0xb60 <main+0x8a>
	//gp.offset_x = gp.pos_x;
	//gp.offset_y = gp.pos_y;
	
	uint32_t clk = 0;
	uint32_t prevClk = 0;
	uint8_t ballDetected = 0;
     b68:	81 2c       	mov	r8, r1
	gp = calibrate_gamepad(gp);
	//gp.offset_x = gp.pos_x;
	//gp.offset_y = gp.pos_y;
	
	uint32_t clk = 0;
	uint32_t prevClk = 0;
     b6a:	1b aa       	std	Y+51, r1	; 0x33
     b6c:	1c aa       	std	Y+52, r1	; 0x34
     b6e:	1d aa       	std	Y+53, r1	; 0x35
     b70:	1e aa       	std	Y+54, r1	; 0x36
	gp = read_gamepad(gp);
	gp = calibrate_gamepad(gp);
	//gp.offset_x = gp.pos_x;
	//gp.offset_y = gp.pos_y;
	
	uint32_t clk = 0;
     b72:	41 2c       	mov	r4, r1
     b74:	51 2c       	mov	r5, r1
     b76:	32 01       	movw	r6, r4
	
	while(1){
		// =================================================
		// Read gamepad inputs
		
		gp = read_gamepad(gp);
     b78:	a9 80       	ldd	r10, Y+1	; 0x01
     b7a:	ba 80       	ldd	r11, Y+2	; 0x02
     b7c:	cb 80       	ldd	r12, Y+3	; 0x03
     b7e:	dc 80       	ldd	r13, Y+4	; 0x04
     b80:	ed 80       	ldd	r14, Y+5	; 0x05
     b82:	fe 80       	ldd	r15, Y+6	; 0x06
     b84:	0f 81       	ldd	r16, Y+7	; 0x07
     b86:	18 85       	ldd	r17, Y+8	; 0x08
     b88:	29 85       	ldd	r18, Y+9	; 0x09
     b8a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b8c:	4b 85       	ldd	r20, Y+11	; 0x0b
     b8e:	5c 85       	ldd	r21, Y+12	; 0x0c
     b90:	6d 85       	ldd	r22, Y+13	; 0x0d
     b92:	7e 85       	ldd	r23, Y+14	; 0x0e
     b94:	ce 01       	movw	r24, r28
     b96:	85 96       	adiw	r24, 0x25	; 37
     b98:	0e 94 2c 04 	call	0x858	; 0x858 <read_gamepad>
     b9c:	8e e0       	ldi	r24, 0x0E	; 14
     b9e:	fe 01       	movw	r30, r28
     ba0:	b5 96       	adiw	r30, 0x25	; 37
     ba2:	de 01       	movw	r26, r28
     ba4:	11 96       	adiw	r26, 0x01	; 1
     ba6:	01 90       	ld	r0, Z+
     ba8:	0d 92       	st	X+, r0
     baa:	8a 95       	dec	r24
     bac:	e1 f7       	brne	.-8      	; 0xba6 <main+0xd0>
		gp = calibrate_gamepad(gp);
     bae:	a9 80       	ldd	r10, Y+1	; 0x01
     bb0:	ba 80       	ldd	r11, Y+2	; 0x02
     bb2:	cb 80       	ldd	r12, Y+3	; 0x03
     bb4:	dc 80       	ldd	r13, Y+4	; 0x04
     bb6:	ed 80       	ldd	r14, Y+5	; 0x05
     bb8:	fe 80       	ldd	r15, Y+6	; 0x06
     bba:	0f 81       	ldd	r16, Y+7	; 0x07
     bbc:	18 85       	ldd	r17, Y+8	; 0x08
     bbe:	29 85       	ldd	r18, Y+9	; 0x09
     bc0:	3a 85       	ldd	r19, Y+10	; 0x0a
     bc2:	4b 85       	ldd	r20, Y+11	; 0x0b
     bc4:	5c 85       	ldd	r21, Y+12	; 0x0c
     bc6:	6d 85       	ldd	r22, Y+13	; 0x0d
     bc8:	7e 85       	ldd	r23, Y+14	; 0x0e
     bca:	ce 01       	movw	r24, r28
     bcc:	85 96       	adiw	r24, 0x25	; 37
     bce:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <calibrate_gamepad>
     bd2:	8e e0       	ldi	r24, 0x0E	; 14
     bd4:	fe 01       	movw	r30, r28
     bd6:	b5 96       	adiw	r30, 0x25	; 37
     bd8:	de 01       	movw	r26, r28
     bda:	11 96       	adiw	r26, 0x01	; 1
     bdc:	01 90       	ld	r0, Z+
     bde:	0d 92       	st	X+, r0
     be0:	8a 95       	dec	r24
     be2:	e1 f7       	brne	.-8      	; 0xbdc <main+0x106>
		new_gp_dir = getJoystickDir(gp);
     be4:	c9 80       	ldd	r12, Y+1	; 0x01
     be6:	da 80       	ldd	r13, Y+2	; 0x02
     be8:	eb 80       	ldd	r14, Y+3	; 0x03
     bea:	fc 80       	ldd	r15, Y+4	; 0x04
     bec:	0d 81       	ldd	r16, Y+5	; 0x05
     bee:	1e 81       	ldd	r17, Y+6	; 0x06
     bf0:	2f 81       	ldd	r18, Y+7	; 0x07
     bf2:	38 85       	ldd	r19, Y+8	; 0x08
     bf4:	49 85       	ldd	r20, Y+9	; 0x09
     bf6:	5a 85       	ldd	r21, Y+10	; 0x0a
     bf8:	6b 85       	ldd	r22, Y+11	; 0x0b
     bfa:	7c 85       	ldd	r23, Y+12	; 0x0c
     bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
     c00:	0e 94 10 05 	call	0xa20	; 0xa20 <getJoystickDir>
     c04:	18 2f       	mov	r17, r24
		
		
		// =================================================
		// Display menu on OLED
		
		oled_reset();
     c06:	0e 94 a7 09 	call	0x134e	; 0x134e <oled_reset>
		if (new_gp_dir == UP && prev_gp_dir != UP ){
     c0a:	13 30       	cpi	r17, 0x03	; 3
     c0c:	39 f4       	brne	.+14     	; 0xc1c <main+0x146>
     c0e:	23 e0       	ldi	r18, 0x03	; 3
     c10:	32 16       	cp	r3, r18
     c12:	21 f0       	breq	.+8      	; 0xc1c <main+0x146>
			menu_moveCursor(-1);
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	0e 94 19 09 	call	0x1232	; 0x1232 <menu_moveCursor>
     c1a:	08 c0       	rjmp	.+16     	; 0xc2c <main+0x156>
		}
		else if (new_gp_dir == DOWN && prev_gp_dir != DOWN ){
     c1c:	14 30       	cpi	r17, 0x04	; 4
     c1e:	31 f4       	brne	.+12     	; 0xc2c <main+0x156>
     c20:	34 e0       	ldi	r19, 0x04	; 4
     c22:	33 16       	cp	r3, r19
     c24:	19 f0       	breq	.+6      	; 0xc2c <main+0x156>
			menu_moveCursor(1);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 19 09 	call	0x1232	; 0x1232 <menu_moveCursor>
		}
		if(gp.btn & !prev_gp_btn){
     c2c:	2d 85       	ldd	r18, Y+13	; 0x0d
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	99 20       	and	r9, r9
     c34:	11 f0       	breq	.+4      	; 0xc3a <main+0x164>
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	82 23       	and	r24, r18
     c3e:	93 23       	and	r25, r19
     c40:	89 2b       	or	r24, r25
     c42:	51 f0       	breq	.+20     	; 0xc58 <main+0x182>
			
			// Leave Highscore
			if (menu_is_highscore()){
     c44:	0e 94 28 09 	call	0x1250	; 0x1250 <menu_is_highscore>
     c48:	88 23       	and	r24, r24
     c4a:	19 f0       	breq	.+6      	; 0xc52 <main+0x17c>
				menu_move_back();
     c4c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <menu_move_back>
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <main+0x186>
			}else{
				menu_selectPage();
     c52:	0e 94 ee 08 	call	0x11dc	; 0x11dc <menu_selectPage>
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <main+0x186>
			}
		}else{
			menu_run();
     c58:	0e 94 1f 09 	call	0x123e	; 0x123e <menu_run>
		}
		//menu_print();
		prev_gp_dir = new_gp_dir;
		prev_gp_btn = gp.btn;
     c5c:	9d 84       	ldd	r9, Y+13	; 0x0d
		
		// =================================================
		// CAN Communications
		
		CanMsg msgOut;
		msgOut.id = 0x42; // Not used for anything, since there's only one message type
     c5e:	82 e4       	ldi	r24, 0x42	; 66
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	9b 8f       	std	Y+27, r25	; 0x1b
     c64:	8a 8f       	std	Y+26, r24	; 0x1a
		msgOut.len = 4;
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	8c 8f       	std	Y+28, r24	; 0x1c
		msgOut.data[0] = gp.pos_x;
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	8d 8f       	std	Y+29, r24	; 0x1d
		msgOut.data[1] = gp.pos_y;
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	8e 8f       	std	Y+30, r24	; 0x1e
		msgOut.data[2] = gp.btn;
     c72:	9f 8e       	std	Y+31, r9	; 0x1f
		msgOut.data[3] = DEF_GAME_ACTIVE;
     c74:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <gMem>
     c78:	81 70       	andi	r24, 0x01	; 1
     c7a:	88 a3       	std	Y+32, r24	; 0x20
		can_send(&msgOut);
     c7c:	ce 01       	movw	r24, r28
     c7e:	4a 96       	adiw	r24, 0x1a	; 26
     c80:	0e 94 ed 03 	call	0x7da	; 0x7da <can_send>
		printf("Sent: ID: %02X    -    Len: %02X    -    Dat: %02X %02X %01X %01X \r\n\r\n", msgOut.id, msgOut.len, msgOut.data[0], msgOut.data[1], msgOut.data[2], msgOut.data[3]);
     c84:	48 a1       	ldd	r20, Y+32	; 0x20
     c86:	3f 8d       	ldd	r19, Y+31	; 0x1f
     c88:	2e 8d       	ldd	r18, Y+30	; 0x1e
     c8a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c8e:	1f 92       	push	r1
     c90:	4f 93       	push	r20
     c92:	1f 92       	push	r1
     c94:	3f 93       	push	r19
     c96:	1f 92       	push	r1
     c98:	2f 93       	push	r18
     c9a:	1f 92       	push	r1
     c9c:	9f 93       	push	r25
     c9e:	1f 92       	push	r1
     ca0:	8f 93       	push	r24
     ca2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ca4:	8f 93       	push	r24
     ca6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ca8:	8f 93       	push	r24
     caa:	86 e0       	ldi	r24, 0x06	; 6
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	9f 93       	push	r25
     cb0:	8f 93       	push	r24
     cb2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <printf>

		if (mcp2515_read(MCP_CANINTF)&(0x01)){
     cb6:	8c e2       	ldi	r24, 0x2C	; 44
     cb8:	0e 94 a3 06 	call	0xd46	; 0xd46 <mcp2515_read>
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	80 ff       	sbrs	r24, 0
     cc8:	07 c0       	rjmp	.+14     	; 0xcd8 <main+0x202>
			CanMsg msgIn;
			can_recv(&msgIn);
     cca:	ce 01       	movw	r24, r28
     ccc:	0f 96       	adiw	r24, 0x0f	; 15
     cce:	0e 94 aa 03 	call	0x754	; 0x754 <can_recv>
			ballDetected = msgIn.data[0] & (1 << 0);
     cd2:	8a 89       	ldd	r24, Y+18	; 0x12
     cd4:	81 70       	andi	r24, 0x01	; 1
     cd6:	88 2e       	mov	r8, r24
		}
		
	
		// =================================================
		// Game logic - Increment score until ball is detected by IR (NB! Game is started by menu function)
		if DEF_GAME_ACTIVE{
     cd8:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <gMem>
     cdc:	80 ff       	sbrs	r24, 0
     cde:	31 c0       	rjmp	.+98     	; 0xd42 <main+0x26c>
			// Increase score based on time
			clk++;
     ce0:	5f ef       	ldi	r21, 0xFF	; 255
     ce2:	45 1a       	sub	r4, r21
     ce4:	55 0a       	sbc	r5, r21
     ce6:	65 0a       	sbc	r6, r21
     ce8:	75 0a       	sbc	r7, r21
			if ((clk > prevClk + 10)|(clk < prevClk)){
     cea:	21 e0       	ldi	r18, 0x01	; 1
     cec:	4b a9       	ldd	r20, Y+51	; 0x33
     cee:	5c a9       	ldd	r21, Y+52	; 0x34
     cf0:	6d a9       	ldd	r22, Y+53	; 0x35
     cf2:	7e a9       	ldd	r23, Y+54	; 0x36
     cf4:	46 5f       	subi	r20, 0xF6	; 246
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	6f 4f       	sbci	r22, 0xFF	; 255
     cfa:	7f 4f       	sbci	r23, 0xFF	; 255
     cfc:	44 15       	cp	r20, r4
     cfe:	55 05       	cpc	r21, r5
     d00:	66 05       	cpc	r22, r6
     d02:	77 05       	cpc	r23, r7
     d04:	08 f0       	brcs	.+2      	; 0xd08 <main+0x232>
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	4b a9       	ldd	r20, Y+51	; 0x33
     d0c:	5c a9       	ldd	r21, Y+52	; 0x34
     d0e:	6d a9       	ldd	r22, Y+53	; 0x35
     d10:	7e a9       	ldd	r23, Y+54	; 0x36
     d12:	44 16       	cp	r4, r20
     d14:	55 06       	cpc	r5, r21
     d16:	66 06       	cpc	r6, r22
     d18:	77 06       	cpc	r7, r23
     d1a:	08 f0       	brcs	.+2      	; 0xd1e <main+0x248>
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	92 2b       	or	r25, r18
     d20:	49 f0       	breq	.+18     	; 0xd34 <main+0x25e>
				gScore++;
     d22:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <__data_end>
     d26:	9f 5f       	subi	r25, 0xFF	; 255
     d28:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <__data_end>
				prevClk = clk;
     d2c:	4b aa       	std	Y+51, r4	; 0x33
     d2e:	5c aa       	std	Y+52, r5	; 0x34
     d30:	6d aa       	std	Y+53, r6	; 0x35
     d32:	7e aa       	std	Y+54, r7	; 0x36
			}
			
			if (ballDetected != 0) {
     d34:	88 20       	and	r8, r8
     d36:	29 f0       	breq	.+10     	; 0xd42 <main+0x26c>
				//end_game();
				DEF_STOP_GAME;
     d38:	8e 7f       	andi	r24, 0xFE	; 254
     d3a:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <gMem>
				menu_move_back();
     d3e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <menu_move_back>
			}
		}else{
			menu_run();
		}
		//menu_print();
		prev_gp_dir = new_gp_dir;
     d42:	31 2e       	mov	r3, r17
				DEF_STOP_GAME;
				menu_move_back();
			}
		}
	
	}
     d44:	19 cf       	rjmp	.-462    	; 0xb78 <main+0xa2>

00000d46 <mcp2515_read>:
		printf("MCP2515 Entered loopback mode B-)\r\n");
	}
}


uint8_t mcp2515_read(uint8_t adr){
     d46:	cf 93       	push	r28
     d48:	c8 2f       	mov	r28, r24
	DEF_CAN_CS_ON;
     d4a:	88 b3       	in	r24, 0x18	; 24
     d4c:	8f 7e       	andi	r24, 0xEF	; 239
     d4e:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_READ);
     d50:	83 e0       	ldi	r24, 0x03	; 3
     d52:	0e 94 2a 0a 	call	0x1454	; 0x1454 <spi_send>
	spi_send(adr);
     d56:	8c 2f       	mov	r24, r28
     d58:	0e 94 2a 0a 	call	0x1454	; 0x1454 <spi_send>
	uint8_t result = spi_recv();
     d5c:	0e 94 2e 0a 	call	0x145c	; 0x145c <spi_recv>
	DEF_CAN_CS_OFF;
     d60:	98 b3       	in	r25, 0x18	; 24
     d62:	90 61       	ori	r25, 0x10	; 16
     d64:	98 bb       	out	0x18, r25	; 24
	return result;
}
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <mcp2515_write>:


void mcp2515_write(uint8_t adr, uint8_t data){
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	d8 2f       	mov	r29, r24
     d70:	c6 2f       	mov	r28, r22
	DEF_CAN_CS_ON;
     d72:	88 b3       	in	r24, 0x18	; 24
     d74:	8f 7e       	andi	r24, 0xEF	; 239
     d76:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_WRITE);
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <spi_send>
	spi_send(adr);
     d7e:	8d 2f       	mov	r24, r29
     d80:	0e 94 2a 0a 	call	0x1454	; 0x1454 <spi_send>
	spi_send(data);
     d84:	8c 2f       	mov	r24, r28
     d86:	0e 94 2a 0a 	call	0x1454	; 0x1454 <spi_send>
	DEF_CAN_CS_OFF;
     d8a:	88 b3       	in	r24, 0x18	; 24
     d8c:	80 61       	ori	r24, 0x10	; 16
     d8e:	88 bb       	out	0x18, r24	; 24
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <mcp2515_request_to_send>:


void mcp2515_request_to_send(uint8_t buffer){
	DEF_CAN_CS_ON;
     d96:	98 b3       	in	r25, 0x18	; 24
     d98:	9f 7e       	andi	r25, 0xEF	; 239
     d9a:	98 bb       	out	0x18, r25	; 24
	spi_send(buffer);
     d9c:	0e 94 2a 0a 	call	0x1454	; 0x1454 <spi_send>
	DEF_CAN_CS_OFF;
     da0:	88 b3       	in	r24, 0x18	; 24
     da2:	80 61       	ori	r24, 0x10	; 16
     da4:	88 bb       	out	0x18, r24	; 24
     da6:	08 95       	ret

00000da8 <mcp2515_bit_modify>:
}


void mcp2515_bit_modify(uint8_t adr, uint8_t mask, uint8_t data){
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	18 2f       	mov	r17, r24
     db0:	d6 2f       	mov	r29, r22
     db2:	c4 2f       	mov	r28, r20
	DEF_CAN_CS_ON;
     db4:	88 b3       	in	r24, 0x18	; 24
     db6:	8f 7e       	andi	r24, 0xEF	; 239
     db8:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_BITMOD); 
     dba:	85 e0       	ldi	r24, 0x05	; 5
     dbc:	0e 94 2a 0a 	call	0x1454	; 0x1454 <spi_send>
	spi_send(adr);
     dc0:	81 2f       	mov	r24, r17
     dc2:	0e 94 2a 0a 	call	0x1454	; 0x1454 <spi_send>
	spi_send(mask);
     dc6:	8d 2f       	mov	r24, r29
     dc8:	0e 94 2a 0a 	call	0x1454	; 0x1454 <spi_send>
	spi_send(data);
     dcc:	8c 2f       	mov	r24, r28
     dce:	0e 94 2a 0a 	call	0x1454	; 0x1454 <spi_send>
	DEF_CAN_CS_OFF;
     dd2:	88 b3       	in	r24, 0x18	; 24
     dd4:	80 61       	ori	r24, 0x10	; 16
     dd6:	88 bb       	out	0x18, r24	; 24
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	08 95       	ret

00000de0 <mcp2515_reset>:


void mcp2515_reset(){
	DEF_CAN_CS_ON;
     de0:	88 b3       	in	r24, 0x18	; 24
     de2:	8f 7e       	andi	r24, 0xEF	; 239
     de4:	88 bb       	out	0x18, r24	; 24
	spi_send(MCP_RESET);
     de6:	80 ec       	ldi	r24, 0xC0	; 192
     de8:	0e 94 2a 0a 	call	0x1454	; 0x1454 <spi_send>
	DEF_CAN_CS_OFF;
     dec:	88 b3       	in	r24, 0x18	; 24
     dee:	80 61       	ori	r24, 0x10	; 16
     df0:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     df2:	83 ec       	ldi	r24, 0xC3	; 195
     df4:	99 e0       	ldi	r25, 0x09	; 9
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <mcp2515_reset+0x16>
     dfa:	00 c0       	rjmp	.+0      	; 0xdfc <mcp2515_reset+0x1c>
     dfc:	00 00       	nop
     dfe:	08 95       	ret

00000e00 <mcp2515_init>:
#define PS1 0x06				// Propagation segment 1 = (PS1+1)*TQ = Positive time compensation for edge phase errors 
#define PS2 0x05				// Propagation segment 2 = (PS2+1*TQ) = Negative time compensation for edge phase errors


void mcp2515_init(){
	spi_init();
     e00:	0e 94 24 0a 	call	0x1448	; 0x1448 <spi_init>
	// Set chip select pin as output, then keep it inactive (pin low)
	DEF_CAN_CS_ENABLE;
     e04:	87 b3       	in	r24, 0x17	; 23
     e06:	80 61       	ori	r24, 0x10	; 16
     e08:	87 bb       	out	0x17, r24	; 23
	DEF_CAN_CS_OFF;
     e0a:	88 b3       	in	r24, 0x18	; 24
     e0c:	80 61       	ori	r24, 0x10	; 16
     e0e:	88 bb       	out	0x18, r24	; 24
	
	mcp2515_reset();
     e10:	0e 94 f0 06 	call	0xde0	; 0xde0 <mcp2515_reset>
	uint8_t mode = mcp2515_read(MCP_CANSTAT);
     e14:	8e e0       	ldi	r24, 0x0E	; 14
     e16:	0e 94 a3 06 	call	0xd46	; 0xd46 <mcp2515_read>
	if ((mode & MODE_MASK) != MODE_CONFIG){
     e1a:	98 2f       	mov	r25, r24
     e1c:	90 7e       	andi	r25, 0xE0	; 224
     e1e:	90 38       	cpi	r25, 0x80	; 128
     e20:	69 f0       	breq	.+26     	; 0xe3c <mcp2515_init+0x3c>
		printf ("ERROR %02X: MCP2515 is NOT in config mode after reset!\r\n", mode);
     e22:	1f 92       	push	r1
     e24:	8f 93       	push	r24
     e26:	8f ea       	ldi	r24, 0xAF	; 175
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	9f 93       	push	r25
     e2c:	8f 93       	push	r24
     e2e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <printf>
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	04 c0       	rjmp	.+8      	; 0xe44 <mcp2515_init+0x44>
	}else{
	printf("MCP2515 entered config mode\r\n");
     e3c:	8d e4       	ldi	r24, 0x4D	; 77
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <puts>
	//mcp2515_write(MCP_CNF2, ((PS1 << 3) | PROPSEG)); //Config CNF2, PS1 = 7+1, PropSeg = 1+1
	
	//mcp2515_write(MCP_CNF3, (PS2 | BTLMODE)); // Write to CNF3: PS2 = 6+1, BTLMode ON (muy importante)

	// Configure bit timing
	mcp2515_write(MCP_CNF1, 0x03);	// BRP (Baud Rate Prescaling) = 3+1
     e44:	63 e0       	ldi	r22, 0x03	; 3
     e46:	8a e2       	ldi	r24, 0x2A	; 42
     e48:	0e 94 b5 06 	call	0xd6a	; 0xd6a <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0xB1);	// Propagation Segment PS = 1+1, PS1 = 7+1
     e4c:	61 eb       	ldi	r22, 0xB1	; 177
     e4e:	89 e2       	ldi	r24, 0x29	; 41
     e50:	0e 94 b5 06 	call	0xd6a	; 0xd6a <mcp2515_write>
	mcp2515_write(MCP_CNF3, 0x85);	// PS2 = 5+1, BTLMode ON (muy importante)
     e54:	65 e8       	ldi	r22, 0x85	; 133
     e56:	88 e2       	ldi	r24, 0x28	; 40
     e58:	0e 94 b5 06 	call	0xd6a	; 0xd6a <mcp2515_write>

	mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 0); // Enable interrupt bit when Receive Buffer 0 has new data
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	8b e2       	ldi	r24, 0x2B	; 43
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 d4 06 	call	0xda8	; 0xda8 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0); // Reset interrupt bit in buffer 0 (must be done to receive next 8 bits)
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	8c e2       	ldi	r24, 0x2C	; 44
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 d4 06 	call	0xda8	; 0xda8 <mcp2515_bit_modify>
	

	mcp2515_write(MCP_CANCTRL, MODE_NORMAL); // Enter normal mode
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	8f e0       	ldi	r24, 0x0F	; 15
     e80:	0e 94 b5 06 	call	0xd6a	; 0xd6a <mcp2515_write>
	mode = mcp2515_read(MCP_CANSTAT);
     e84:	8e e0       	ldi	r24, 0x0E	; 14
     e86:	0e 94 a3 06 	call	0xd46	; 0xd46 <mcp2515_read>
	if ((mode & MODE_MASK ) != MODE_NORMAL) {
     e8a:	80 7e       	andi	r24, 0xE0	; 224
     e8c:	29 f0       	breq	.+10     	; 0xe98 <mcp2515_init+0x98>
		printf("ERROR: MCP2515 is NOT in normal mode!\r\n");
     e8e:	8a e6       	ldi	r24, 0x6A	; 106
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <puts>
     e96:	08 95       	ret
	}else{
		printf("MCP2515 entered normal mode\r\n");
     e98:	81 e9       	ldi	r24, 0x91	; 145
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <puts>
     ea0:	08 95       	ret

00000ea2 <menu_func0>:
	
}

//void oled_print(const char *message, uint8_t line); // Assuming this is the OLED print function prototype

void menu_func0() { // Play Game function
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	60 97       	sbiw	r28, 0x10	; 16
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
    printf("First menu selected\n");
     eba:	8a e5       	ldi	r24, 0x5A	; 90
     ebc:	92 e0       	ldi	r25, 0x02	; 2
     ebe:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <puts>
	oled_pos(0, 0);
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	0e 94 8c 09 	call	0x1318	; 0x1318 <oled_pos>
    oled_print("     Game in progress", 0);
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	8e e6       	ldi	r24, 0x6E	; 110
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_print>

    if (!DEF_GAME_ACTIVE) {
     ed4:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <gMem>
     ed8:	80 fd       	sbrc	r24, 0
     eda:	03 c0       	rjmp	.+6      	; 0xee2 <menu_func0+0x40>
        DEF_START_GAME; // Start the game
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <gMem>
    }
    
    char score_str[16];
    snprintf(score_str, sizeof(score_str), "Score: %u", gScore);
     ee2:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <__data_end>
     ee6:	1f 92       	push	r1
     ee8:	8f 93       	push	r24
     eea:	84 e8       	ldi	r24, 0x84	; 132
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	9f 93       	push	r25
     ef0:	8f 93       	push	r24
     ef2:	1f 92       	push	r1
     ef4:	80 e1       	ldi	r24, 0x10	; 16
     ef6:	8f 93       	push	r24
     ef8:	8e 01       	movw	r16, r28
     efa:	0f 5f       	subi	r16, 0xFF	; 255
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	1f 93       	push	r17
     f00:	0f 93       	push	r16
     f02:	0e 94 0a 0b 	call	0x1614	; 0x1614 <snprintf>
	oled_pos(1, 0);
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	0e 94 8c 09 	call	0x1318	; 0x1318 <oled_pos>
    oled_print(score_str, 0);
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	c8 01       	movw	r24, r16
     f12:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_print>

}
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	60 96       	adiw	r28, 0x10	; 16
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	08 95       	ret

00000f36 <menu_func1>:

void menu_func1() { // Show High Scores function
     f36:	af 92       	push	r10
     f38:	bf 92       	push	r11
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	6a 97       	sbiw	r28, 0x1a	; 26
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
    printf("Second menu selected\r\n");
     f5a:	8e e8       	ldi	r24, 0x8E	; 142
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <puts>
	char highScoreStr[10];
    oled_reset();
     f62:	0e 94 a7 09 	call	0x134e	; 0x134e <oled_reset>
	oled_pos(0,0);
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	0e 94 8c 09 	call	0x1318	; 0x1318 <oled_pos>
    oled_print("HighScores", 0);
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	84 ea       	ldi	r24, 0xA4	; 164
     f72:	92 e0       	ldi	r25, 0x02	; 2
     f74:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_print>
	oled_pos(1,0);
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	0e 94 8c 09 	call	0x1318	; 0x1318 <oled_pos>
	snprintf(highScoreStr, sizeof(highScoreStr), "%u", gHighScores[0]);
     f80:	0f 2e       	mov	r0, r31
     f82:	f3 ee       	ldi	r31, 0xE3	; 227
     f84:	af 2e       	mov	r10, r31
     f86:	f2 e0       	ldi	r31, 0x02	; 2
     f88:	bf 2e       	mov	r11, r31
     f8a:	f0 2d       	mov	r31, r0
     f8c:	f5 01       	movw	r30, r10
     f8e:	80 81       	ld	r24, Z
     f90:	1f 92       	push	r1
     f92:	8f 93       	push	r24
     f94:	0f 2e       	mov	r0, r31
     f96:	f3 eb       	ldi	r31, 0xB3	; 179
     f98:	ef 2e       	mov	r14, r31
     f9a:	f2 e0       	ldi	r31, 0x02	; 2
     f9c:	ff 2e       	mov	r15, r31
     f9e:	f0 2d       	mov	r31, r0
     fa0:	ff 92       	push	r15
     fa2:	ef 92       	push	r14
     fa4:	1f 92       	push	r1
     fa6:	0f 2e       	mov	r0, r31
     fa8:	fa e0       	ldi	r31, 0x0A	; 10
     faa:	df 2e       	mov	r13, r31
     fac:	f0 2d       	mov	r31, r0
     fae:	df 92       	push	r13
     fb0:	8e 01       	movw	r16, r28
     fb2:	0f 5f       	subi	r16, 0xFF	; 255
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	1f 93       	push	r17
     fb8:	0f 93       	push	r16
     fba:	0e 94 0a 0b 	call	0x1614	; 0x1614 <snprintf>
	oled_print(highScoreStr, 0);
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	c8 01       	movw	r24, r16
     fc2:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_print>
	oled_pos(2,0);
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	0e 94 8c 09 	call	0x1318	; 0x1318 <oled_pos>
	snprintf(highScoreStr, sizeof(highScoreStr), "%u", gHighScores[1]);
     fce:	f5 01       	movw	r30, r10
     fd0:	81 81       	ldd	r24, Z+1	; 0x01
     fd2:	1f 92       	push	r1
     fd4:	8f 93       	push	r24
     fd6:	ff 92       	push	r15
     fd8:	ef 92       	push	r14
     fda:	1f 92       	push	r1
     fdc:	df 92       	push	r13
     fde:	1f 93       	push	r17
     fe0:	0f 93       	push	r16
     fe2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <snprintf>
	oled_print(highScoreStr, 0);
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	c8 01       	movw	r24, r16
     fea:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_print>
	oled_pos(3,0);
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	0e 94 8c 09 	call	0x1318	; 0x1318 <oled_pos>
	snprintf(highScoreStr, sizeof(highScoreStr), "%u", gHighScores[2]);
     ff6:	f5 01       	movw	r30, r10
     ff8:	82 81       	ldd	r24, Z+2	; 0x02
     ffa:	1f 92       	push	r1
     ffc:	8f 93       	push	r24
     ffe:	ff 92       	push	r15
    1000:	ef 92       	push	r14
    1002:	1f 92       	push	r1
    1004:	df 92       	push	r13
    1006:	1f 93       	push	r17
    1008:	0f 93       	push	r16
    100a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <snprintf>
	oled_print(highScoreStr, 0);
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	c8 01       	movw	r24, r16
    1012:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_print>

    // Display the high scores on the OLED
    for (int i = 0; i < 3; i++) {
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	00 e0       	ldi	r16, 0x00	; 0
    1022:	10 e0       	ldi	r17, 0x00	; 0
    1024:	26 c0       	rjmp	.+76     	; 0x1072 <menu_func1+0x13c>
        char score_display[16];
        snprintf(score_display, sizeof(score_display), "%d: %u", i + 1, gHighScores[i]);
    1026:	f8 01       	movw	r30, r16
    1028:	ed 51       	subi	r30, 0x1D	; 29
    102a:	fd 4f       	sbci	r31, 0xFD	; 253
    102c:	80 81       	ld	r24, Z
    102e:	78 01       	movw	r14, r16
    1030:	9f ef       	ldi	r25, 0xFF	; 255
    1032:	e9 1a       	sub	r14, r25
    1034:	f9 0a       	sbc	r15, r25
    1036:	1f 92       	push	r1
    1038:	8f 93       	push	r24
    103a:	ff 92       	push	r15
    103c:	ef 92       	push	r14
    103e:	8f ea       	ldi	r24, 0xAF	; 175
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	9f 93       	push	r25
    1044:	8f 93       	push	r24
    1046:	1f 92       	push	r1
    1048:	80 e1       	ldi	r24, 0x10	; 16
    104a:	8f 93       	push	r24
    104c:	6e 01       	movw	r12, r28
    104e:	eb e0       	ldi	r30, 0x0B	; 11
    1050:	ce 0e       	add	r12, r30
    1052:	d1 1c       	adc	r13, r1
    1054:	df 92       	push	r13
    1056:	cf 92       	push	r12
    1058:	0e 94 0a 0b 	call	0x1614	; 0x1614 <snprintf>
        oled_print(score_display, i + 1);
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	60 0f       	add	r22, r16
    1060:	c6 01       	movw	r24, r12
    1062:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_print>
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
	oled_pos(3,0);
	snprintf(highScoreStr, sizeof(highScoreStr), "%u", gHighScores[2]);
	oled_print(highScoreStr, 0);

    // Display the high scores on the OLED
    for (int i = 0; i < 3; i++) {
    1070:	87 01       	movw	r16, r14
    1072:	03 30       	cpi	r16, 0x03	; 3
    1074:	11 05       	cpc	r17, r1
    1076:	bc f2       	brlt	.-82     	; 0x1026 <menu_func1+0xf0>
        char score_display[16];
        snprintf(score_display, sizeof(score_display), "%d: %u", i + 1, gHighScores[i]);
        oled_print(score_display, i + 1);
    }
}
    1078:	6a 96       	adiw	r28, 0x1a	; 26
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	bf 90       	pop	r11
    1096:	af 90       	pop	r10
    1098:	08 95       	ret

0000109a <menu_print>:
	int8_t index = menu.cursor + direction;
	menu_setCursor(index);
}


void menu_print(){
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
	oled_home();
    10a2:	0e 94 95 09 	call	0x132a	; 0x132a <oled_home>
	oled_print(menu.currentPage->name, 0);
    10a6:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <menu>
    10aa:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <menu+0x1>
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	47 96       	adiw	r24, 0x17	; 23
    10b2:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_print>
	oled_pos(1, 0);	// newline
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	0e 94 8c 09 	call	0x1318	; 0x1318 <oled_pos>
	
	// Loop for each sub menu in current menu
	for (int i = 0; i <= menu.currentPage->totalSubMenu; i++){
    10be:	c0 e0       	ldi	r28, 0x00	; 0
    10c0:	d0 e0       	ldi	r29, 0x00	; 0
    10c2:	2b c0       	rjmp	.+86     	; 0x111a <menu_print+0x80>
		// print cursor or space
		if (menu.cursor == i){
    10c4:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <menu+0x9b>
    10c8:	08 2e       	mov	r0, r24
    10ca:	00 0c       	add	r0, r0
    10cc:	99 0b       	sbc	r25, r25
    10ce:	c8 17       	cp	r28, r24
    10d0:	d9 07       	cpc	r29, r25
    10d2:	31 f4       	brne	.+12     	; 0x10e0 <menu_print+0x46>
			oled_print("-> ", 0);
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	86 eb       	ldi	r24, 0xB6	; 182
    10d8:	92 e0       	ldi	r25, 0x02	; 2
    10da:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_print>
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <menu_print+0x50>
		}
		else{
			oled_print("   ", 0);
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	8a eb       	ldi	r24, 0xBA	; 186
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_print>
		}
		// print selected sub menu name
		oled_print(menu.currentPage->subMenu[i]->name, 0);
    10ea:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <menu>
    10ee:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <menu+0x1>
    10f2:	8e 01       	movw	r16, r28
    10f4:	0f 5f       	subi	r16, 0xFF	; 255
    10f6:	1f 4f       	sbci	r17, 0xFF	; 255
    10f8:	c8 01       	movw	r24, r16
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	e8 0f       	add	r30, r24
    1100:	f9 1f       	adc	r31, r25
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	47 96       	adiw	r24, 0x17	; 23
    110a:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_print>
		
		oled_pos(i+2, 0);	// newline
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	8c 2f       	mov	r24, r28
    1112:	8e 5f       	subi	r24, 0xFE	; 254
    1114:	0e 94 8c 09 	call	0x1318	; 0x1318 <oled_pos>
	oled_home();
	oled_print(menu.currentPage->name, 0);
	oled_pos(1, 0);	// newline
	
	// Loop for each sub menu in current menu
	for (int i = 0; i <= menu.currentPage->totalSubMenu; i++){
    1118:	e8 01       	movw	r28, r16
    111a:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <menu>
    111e:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <menu+0x1>
    1122:	86 89       	ldd	r24, Z+22	; 0x16
    1124:	08 2e       	mov	r0, r24
    1126:	00 0c       	add	r0, r0
    1128:	99 0b       	sbc	r25, r25
    112a:	8c 17       	cp	r24, r28
    112c:	9d 07       	cpc	r25, r29
    112e:	54 f6       	brge	.-108    	; 0x10c4 <menu_print+0x2a>
		// print selected sub menu name
		oled_print(menu.currentPage->subMenu[i]->name, 0);
		
		oled_pos(i+2, 0);	// newline
	}
}
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	08 95       	ret

0000113a <menu_init>:
#include <inttypes.h>
#include <stdbool.h>
#include <util/delay.h>
#include <string.h>

void menu_init(){
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
	strcpy(menu.root.name, "Ping Pong Simulator 3000");
    113e:	89 e1       	ldi	r24, 0x19	; 25
    1140:	e8 ec       	ldi	r30, 0xC8	; 200
    1142:	f2 e0       	ldi	r31, 0x02	; 2
    1144:	af ef       	ldi	r26, 0xFF	; 255
    1146:	b2 e0       	ldi	r27, 0x02	; 2
    1148:	01 90       	ld	r0, Z+
    114a:	0d 92       	st	X+, r0
    114c:	8a 95       	dec	r24
    114e:	e1 f7       	brne	.-8      	; 0x1148 <menu_init+0xe>
	menu.root.run = menu_print;
    1150:	c6 ee       	ldi	r28, 0xE6	; 230
    1152:	d2 e0       	ldi	r29, 0x02	; 2
    1154:	8d e4       	ldi	r24, 0x4D	; 77
    1156:	98 e0       	ldi	r25, 0x08	; 8
    1158:	9b ab       	std	Y+51, r25	; 0x33
    115a:	8a ab       	std	Y+50, r24	; 0x32
	menu.root.totalSubMenu = 2;
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	88 8f       	std	Y+24, r24	; 0x18
	menu.currentPage = &menu.root;
    1160:	88 ee       	ldi	r24, 0xE8	; 232
    1162:	92 e0       	ldi	r25, 0x02	; 2
    1164:	99 83       	std	Y+1, r25	; 0x01
    1166:	88 83       	st	Y, r24
	
	strcpy(menu.subMenu1.name, "Play Game");
    1168:	8a e0       	ldi	r24, 0x0A	; 10
    116a:	ee eb       	ldi	r30, 0xBE	; 190
    116c:	f2 e0       	ldi	r31, 0x02	; 2
    116e:	a2 e3       	ldi	r26, 0x32	; 50
    1170:	b3 e0       	ldi	r27, 0x03	; 3
    1172:	01 90       	ld	r0, Z+
    1174:	0d 92       	st	X+, r0
    1176:	8a 95       	dec	r24
    1178:	e1 f7       	brne	.-8      	; 0x1172 <menu_init+0x38>
	menu.subMenu1.run = menu_func0;
    117a:	81 e5       	ldi	r24, 0x51	; 81
    117c:	97 e0       	ldi	r25, 0x07	; 7
    117e:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <menu+0x66>
    1182:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <menu+0x65>
	menu.subMenu1.totalSubMenu = 0;
    1186:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <menu+0x4b>
	menu.root.subMenu[0] = &menu.subMenu1;
    118a:	8b e1       	ldi	r24, 0x1B	; 27
    118c:	93 e0       	ldi	r25, 0x03	; 3
    118e:	9d 83       	std	Y+5, r25	; 0x05
    1190:	8c 83       	std	Y+4, r24	; 0x04
	
	
	strcpy(menu.subMenu2.name, "HighScores");
    1192:	8b e0       	ldi	r24, 0x0B	; 11
    1194:	e4 ea       	ldi	r30, 0xA4	; 164
    1196:	f2 e0       	ldi	r31, 0x02	; 2
    1198:	a5 e6       	ldi	r26, 0x65	; 101
    119a:	b3 e0       	ldi	r27, 0x03	; 3
    119c:	01 90       	ld	r0, Z+
    119e:	0d 92       	st	X+, r0
    11a0:	8a 95       	dec	r24
    11a2:	e1 f7       	brne	.-8      	; 0x119c <menu_init+0x62>
	menu.subMenu2.run = menu_func1;
    11a4:	8b e9       	ldi	r24, 0x9B	; 155
    11a6:	97 e0       	ldi	r25, 0x07	; 7
    11a8:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <menu+0x99>
    11ac:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <menu+0x98>
	menu.subMenu2.totalSubMenu = 0;
    11b0:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <menu+0x7e>
	menu.subMenu2.id = 1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <menu+0x9a>
	menu.root.subMenu[1] = &menu.subMenu2;
    11ba:	8e e4       	ldi	r24, 0x4E	; 78
    11bc:	93 e0       	ldi	r25, 0x03	; 3
    11be:	9f 83       	std	Y+7, r25	; 0x07
    11c0:	8e 83       	std	Y+6, r24	; 0x06
	
	
	menu.cursor = 0;
    11c2:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <menu+0x9b>
	
}
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <menu_move_back>:

bool menu_move_back(){
	//if (menu.currentPage->parentMenu == NULL){
		//return 0;	// Already in main menu (root) do nothing
	//}
	menu.currentPage = &menu.root;	// Select parent menu of the current page.
    11cc:	88 ee       	ldi	r24, 0xE8	; 232
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <menu+0x1>
    11d4:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <menu>
	return 1;
}
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	08 95       	ret

000011dc <menu_selectPage>:


void menu_selectPage(){
	if(menu.currentPage->totalSubMenu != 0){ // Endrer kun page hvis current page har sub pages
    11dc:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <menu>
    11e0:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <menu+0x1>
    11e4:	56 96       	adiw	r26, 0x16	; 22
    11e6:	8c 91       	ld	r24, X
    11e8:	56 97       	sbiw	r26, 0x16	; 22
    11ea:	88 23       	and	r24, r24
    11ec:	81 f0       	breq	.+32     	; 0x120e <menu_selectPage+0x32>
		menu.currentPage = menu.currentPage->subMenu[menu.cursor];
    11ee:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <menu+0x9b>
    11f2:	0e 2e       	mov	r0, r30
    11f4:	00 0c       	add	r0, r0
    11f6:	ff 0b       	sbc	r31, r31
    11f8:	31 96       	adiw	r30, 0x01	; 1
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	ea 0f       	add	r30, r26
    1200:	fb 1f       	adc	r31, r27
    1202:	80 81       	ld	r24, Z
    1204:	91 81       	ldd	r25, Z+1	; 0x01
    1206:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <menu+0x1>
    120a:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <menu>
    120e:	08 95       	ret

00001210 <menu_setCursor>:
}


bool menu_setCursor(int8_t index){
	// check if index is out of range
	if (index < 0){
    1210:	88 23       	and	r24, r24
    1212:	5c f0       	brlt	.+22     	; 0x122a <menu_setCursor+0x1a>
		return 0;	// do nothing
	}
	else if(index >= menu.currentPage->totalSubMenu){
    1214:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <menu>
    1218:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <menu+0x1>
    121c:	96 89       	ldd	r25, Z+22	; 0x16
    121e:	89 17       	cp	r24, r25
    1220:	34 f4       	brge	.+12     	; 0x122e <menu_setCursor+0x1e>
		return 0;	// do nothing
	}
	menu.cursor = index;	// update cursor location
    1222:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <menu+0x9b>
	return 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	08 95       	ret


bool menu_setCursor(int8_t index){
	// check if index is out of range
	if (index < 0){
		return 0;	// do nothing
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	08 95       	ret
	}
	else if(index >= menu.currentPage->totalSubMenu){
		return 0;	// do nothing
    122e:	80 e0       	ldi	r24, 0x00	; 0
	}
	menu.cursor = index;	// update cursor location
	return 1;
}
    1230:	08 95       	ret

00001232 <menu_moveCursor>:


bool menu_moveCursor(int8_t direction){
	int8_t index = menu.cursor + direction;
    1232:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <menu+0x9b>
	menu_setCursor(index);
    1236:	89 0f       	add	r24, r25
    1238:	0e 94 08 09 	call	0x1210	; 0x1210 <menu_setCursor>
}
    123c:	08 95       	ret

0000123e <menu_run>:
		oled_pos(i+2, 0);	// newline
	}
}

void menu_run(){
	menu.currentPage->run();
    123e:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <menu>
    1242:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <menu+0x1>
    1246:	00 a8       	ldd	r0, Z+48	; 0x30
    1248:	f1 a9       	ldd	r31, Z+49	; 0x31
    124a:	e0 2d       	mov	r30, r0
    124c:	09 95       	icall
    124e:	08 95       	ret

00001250 <menu_is_highscore>:
}

uint8_t menu_is_highscore(){
	if (menu.currentPage->id == 1){
    1250:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <menu>
    1254:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <menu+0x1>
    1258:	82 a9       	ldd	r24, Z+50	; 0x32
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	09 f0       	breq	.+2      	; 0x1260 <menu_is_highscore+0x10>
		return 1;
	}
	return 0;
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	08 95       	ret

00001262 <oled_write_data>:
void oled_write_line(uint8_t page){
	oled_goto_page(page);
	for (uint8_t i = 0; i < 128; i++){
		oled_write_data(0x01);
	}
}
    1262:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xe74>
    1266:	08 95       	ret

00001268 <oled_write_cmd>:
    1268:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xc74>
    126c:	08 95       	ret

0000126e <oled_init>:
    126e:	8e ea       	ldi	r24, 0xAE	; 174
    1270:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    1274:	81 ea       	ldi	r24, 0xA1	; 161
    1276:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    127a:	8a ed       	ldi	r24, 0xDA	; 218
    127c:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    1280:	82 e1       	ldi	r24, 0x12	; 18
    1282:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    1286:	88 ec       	ldi	r24, 0xC8	; 200
    1288:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    128c:	88 ea       	ldi	r24, 0xA8	; 168
    128e:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    1292:	8f e3       	ldi	r24, 0x3F	; 63
    1294:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    1298:	85 ed       	ldi	r24, 0xD5	; 213
    129a:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    129e:	80 e8       	ldi	r24, 0x80	; 128
    12a0:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12a4:	81 e8       	ldi	r24, 0x81	; 129
    12a6:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12aa:	80 e5       	ldi	r24, 0x50	; 80
    12ac:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12b0:	89 ed       	ldi	r24, 0xD9	; 217
    12b2:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12b6:	81 e2       	ldi	r24, 0x21	; 33
    12b8:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12bc:	80 e2       	ldi	r24, 0x20	; 32
    12be:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12c8:	8b ed       	ldi	r24, 0xDB	; 219
    12ca:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12ce:	80 e3       	ldi	r24, 0x30	; 48
    12d0:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12d4:	8d ea       	ldi	r24, 0xAD	; 173
    12d6:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12e0:	84 ea       	ldi	r24, 0xA4	; 164
    12e2:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12e6:	86 ea       	ldi	r24, 0xA6	; 166
    12e8:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12ec:	8f ea       	ldi	r24, 0xAF	; 175
    12ee:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12f2:	08 95       	ret

000012f4 <oled_goto_page>:
    12f4:	87 70       	andi	r24, 0x07	; 7
    12f6:	80 6b       	ori	r24, 0xB0	; 176
    12f8:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    12fc:	08 95       	ret

000012fe <oled_goto_col>:
    12fe:	cf 93       	push	r28
    1300:	c8 2f       	mov	r28, r24
    1302:	8f 70       	andi	r24, 0x0F	; 15
    1304:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    1308:	8c 2f       	mov	r24, r28
    130a:	82 95       	swap	r24
    130c:	8f 70       	andi	r24, 0x0F	; 15
    130e:	80 61       	ori	r24, 0x10	; 16
    1310:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_write_cmd>
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <oled_pos>:
    1318:	cf 93       	push	r28
    131a:	c6 2f       	mov	r28, r22
    131c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <oled_goto_page>
    1320:	8c 2f       	mov	r24, r28
    1322:	0e 94 7f 09 	call	0x12fe	; 0x12fe <oled_goto_col>
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <oled_home>:
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	0e 94 8c 09 	call	0x1318	; 0x1318 <oled_pos>
    1332:	08 95       	ret

00001334 <oled_clear_line>:


void oled_clear_line(uint8_t page){
    1334:	cf 93       	push	r28
	oled_goto_page(page);
    1336:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <oled_goto_page>
	for (uint8_t i = 0; i < 128; i++){
    133a:	c0 e0       	ldi	r28, 0x00	; 0
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <oled_clear_line+0x12>
		oled_write_data(0x00);
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	0e 94 31 09 	call	0x1262	; 0x1262 <oled_write_data>
}


void oled_clear_line(uint8_t page){
	oled_goto_page(page);
	for (uint8_t i = 0; i < 128; i++){
    1344:	cf 5f       	subi	r28, 0xFF	; 255
    1346:	cc 23       	and	r28, r28
    1348:	d4 f7       	brge	.-12     	; 0x133e <oled_clear_line+0xa>
		oled_write_data(0x00);
	}
}
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <oled_reset>:


void oled_reset(){
    134e:	cf 93       	push	r28
	for (uint8_t i=0; i < 8; i++){
    1350:	c0 e0       	ldi	r28, 0x00	; 0
    1352:	04 c0       	rjmp	.+8      	; 0x135c <oled_reset+0xe>
		oled_clear_line(i);
    1354:	8c 2f       	mov	r24, r28
    1356:	0e 94 9a 09 	call	0x1334	; 0x1334 <oled_clear_line>
	}
}


void oled_reset(){
	for (uint8_t i=0; i < 8; i++){
    135a:	cf 5f       	subi	r28, 0xFF	; 255
    135c:	c8 30       	cpi	r28, 0x08	; 8
    135e:	d0 f3       	brcs	.-12     	; 0x1354 <oled_reset+0x6>
		oled_clear_line(i);
	}
	oled_home();
    1360:	0e 94 95 09 	call	0x132a	; 0x132a <oled_home>
}
    1364:	cf 91       	pop	r28
    1366:	08 95       	ret

00001368 <oled_printChar>:


void oled_printChar(char c, char font){
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
    136c:	90 ee       	ldi	r25, 0xE0	; 224
    136e:	98 0f       	add	r25, r24
    1370:	90 36       	cpi	r25, 0x60	; 96
    1372:	08 f0       	brcs	.+2      	; 0x1376 <oled_printChar+0xe>
    1374:	47 c0       	rjmp	.+142    	; 0x1404 <oled_printChar+0x9c>
    1376:	c8 2f       	mov	r28, r24
		switch (font){
    1378:	64 30       	cpi	r22, 0x04	; 4
    137a:	99 f0       	breq	.+38     	; 0x13a2 <oled_printChar+0x3a>
    137c:	68 30       	cpi	r22, 0x08	; 8
    137e:	39 f1       	breq	.+78     	; 0x13ce <oled_printChar+0x66>
    1380:	3e c0       	rjmp	.+124    	; 0x13fe <oled_printChar+0x96>
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
    1382:	ec 2f       	mov	r30, r28
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	b0 97       	sbiw	r30, 0x20	; 32
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	ed 0f       	add	r30, r29
    1392:	f1 1d       	adc	r31, r1
    1394:	e0 59       	subi	r30, 0x90	; 144
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	84 91       	lpm	r24, Z
    139a:	0e 94 31 09 	call	0x1262	; 0x1262 <oled_write_data>
void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
    139e:	df 5f       	subi	r29, 0xFF	; 255
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <oled_printChar+0x3c>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
    13a2:	d0 e0       	ldi	r29, 0x00	; 0
			case 4: // 4x8 SMALL
				for (uint8_t i = 0; i < 4; i++){
    13a4:	d4 30       	cpi	r29, 0x04	; 4
    13a6:	68 f3       	brcs	.-38     	; 0x1382 <oled_printChar+0x1a>
    13a8:	2d c0       	rjmp	.+90     	; 0x1404 <oled_printChar+0x9c>
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
    13aa:	ec 2f       	mov	r30, r28
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	b0 97       	sbiw	r30, 0x20	; 32
    13b0:	ee 0f       	add	r30, r30
    13b2:	ff 1f       	adc	r31, r31
    13b4:	ee 0f       	add	r30, r30
    13b6:	ff 1f       	adc	r31, r31
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	ed 0f       	add	r30, r29
    13be:	f1 1d       	adc	r31, r1
    13c0:	e9 53       	subi	r30, 0x39	; 57
    13c2:	fc 4f       	sbci	r31, 0xFC	; 252
    13c4:	84 91       	lpm	r24, Z
    13c6:	0e 94 31 09 	call	0x1262	; 0x1262 <oled_write_data>
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
    13ca:	df 5f       	subi	r29, 0xFF	; 255
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <oled_printChar+0x68>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
    13ce:	d0 e0       	ldi	r29, 0x00	; 0
					oled_write_data(pgm_read_byte(&font4[c-32][i])); // Function & font from fonts.h
				}
				break;
			
			case 8: // 8x8 LARGE
				for (uint8_t i = 0; i < 8; i++){
    13d0:	d8 30       	cpi	r29, 0x08	; 8
    13d2:	58 f3       	brcs	.-42     	; 0x13aa <oled_printChar+0x42>
    13d4:	17 c0       	rjmp	.+46     	; 0x1404 <oled_printChar+0x9c>
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
					oled_write_data(pgm_read_byte(&font5[c-32][i]));
    13d6:	2c 2f       	mov	r18, r28
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	20 52       	subi	r18, 0x20	; 32
    13dc:	31 09       	sbc	r19, r1
    13de:	f9 01       	movw	r30, r18
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	e2 0f       	add	r30, r18
    13ea:	f3 1f       	adc	r31, r19
    13ec:	ed 0f       	add	r30, r29
    13ee:	f1 1d       	adc	r31, r1
    13f0:	e4 51       	subi	r30, 0x14	; 20
    13f2:	fe 4f       	sbci	r31, 0xFE	; 254
    13f4:	84 91       	lpm	r24, Z
    13f6:	0e 94 31 09 	call	0x1262	; 0x1262 <oled_write_data>
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
    13fa:	df 5f       	subi	r29, 0xFF	; 255
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <oled_printChar+0x98>


void oled_printChar(char c, char font){
	//printf("%c = %d\r\n", c, c);
	if (c >= 0x20 && c <= 0x7F){ // Do not attempt to write if ASCII character does not exist
		switch (font){
    13fe:	d0 e0       	ldi	r29, 0x00	; 0
					oled_write_data(pgm_read_byte(&font8[c-32][i]));
				}
				break;
		
			default: // 5x8 NORMAL
				for (uint8_t i = 0; i < 5; i++){
    1400:	d5 30       	cpi	r29, 0x05	; 5
    1402:	48 f3       	brcs	.-46     	; 0x13d6 <oled_printChar+0x6e>
					oled_write_data(pgm_read_byte(&font5[c-32][i]));
				}
				break;
		}
	}
}
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <oled_print>:


// Print strings to OLED
void oled_print(const char* data, char font){
    140a:	ef 92       	push	r14
    140c:	ff 92       	push	r15
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	7c 01       	movw	r14, r24
    1416:	16 2f       	mov	r17, r22
	// Select font (from fonts.h)
	char f = 5; // Default font (5x8 NORMAL)
	if (font == 4 || font == 8){ // Selected fonts 4x8 SMALL or 8x8 LARGE
    1418:	64 30       	cpi	r22, 0x04	; 4
    141a:	19 f0       	breq	.+6      	; 0x1422 <oled_print+0x18>
    141c:	68 30       	cpi	r22, 0x08	; 8
    141e:	09 f0       	breq	.+2      	; 0x1422 <oled_print+0x18>


// Print strings to OLED
void oled_print(const char* data, char font){
	// Select font (from fonts.h)
	char f = 5; // Default font (5x8 NORMAL)
    1420:	15 e0       	ldi	r17, 0x05	; 5
	if (font == 4 || font == 8){ // Selected fonts 4x8 SMALL or 8x8 LARGE
		f = font;
	}
	
	int i = 0;
    1422:	c0 e0       	ldi	r28, 0x00	; 0
    1424:	d0 e0       	ldi	r29, 0x00	; 0
	while(data[i] != '\0'){
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <oled_print+0x26>
		oled_printChar(data[i], f);
    1428:	61 2f       	mov	r22, r17
    142a:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_printChar>
		++i;
    142e:	21 96       	adiw	r28, 0x01	; 1
	if (font == 4 || font == 8){ // Selected fonts 4x8 SMALL or 8x8 LARGE
		f = font;
	}
	
	int i = 0;
	while(data[i] != '\0'){
    1430:	f7 01       	movw	r30, r14
    1432:	ec 0f       	add	r30, r28
    1434:	fd 1f       	adc	r31, r29
    1436:	80 81       	ld	r24, Z
    1438:	81 11       	cpse	r24, r1
    143a:	f6 cf       	rjmp	.-20     	; 0x1428 <oled_print+0x1e>
		oled_printChar(data[i], f);
		++i;
	}
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	08 95       	ret

00001448 <spi_init>:
#include <avr/io.h>

// Initialize as master
// Code modified from ATMega162 data sheet
void spi_init(void){
	DDRB |= (1 << PB5)|(1 << PB7); // MOSI out, SCK out
    1448:	87 b3       	in	r24, 0x17	; 23
    144a:	80 6a       	ori	r24, 0xA0	; 160
    144c:	87 bb       	out	0x17, r24	; 23
	// Enable SPI as master (SPE, MSTR)
	// Set clock rate F_CPU/16 (SPR0)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    144e:	81 e5       	ldi	r24, 0x51	; 81
    1450:	8d b9       	out	0x0d, r24	; 13
    1452:	08 95       	ret

00001454 <spi_send>:
}


// Send data as master
void spi_send(char cData){
	SPDR = cData;
    1454:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for transmission complete
	while(!(SPSR & 1<<SPIF)){;};
    1456:	77 9b       	sbis	0x0e, 7	; 14
    1458:	fe cf       	rjmp	.-4      	; 0x1456 <spi_send+0x2>
}
    145a:	08 95       	ret

0000145c <spi_recv>:

// Receive data as master
// Same as sending
// Moves ring buffer by 8 bits to receive 8 bits from slave
uint8_t spi_recv(void){
	spi_send(0);
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <spi_send>
	return SPDR;
    1462:	8f b1       	in	r24, 0x0f	; 15
    1464:	08 95       	ret

00001466 <SRAM_init>:
#include <avr/io.h>
#include <inttypes.h> // Needed for uint16_t


void SRAM_init() {
	MCUCR |= (1 << SRE); // Enable SRAM
    1466:	85 b7       	in	r24, 0x35	; 53
    1468:	80 68       	ori	r24, 0x80	; 128
    146a:	85 bf       	out	0x35, r24	; 53
	SFIOR = (1 << XMM2); // Masks PC4-PC7 to make sure JTAG remains untouched
    146c:	80 e2       	ldi	r24, 0x20	; 32
    146e:	80 bf       	out	0x30, r24	; 48
    1470:	08 95       	ret

00001472 <UART_receive>:
#include <stdio.h>
#include <avr/io.h>


int UART_receive(FILE * file) {
    while (!(UCSR0A & (1 << RXC0)));  // Wait until data is available to read
    1472:	5f 9b       	sbis	0x0b, 7	; 11
    1474:	fe cf       	rjmp	.-4      	; 0x1472 <UART_receive>
    return UDR0;  // Return the received data
    1476:	8c b1       	in	r24, 0x0c	; 12
}
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	08 95       	ret

0000147c <UART_transmit>:


int UART_transmit(char data, FILE * file) {
    while (!(UCSR0A & (1 << UDRE0)));  // Wait for the data register to be empty
    147c:	5d 9b       	sbis	0x0b, 5	; 11
    147e:	fe cf       	rjmp	.-4      	; 0x147c <UART_transmit>
    UDR0 = data;  // Load the data into the register for transmission
    1480:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	08 95       	ret

00001488 <UART_init>:


void UART_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
    1488:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    148a:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    148c:	88 e1       	ldi	r24, 0x18	; 24
    148e:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, synchronous mode */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1490:	8e e8       	ldi	r24, 0x8E	; 142
    1492:	80 bd       	out	0x20, r24	; 32
	// Make the transmit & receive functions write to a stream / file
	fdevopen(UART_transmit, UART_receive);
    1494:	69 e3       	ldi	r22, 0x39	; 57
    1496:	7a e0       	ldi	r23, 0x0A	; 10
    1498:	8e e3       	ldi	r24, 0x3E	; 62
    149a:	9a e0       	ldi	r25, 0x0A	; 10
    149c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fdevopen>
    14a0:	08 95       	ret

000014a2 <__divmodhi4>:
    14a2:	97 fb       	bst	r25, 7
    14a4:	07 2e       	mov	r0, r23
    14a6:	16 f4       	brtc	.+4      	; 0x14ac <__divmodhi4+0xa>
    14a8:	00 94       	com	r0
    14aa:	07 d0       	rcall	.+14     	; 0x14ba <__divmodhi4_neg1>
    14ac:	77 fd       	sbrc	r23, 7
    14ae:	09 d0       	rcall	.+18     	; 0x14c2 <__divmodhi4_neg2>
    14b0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__udivmodhi4>
    14b4:	07 fc       	sbrc	r0, 7
    14b6:	05 d0       	rcall	.+10     	; 0x14c2 <__divmodhi4_neg2>
    14b8:	3e f4       	brtc	.+14     	; 0x14c8 <__divmodhi4_exit>

000014ba <__divmodhi4_neg1>:
    14ba:	90 95       	com	r25
    14bc:	81 95       	neg	r24
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	08 95       	ret

000014c2 <__divmodhi4_neg2>:
    14c2:	70 95       	com	r23
    14c4:	61 95       	neg	r22
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255

000014c8 <__divmodhi4_exit>:
    14c8:	08 95       	ret

000014ca <__udivmodhi4>:
    14ca:	aa 1b       	sub	r26, r26
    14cc:	bb 1b       	sub	r27, r27
    14ce:	51 e1       	ldi	r21, 0x11	; 17
    14d0:	07 c0       	rjmp	.+14     	; 0x14e0 <__udivmodhi4_ep>

000014d2 <__udivmodhi4_loop>:
    14d2:	aa 1f       	adc	r26, r26
    14d4:	bb 1f       	adc	r27, r27
    14d6:	a6 17       	cp	r26, r22
    14d8:	b7 07       	cpc	r27, r23
    14da:	10 f0       	brcs	.+4      	; 0x14e0 <__udivmodhi4_ep>
    14dc:	a6 1b       	sub	r26, r22
    14de:	b7 0b       	sbc	r27, r23

000014e0 <__udivmodhi4_ep>:
    14e0:	88 1f       	adc	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	5a 95       	dec	r21
    14e6:	a9 f7       	brne	.-22     	; 0x14d2 <__udivmodhi4_loop>
    14e8:	80 95       	com	r24
    14ea:	90 95       	com	r25
    14ec:	bc 01       	movw	r22, r24
    14ee:	cd 01       	movw	r24, r26
    14f0:	08 95       	ret

000014f2 <fdevopen>:
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	31 f4       	brne	.+12     	; 0x150a <fdevopen+0x18>
    14fe:	61 15       	cp	r22, r1
    1500:	71 05       	cpc	r23, r1
    1502:	19 f4       	brne	.+6      	; 0x150a <fdevopen+0x18>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	3a c0       	rjmp	.+116    	; 0x157e <fdevopen+0x8c>
    150a:	8b 01       	movw	r16, r22
    150c:	ec 01       	movw	r28, r24
    150e:	6e e0       	ldi	r22, 0x0E	; 14
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <calloc>
    151a:	fc 01       	movw	r30, r24
    151c:	89 2b       	or	r24, r25
    151e:	91 f3       	breq	.-28     	; 0x1504 <fdevopen+0x12>
    1520:	80 e8       	ldi	r24, 0x80	; 128
    1522:	83 83       	std	Z+3, r24	; 0x03
    1524:	01 15       	cp	r16, r1
    1526:	11 05       	cpc	r17, r1
    1528:	71 f0       	breq	.+28     	; 0x1546 <fdevopen+0x54>
    152a:	13 87       	std	Z+11, r17	; 0x0b
    152c:	02 87       	std	Z+10, r16	; 0x0a
    152e:	81 e8       	ldi	r24, 0x81	; 129
    1530:	83 83       	std	Z+3, r24	; 0x03
    1532:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <__iob>
    1536:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <__iob+0x1>
    153a:	89 2b       	or	r24, r25
    153c:	21 f4       	brne	.+8      	; 0x1546 <fdevopen+0x54>
    153e:	f0 93 83 03 	sts	0x0383, r31	; 0x800383 <__iob+0x1>
    1542:	e0 93 82 03 	sts	0x0382, r30	; 0x800382 <__iob>
    1546:	20 97       	sbiw	r28, 0x00	; 0
    1548:	c9 f0       	breq	.+50     	; 0x157c <fdevopen+0x8a>
    154a:	d1 87       	std	Z+9, r29	; 0x09
    154c:	c0 87       	std	Z+8, r28	; 0x08
    154e:	83 81       	ldd	r24, Z+3	; 0x03
    1550:	82 60       	ori	r24, 0x02	; 2
    1552:	83 83       	std	Z+3, r24	; 0x03
    1554:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <__iob+0x2>
    1558:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <__iob+0x3>
    155c:	89 2b       	or	r24, r25
    155e:	71 f4       	brne	.+28     	; 0x157c <fdevopen+0x8a>
    1560:	f0 93 85 03 	sts	0x0385, r31	; 0x800385 <__iob+0x3>
    1564:	e0 93 84 03 	sts	0x0384, r30	; 0x800384 <__iob+0x2>
    1568:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <__iob+0x4>
    156c:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <__iob+0x5>
    1570:	89 2b       	or	r24, r25
    1572:	21 f4       	brne	.+8      	; 0x157c <fdevopen+0x8a>
    1574:	f0 93 87 03 	sts	0x0387, r31	; 0x800387 <__iob+0x5>
    1578:	e0 93 86 03 	sts	0x0386, r30	; 0x800386 <__iob+0x4>
    157c:	cf 01       	movw	r24, r30
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	08 95       	ret

00001588 <printf>:
    1588:	a0 e0       	ldi	r26, 0x00	; 0
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ea ec       	ldi	r30, 0xCA	; 202
    158e:	fa e0       	ldi	r31, 0x0A	; 10
    1590:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__prologue_saves__+0x20>
    1594:	ae 01       	movw	r20, r28
    1596:	4b 5f       	subi	r20, 0xFB	; 251
    1598:	5f 4f       	sbci	r21, 0xFF	; 255
    159a:	fa 01       	movw	r30, r20
    159c:	61 91       	ld	r22, Z+
    159e:	71 91       	ld	r23, Z+
    15a0:	af 01       	movw	r20, r30
    15a2:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <__iob+0x2>
    15a6:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <__iob+0x3>
    15aa:	0e 94 3a 0b 	call	0x1674	; 0x1674 <vfprintf>
    15ae:	e2 e0       	ldi	r30, 0x02	; 2
    15b0:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__epilogue_restores__+0x20>

000015b4 <puts>:
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	e0 91 84 03 	lds	r30, 0x0384	; 0x800384 <__iob+0x2>
    15c0:	f0 91 85 03 	lds	r31, 0x0385	; 0x800385 <__iob+0x3>
    15c4:	23 81       	ldd	r18, Z+3	; 0x03
    15c6:	21 ff       	sbrs	r18, 1
    15c8:	1b c0       	rjmp	.+54     	; 0x1600 <puts+0x4c>
    15ca:	8c 01       	movw	r16, r24
    15cc:	d0 e0       	ldi	r29, 0x00	; 0
    15ce:	c0 e0       	ldi	r28, 0x00	; 0
    15d0:	f8 01       	movw	r30, r16
    15d2:	81 91       	ld	r24, Z+
    15d4:	8f 01       	movw	r16, r30
    15d6:	60 91 84 03 	lds	r22, 0x0384	; 0x800384 <__iob+0x2>
    15da:	70 91 85 03 	lds	r23, 0x0385	; 0x800385 <__iob+0x3>
    15de:	db 01       	movw	r26, r22
    15e0:	18 96       	adiw	r26, 0x08	; 8
    15e2:	ed 91       	ld	r30, X+
    15e4:	fc 91       	ld	r31, X
    15e6:	19 97       	sbiw	r26, 0x09	; 9
    15e8:	88 23       	and	r24, r24
    15ea:	31 f0       	breq	.+12     	; 0x15f8 <puts+0x44>
    15ec:	09 95       	icall
    15ee:	89 2b       	or	r24, r25
    15f0:	79 f3       	breq	.-34     	; 0x15d0 <puts+0x1c>
    15f2:	df ef       	ldi	r29, 0xFF	; 255
    15f4:	cf ef       	ldi	r28, 0xFF	; 255
    15f6:	ec cf       	rjmp	.-40     	; 0x15d0 <puts+0x1c>
    15f8:	8a e0       	ldi	r24, 0x0A	; 10
    15fa:	09 95       	icall
    15fc:	89 2b       	or	r24, r25
    15fe:	19 f0       	breq	.+6      	; 0x1606 <puts+0x52>
    1600:	8f ef       	ldi	r24, 0xFF	; 255
    1602:	9f ef       	ldi	r25, 0xFF	; 255
    1604:	02 c0       	rjmp	.+4      	; 0x160a <puts+0x56>
    1606:	8d 2f       	mov	r24, r29
    1608:	9c 2f       	mov	r25, r28
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	08 95       	ret

00001614 <snprintf>:
    1614:	ae e0       	ldi	r26, 0x0E	; 14
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e0 e1       	ldi	r30, 0x10	; 16
    161a:	fb e0       	ldi	r31, 0x0B	; 11
    161c:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__prologue_saves__+0x1c>
    1620:	0d 89       	ldd	r16, Y+21	; 0x15
    1622:	1e 89       	ldd	r17, Y+22	; 0x16
    1624:	8f 89       	ldd	r24, Y+23	; 0x17
    1626:	98 8d       	ldd	r25, Y+24	; 0x18
    1628:	26 e0       	ldi	r18, 0x06	; 6
    162a:	2c 83       	std	Y+4, r18	; 0x04
    162c:	1a 83       	std	Y+2, r17	; 0x02
    162e:	09 83       	std	Y+1, r16	; 0x01
    1630:	97 ff       	sbrs	r25, 7
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <snprintf+0x24>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e8       	ldi	r25, 0x80	; 128
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 83       	std	Y+5, r24	; 0x05
    163e:	ae 01       	movw	r20, r28
    1640:	45 5e       	subi	r20, 0xE5	; 229
    1642:	5f 4f       	sbci	r21, 0xFF	; 255
    1644:	69 8d       	ldd	r22, Y+25	; 0x19
    1646:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1648:	ce 01       	movw	r24, r28
    164a:	01 96       	adiw	r24, 0x01	; 1
    164c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <vfprintf>
    1650:	4d 81       	ldd	r20, Y+5	; 0x05
    1652:	5e 81       	ldd	r21, Y+6	; 0x06
    1654:	57 fd       	sbrc	r21, 7
    1656:	0a c0       	rjmp	.+20     	; 0x166c <snprintf+0x58>
    1658:	2f 81       	ldd	r18, Y+7	; 0x07
    165a:	38 85       	ldd	r19, Y+8	; 0x08
    165c:	42 17       	cp	r20, r18
    165e:	53 07       	cpc	r21, r19
    1660:	0c f4       	brge	.+2      	; 0x1664 <snprintf+0x50>
    1662:	9a 01       	movw	r18, r20
    1664:	f8 01       	movw	r30, r16
    1666:	e2 0f       	add	r30, r18
    1668:	f3 1f       	adc	r31, r19
    166a:	10 82       	st	Z, r1
    166c:	2e 96       	adiw	r28, 0x0e	; 14
    166e:	e4 e0       	ldi	r30, 0x04	; 4
    1670:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__epilogue_restores__+0x1c>

00001674 <vfprintf>:
    1674:	ab e0       	ldi	r26, 0x0B	; 11
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e0 e4       	ldi	r30, 0x40	; 64
    167a:	fb e0       	ldi	r31, 0x0B	; 11
    167c:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__>
    1680:	6c 01       	movw	r12, r24
    1682:	7b 01       	movw	r14, r22
    1684:	8a 01       	movw	r16, r20
    1686:	fc 01       	movw	r30, r24
    1688:	17 82       	std	Z+7, r1	; 0x07
    168a:	16 82       	std	Z+6, r1	; 0x06
    168c:	83 81       	ldd	r24, Z+3	; 0x03
    168e:	81 ff       	sbrs	r24, 1
    1690:	cc c1       	rjmp	.+920    	; 0x1a2a <vfprintf+0x3b6>
    1692:	ce 01       	movw	r24, r28
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	3c 01       	movw	r6, r24
    1698:	f6 01       	movw	r30, r12
    169a:	93 81       	ldd	r25, Z+3	; 0x03
    169c:	f7 01       	movw	r30, r14
    169e:	93 fd       	sbrc	r25, 3
    16a0:	85 91       	lpm	r24, Z+
    16a2:	93 ff       	sbrs	r25, 3
    16a4:	81 91       	ld	r24, Z+
    16a6:	7f 01       	movw	r14, r30
    16a8:	88 23       	and	r24, r24
    16aa:	09 f4       	brne	.+2      	; 0x16ae <vfprintf+0x3a>
    16ac:	ba c1       	rjmp	.+884    	; 0x1a22 <vfprintf+0x3ae>
    16ae:	85 32       	cpi	r24, 0x25	; 37
    16b0:	39 f4       	brne	.+14     	; 0x16c0 <vfprintf+0x4c>
    16b2:	93 fd       	sbrc	r25, 3
    16b4:	85 91       	lpm	r24, Z+
    16b6:	93 ff       	sbrs	r25, 3
    16b8:	81 91       	ld	r24, Z+
    16ba:	7f 01       	movw	r14, r30
    16bc:	85 32       	cpi	r24, 0x25	; 37
    16be:	29 f4       	brne	.+10     	; 0x16ca <vfprintf+0x56>
    16c0:	b6 01       	movw	r22, r12
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 75 0e 	call	0x1cea	; 0x1cea <fputc>
    16c8:	e7 cf       	rjmp	.-50     	; 0x1698 <vfprintf+0x24>
    16ca:	91 2c       	mov	r9, r1
    16cc:	21 2c       	mov	r2, r1
    16ce:	31 2c       	mov	r3, r1
    16d0:	ff e1       	ldi	r31, 0x1F	; 31
    16d2:	f3 15       	cp	r31, r3
    16d4:	d8 f0       	brcs	.+54     	; 0x170c <vfprintf+0x98>
    16d6:	8b 32       	cpi	r24, 0x2B	; 43
    16d8:	79 f0       	breq	.+30     	; 0x16f8 <vfprintf+0x84>
    16da:	38 f4       	brcc	.+14     	; 0x16ea <vfprintf+0x76>
    16dc:	80 32       	cpi	r24, 0x20	; 32
    16de:	79 f0       	breq	.+30     	; 0x16fe <vfprintf+0x8a>
    16e0:	83 32       	cpi	r24, 0x23	; 35
    16e2:	a1 f4       	brne	.+40     	; 0x170c <vfprintf+0x98>
    16e4:	23 2d       	mov	r18, r3
    16e6:	20 61       	ori	r18, 0x10	; 16
    16e8:	1d c0       	rjmp	.+58     	; 0x1724 <vfprintf+0xb0>
    16ea:	8d 32       	cpi	r24, 0x2D	; 45
    16ec:	61 f0       	breq	.+24     	; 0x1706 <vfprintf+0x92>
    16ee:	80 33       	cpi	r24, 0x30	; 48
    16f0:	69 f4       	brne	.+26     	; 0x170c <vfprintf+0x98>
    16f2:	23 2d       	mov	r18, r3
    16f4:	21 60       	ori	r18, 0x01	; 1
    16f6:	16 c0       	rjmp	.+44     	; 0x1724 <vfprintf+0xb0>
    16f8:	83 2d       	mov	r24, r3
    16fa:	82 60       	ori	r24, 0x02	; 2
    16fc:	38 2e       	mov	r3, r24
    16fe:	e3 2d       	mov	r30, r3
    1700:	e4 60       	ori	r30, 0x04	; 4
    1702:	3e 2e       	mov	r3, r30
    1704:	2a c0       	rjmp	.+84     	; 0x175a <vfprintf+0xe6>
    1706:	f3 2d       	mov	r31, r3
    1708:	f8 60       	ori	r31, 0x08	; 8
    170a:	1d c0       	rjmp	.+58     	; 0x1746 <vfprintf+0xd2>
    170c:	37 fc       	sbrc	r3, 7
    170e:	2d c0       	rjmp	.+90     	; 0x176a <vfprintf+0xf6>
    1710:	20 ed       	ldi	r18, 0xD0	; 208
    1712:	28 0f       	add	r18, r24
    1714:	2a 30       	cpi	r18, 0x0A	; 10
    1716:	40 f0       	brcs	.+16     	; 0x1728 <vfprintf+0xb4>
    1718:	8e 32       	cpi	r24, 0x2E	; 46
    171a:	b9 f4       	brne	.+46     	; 0x174a <vfprintf+0xd6>
    171c:	36 fc       	sbrc	r3, 6
    171e:	81 c1       	rjmp	.+770    	; 0x1a22 <vfprintf+0x3ae>
    1720:	23 2d       	mov	r18, r3
    1722:	20 64       	ori	r18, 0x40	; 64
    1724:	32 2e       	mov	r3, r18
    1726:	19 c0       	rjmp	.+50     	; 0x175a <vfprintf+0xe6>
    1728:	36 fe       	sbrs	r3, 6
    172a:	06 c0       	rjmp	.+12     	; 0x1738 <vfprintf+0xc4>
    172c:	8a e0       	ldi	r24, 0x0A	; 10
    172e:	98 9e       	mul	r9, r24
    1730:	20 0d       	add	r18, r0
    1732:	11 24       	eor	r1, r1
    1734:	92 2e       	mov	r9, r18
    1736:	11 c0       	rjmp	.+34     	; 0x175a <vfprintf+0xe6>
    1738:	ea e0       	ldi	r30, 0x0A	; 10
    173a:	2e 9e       	mul	r2, r30
    173c:	20 0d       	add	r18, r0
    173e:	11 24       	eor	r1, r1
    1740:	22 2e       	mov	r2, r18
    1742:	f3 2d       	mov	r31, r3
    1744:	f0 62       	ori	r31, 0x20	; 32
    1746:	3f 2e       	mov	r3, r31
    1748:	08 c0       	rjmp	.+16     	; 0x175a <vfprintf+0xe6>
    174a:	8c 36       	cpi	r24, 0x6C	; 108
    174c:	21 f4       	brne	.+8      	; 0x1756 <vfprintf+0xe2>
    174e:	83 2d       	mov	r24, r3
    1750:	80 68       	ori	r24, 0x80	; 128
    1752:	38 2e       	mov	r3, r24
    1754:	02 c0       	rjmp	.+4      	; 0x175a <vfprintf+0xe6>
    1756:	88 36       	cpi	r24, 0x68	; 104
    1758:	41 f4       	brne	.+16     	; 0x176a <vfprintf+0xf6>
    175a:	f7 01       	movw	r30, r14
    175c:	93 fd       	sbrc	r25, 3
    175e:	85 91       	lpm	r24, Z+
    1760:	93 ff       	sbrs	r25, 3
    1762:	81 91       	ld	r24, Z+
    1764:	7f 01       	movw	r14, r30
    1766:	81 11       	cpse	r24, r1
    1768:	b3 cf       	rjmp	.-154    	; 0x16d0 <vfprintf+0x5c>
    176a:	98 2f       	mov	r25, r24
    176c:	9f 7d       	andi	r25, 0xDF	; 223
    176e:	95 54       	subi	r25, 0x45	; 69
    1770:	93 30       	cpi	r25, 0x03	; 3
    1772:	28 f4       	brcc	.+10     	; 0x177e <vfprintf+0x10a>
    1774:	0c 5f       	subi	r16, 0xFC	; 252
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	9f e3       	ldi	r25, 0x3F	; 63
    177a:	99 83       	std	Y+1, r25	; 0x01
    177c:	0d c0       	rjmp	.+26     	; 0x1798 <vfprintf+0x124>
    177e:	83 36       	cpi	r24, 0x63	; 99
    1780:	31 f0       	breq	.+12     	; 0x178e <vfprintf+0x11a>
    1782:	83 37       	cpi	r24, 0x73	; 115
    1784:	71 f0       	breq	.+28     	; 0x17a2 <vfprintf+0x12e>
    1786:	83 35       	cpi	r24, 0x53	; 83
    1788:	09 f0       	breq	.+2      	; 0x178c <vfprintf+0x118>
    178a:	59 c0       	rjmp	.+178    	; 0x183e <vfprintf+0x1ca>
    178c:	21 c0       	rjmp	.+66     	; 0x17d0 <vfprintf+0x15c>
    178e:	f8 01       	movw	r30, r16
    1790:	80 81       	ld	r24, Z
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	0e 5f       	subi	r16, 0xFE	; 254
    1796:	1f 4f       	sbci	r17, 0xFF	; 255
    1798:	88 24       	eor	r8, r8
    179a:	83 94       	inc	r8
    179c:	91 2c       	mov	r9, r1
    179e:	53 01       	movw	r10, r6
    17a0:	13 c0       	rjmp	.+38     	; 0x17c8 <vfprintf+0x154>
    17a2:	28 01       	movw	r4, r16
    17a4:	f2 e0       	ldi	r31, 0x02	; 2
    17a6:	4f 0e       	add	r4, r31
    17a8:	51 1c       	adc	r5, r1
    17aa:	f8 01       	movw	r30, r16
    17ac:	a0 80       	ld	r10, Z
    17ae:	b1 80       	ldd	r11, Z+1	; 0x01
    17b0:	36 fe       	sbrs	r3, 6
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <vfprintf+0x146>
    17b4:	69 2d       	mov	r22, r9
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <vfprintf+0x14a>
    17ba:	6f ef       	ldi	r22, 0xFF	; 255
    17bc:	7f ef       	ldi	r23, 0xFF	; 255
    17be:	c5 01       	movw	r24, r10
    17c0:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <strnlen>
    17c4:	4c 01       	movw	r8, r24
    17c6:	82 01       	movw	r16, r4
    17c8:	f3 2d       	mov	r31, r3
    17ca:	ff 77       	andi	r31, 0x7F	; 127
    17cc:	3f 2e       	mov	r3, r31
    17ce:	16 c0       	rjmp	.+44     	; 0x17fc <vfprintf+0x188>
    17d0:	28 01       	movw	r4, r16
    17d2:	22 e0       	ldi	r18, 0x02	; 2
    17d4:	42 0e       	add	r4, r18
    17d6:	51 1c       	adc	r5, r1
    17d8:	f8 01       	movw	r30, r16
    17da:	a0 80       	ld	r10, Z
    17dc:	b1 80       	ldd	r11, Z+1	; 0x01
    17de:	36 fe       	sbrs	r3, 6
    17e0:	03 c0       	rjmp	.+6      	; 0x17e8 <vfprintf+0x174>
    17e2:	69 2d       	mov	r22, r9
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <vfprintf+0x178>
    17e8:	6f ef       	ldi	r22, 0xFF	; 255
    17ea:	7f ef       	ldi	r23, 0xFF	; 255
    17ec:	c5 01       	movw	r24, r10
    17ee:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <strnlen_P>
    17f2:	4c 01       	movw	r8, r24
    17f4:	f3 2d       	mov	r31, r3
    17f6:	f0 68       	ori	r31, 0x80	; 128
    17f8:	3f 2e       	mov	r3, r31
    17fa:	82 01       	movw	r16, r4
    17fc:	33 fc       	sbrc	r3, 3
    17fe:	1b c0       	rjmp	.+54     	; 0x1836 <vfprintf+0x1c2>
    1800:	82 2d       	mov	r24, r2
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	88 16       	cp	r8, r24
    1806:	99 06       	cpc	r9, r25
    1808:	b0 f4       	brcc	.+44     	; 0x1836 <vfprintf+0x1c2>
    180a:	b6 01       	movw	r22, r12
    180c:	80 e2       	ldi	r24, 0x20	; 32
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 75 0e 	call	0x1cea	; 0x1cea <fputc>
    1814:	2a 94       	dec	r2
    1816:	f4 cf       	rjmp	.-24     	; 0x1800 <vfprintf+0x18c>
    1818:	f5 01       	movw	r30, r10
    181a:	37 fc       	sbrc	r3, 7
    181c:	85 91       	lpm	r24, Z+
    181e:	37 fe       	sbrs	r3, 7
    1820:	81 91       	ld	r24, Z+
    1822:	5f 01       	movw	r10, r30
    1824:	b6 01       	movw	r22, r12
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 94 75 0e 	call	0x1cea	; 0x1cea <fputc>
    182c:	21 10       	cpse	r2, r1
    182e:	2a 94       	dec	r2
    1830:	21 e0       	ldi	r18, 0x01	; 1
    1832:	82 1a       	sub	r8, r18
    1834:	91 08       	sbc	r9, r1
    1836:	81 14       	cp	r8, r1
    1838:	91 04       	cpc	r9, r1
    183a:	71 f7       	brne	.-36     	; 0x1818 <vfprintf+0x1a4>
    183c:	e8 c0       	rjmp	.+464    	; 0x1a0e <vfprintf+0x39a>
    183e:	84 36       	cpi	r24, 0x64	; 100
    1840:	11 f0       	breq	.+4      	; 0x1846 <vfprintf+0x1d2>
    1842:	89 36       	cpi	r24, 0x69	; 105
    1844:	41 f5       	brne	.+80     	; 0x1896 <vfprintf+0x222>
    1846:	f8 01       	movw	r30, r16
    1848:	37 fe       	sbrs	r3, 7
    184a:	07 c0       	rjmp	.+14     	; 0x185a <vfprintf+0x1e6>
    184c:	60 81       	ld	r22, Z
    184e:	71 81       	ldd	r23, Z+1	; 0x01
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	0c 5f       	subi	r16, 0xFC	; 252
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	08 c0       	rjmp	.+16     	; 0x186a <vfprintf+0x1f6>
    185a:	60 81       	ld	r22, Z
    185c:	71 81       	ldd	r23, Z+1	; 0x01
    185e:	07 2e       	mov	r0, r23
    1860:	00 0c       	add	r0, r0
    1862:	88 0b       	sbc	r24, r24
    1864:	99 0b       	sbc	r25, r25
    1866:	0e 5f       	subi	r16, 0xFE	; 254
    1868:	1f 4f       	sbci	r17, 0xFF	; 255
    186a:	f3 2d       	mov	r31, r3
    186c:	ff 76       	andi	r31, 0x6F	; 111
    186e:	3f 2e       	mov	r3, r31
    1870:	97 ff       	sbrs	r25, 7
    1872:	09 c0       	rjmp	.+18     	; 0x1886 <vfprintf+0x212>
    1874:	90 95       	com	r25
    1876:	80 95       	com	r24
    1878:	70 95       	com	r23
    187a:	61 95       	neg	r22
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	8f 4f       	sbci	r24, 0xFF	; 255
    1880:	9f 4f       	sbci	r25, 0xFF	; 255
    1882:	f0 68       	ori	r31, 0x80	; 128
    1884:	3f 2e       	mov	r3, r31
    1886:	2a e0       	ldi	r18, 0x0A	; 10
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	a3 01       	movw	r20, r6
    188c:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__ultoa_invert>
    1890:	88 2e       	mov	r8, r24
    1892:	86 18       	sub	r8, r6
    1894:	45 c0       	rjmp	.+138    	; 0x1920 <vfprintf+0x2ac>
    1896:	85 37       	cpi	r24, 0x75	; 117
    1898:	31 f4       	brne	.+12     	; 0x18a6 <vfprintf+0x232>
    189a:	23 2d       	mov	r18, r3
    189c:	2f 7e       	andi	r18, 0xEF	; 239
    189e:	b2 2e       	mov	r11, r18
    18a0:	2a e0       	ldi	r18, 0x0A	; 10
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	25 c0       	rjmp	.+74     	; 0x18f0 <vfprintf+0x27c>
    18a6:	93 2d       	mov	r25, r3
    18a8:	99 7f       	andi	r25, 0xF9	; 249
    18aa:	b9 2e       	mov	r11, r25
    18ac:	8f 36       	cpi	r24, 0x6F	; 111
    18ae:	c1 f0       	breq	.+48     	; 0x18e0 <vfprintf+0x26c>
    18b0:	18 f4       	brcc	.+6      	; 0x18b8 <vfprintf+0x244>
    18b2:	88 35       	cpi	r24, 0x58	; 88
    18b4:	79 f0       	breq	.+30     	; 0x18d4 <vfprintf+0x260>
    18b6:	b5 c0       	rjmp	.+362    	; 0x1a22 <vfprintf+0x3ae>
    18b8:	80 37       	cpi	r24, 0x70	; 112
    18ba:	19 f0       	breq	.+6      	; 0x18c2 <vfprintf+0x24e>
    18bc:	88 37       	cpi	r24, 0x78	; 120
    18be:	21 f0       	breq	.+8      	; 0x18c8 <vfprintf+0x254>
    18c0:	b0 c0       	rjmp	.+352    	; 0x1a22 <vfprintf+0x3ae>
    18c2:	e9 2f       	mov	r30, r25
    18c4:	e0 61       	ori	r30, 0x10	; 16
    18c6:	be 2e       	mov	r11, r30
    18c8:	b4 fe       	sbrs	r11, 4
    18ca:	0d c0       	rjmp	.+26     	; 0x18e6 <vfprintf+0x272>
    18cc:	fb 2d       	mov	r31, r11
    18ce:	f4 60       	ori	r31, 0x04	; 4
    18d0:	bf 2e       	mov	r11, r31
    18d2:	09 c0       	rjmp	.+18     	; 0x18e6 <vfprintf+0x272>
    18d4:	34 fe       	sbrs	r3, 4
    18d6:	0a c0       	rjmp	.+20     	; 0x18ec <vfprintf+0x278>
    18d8:	29 2f       	mov	r18, r25
    18da:	26 60       	ori	r18, 0x06	; 6
    18dc:	b2 2e       	mov	r11, r18
    18de:	06 c0       	rjmp	.+12     	; 0x18ec <vfprintf+0x278>
    18e0:	28 e0       	ldi	r18, 0x08	; 8
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	05 c0       	rjmp	.+10     	; 0x18f0 <vfprintf+0x27c>
    18e6:	20 e1       	ldi	r18, 0x10	; 16
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <vfprintf+0x27c>
    18ec:	20 e1       	ldi	r18, 0x10	; 16
    18ee:	32 e0       	ldi	r19, 0x02	; 2
    18f0:	f8 01       	movw	r30, r16
    18f2:	b7 fe       	sbrs	r11, 7
    18f4:	07 c0       	rjmp	.+14     	; 0x1904 <vfprintf+0x290>
    18f6:	60 81       	ld	r22, Z
    18f8:	71 81       	ldd	r23, Z+1	; 0x01
    18fa:	82 81       	ldd	r24, Z+2	; 0x02
    18fc:	93 81       	ldd	r25, Z+3	; 0x03
    18fe:	0c 5f       	subi	r16, 0xFC	; 252
    1900:	1f 4f       	sbci	r17, 0xFF	; 255
    1902:	06 c0       	rjmp	.+12     	; 0x1910 <vfprintf+0x29c>
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 5f       	subi	r16, 0xFE	; 254
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	a3 01       	movw	r20, r6
    1912:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__ultoa_invert>
    1916:	88 2e       	mov	r8, r24
    1918:	86 18       	sub	r8, r6
    191a:	fb 2d       	mov	r31, r11
    191c:	ff 77       	andi	r31, 0x7F	; 127
    191e:	3f 2e       	mov	r3, r31
    1920:	36 fe       	sbrs	r3, 6
    1922:	0d c0       	rjmp	.+26     	; 0x193e <vfprintf+0x2ca>
    1924:	23 2d       	mov	r18, r3
    1926:	2e 7f       	andi	r18, 0xFE	; 254
    1928:	a2 2e       	mov	r10, r18
    192a:	89 14       	cp	r8, r9
    192c:	58 f4       	brcc	.+22     	; 0x1944 <vfprintf+0x2d0>
    192e:	34 fe       	sbrs	r3, 4
    1930:	0b c0       	rjmp	.+22     	; 0x1948 <vfprintf+0x2d4>
    1932:	32 fc       	sbrc	r3, 2
    1934:	09 c0       	rjmp	.+18     	; 0x1948 <vfprintf+0x2d4>
    1936:	83 2d       	mov	r24, r3
    1938:	8e 7e       	andi	r24, 0xEE	; 238
    193a:	a8 2e       	mov	r10, r24
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <vfprintf+0x2d4>
    193e:	b8 2c       	mov	r11, r8
    1940:	a3 2c       	mov	r10, r3
    1942:	03 c0       	rjmp	.+6      	; 0x194a <vfprintf+0x2d6>
    1944:	b8 2c       	mov	r11, r8
    1946:	01 c0       	rjmp	.+2      	; 0x194a <vfprintf+0x2d6>
    1948:	b9 2c       	mov	r11, r9
    194a:	a4 fe       	sbrs	r10, 4
    194c:	0f c0       	rjmp	.+30     	; 0x196c <vfprintf+0x2f8>
    194e:	fe 01       	movw	r30, r28
    1950:	e8 0d       	add	r30, r8
    1952:	f1 1d       	adc	r31, r1
    1954:	80 81       	ld	r24, Z
    1956:	80 33       	cpi	r24, 0x30	; 48
    1958:	21 f4       	brne	.+8      	; 0x1962 <vfprintf+0x2ee>
    195a:	9a 2d       	mov	r25, r10
    195c:	99 7e       	andi	r25, 0xE9	; 233
    195e:	a9 2e       	mov	r10, r25
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <vfprintf+0x300>
    1962:	a2 fe       	sbrs	r10, 2
    1964:	06 c0       	rjmp	.+12     	; 0x1972 <vfprintf+0x2fe>
    1966:	b3 94       	inc	r11
    1968:	b3 94       	inc	r11
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <vfprintf+0x300>
    196c:	8a 2d       	mov	r24, r10
    196e:	86 78       	andi	r24, 0x86	; 134
    1970:	09 f0       	breq	.+2      	; 0x1974 <vfprintf+0x300>
    1972:	b3 94       	inc	r11
    1974:	a3 fc       	sbrc	r10, 3
    1976:	11 c0       	rjmp	.+34     	; 0x199a <vfprintf+0x326>
    1978:	a0 fe       	sbrs	r10, 0
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <vfprintf+0x314>
    197c:	b2 14       	cp	r11, r2
    197e:	88 f4       	brcc	.+34     	; 0x19a2 <vfprintf+0x32e>
    1980:	28 0c       	add	r2, r8
    1982:	92 2c       	mov	r9, r2
    1984:	9b 18       	sub	r9, r11
    1986:	0e c0       	rjmp	.+28     	; 0x19a4 <vfprintf+0x330>
    1988:	b2 14       	cp	r11, r2
    198a:	60 f4       	brcc	.+24     	; 0x19a4 <vfprintf+0x330>
    198c:	b6 01       	movw	r22, r12
    198e:	80 e2       	ldi	r24, 0x20	; 32
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 75 0e 	call	0x1cea	; 0x1cea <fputc>
    1996:	b3 94       	inc	r11
    1998:	f7 cf       	rjmp	.-18     	; 0x1988 <vfprintf+0x314>
    199a:	b2 14       	cp	r11, r2
    199c:	18 f4       	brcc	.+6      	; 0x19a4 <vfprintf+0x330>
    199e:	2b 18       	sub	r2, r11
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <vfprintf+0x332>
    19a2:	98 2c       	mov	r9, r8
    19a4:	21 2c       	mov	r2, r1
    19a6:	a4 fe       	sbrs	r10, 4
    19a8:	10 c0       	rjmp	.+32     	; 0x19ca <vfprintf+0x356>
    19aa:	b6 01       	movw	r22, r12
    19ac:	80 e3       	ldi	r24, 0x30	; 48
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 75 0e 	call	0x1cea	; 0x1cea <fputc>
    19b4:	a2 fe       	sbrs	r10, 2
    19b6:	17 c0       	rjmp	.+46     	; 0x19e6 <vfprintf+0x372>
    19b8:	a1 fc       	sbrc	r10, 1
    19ba:	03 c0       	rjmp	.+6      	; 0x19c2 <vfprintf+0x34e>
    19bc:	88 e7       	ldi	r24, 0x78	; 120
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <vfprintf+0x352>
    19c2:	88 e5       	ldi	r24, 0x58	; 88
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	b6 01       	movw	r22, r12
    19c8:	0c c0       	rjmp	.+24     	; 0x19e2 <vfprintf+0x36e>
    19ca:	8a 2d       	mov	r24, r10
    19cc:	86 78       	andi	r24, 0x86	; 134
    19ce:	59 f0       	breq	.+22     	; 0x19e6 <vfprintf+0x372>
    19d0:	a1 fe       	sbrs	r10, 1
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <vfprintf+0x364>
    19d4:	8b e2       	ldi	r24, 0x2B	; 43
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <vfprintf+0x366>
    19d8:	80 e2       	ldi	r24, 0x20	; 32
    19da:	a7 fc       	sbrc	r10, 7
    19dc:	8d e2       	ldi	r24, 0x2D	; 45
    19de:	b6 01       	movw	r22, r12
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	0e 94 75 0e 	call	0x1cea	; 0x1cea <fputc>
    19e6:	89 14       	cp	r8, r9
    19e8:	38 f4       	brcc	.+14     	; 0x19f8 <vfprintf+0x384>
    19ea:	b6 01       	movw	r22, r12
    19ec:	80 e3       	ldi	r24, 0x30	; 48
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 75 0e 	call	0x1cea	; 0x1cea <fputc>
    19f4:	9a 94       	dec	r9
    19f6:	f7 cf       	rjmp	.-18     	; 0x19e6 <vfprintf+0x372>
    19f8:	8a 94       	dec	r8
    19fa:	f3 01       	movw	r30, r6
    19fc:	e8 0d       	add	r30, r8
    19fe:	f1 1d       	adc	r31, r1
    1a00:	80 81       	ld	r24, Z
    1a02:	b6 01       	movw	r22, r12
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 75 0e 	call	0x1cea	; 0x1cea <fputc>
    1a0a:	81 10       	cpse	r8, r1
    1a0c:	f5 cf       	rjmp	.-22     	; 0x19f8 <vfprintf+0x384>
    1a0e:	22 20       	and	r2, r2
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <vfprintf+0x3a0>
    1a12:	42 ce       	rjmp	.-892    	; 0x1698 <vfprintf+0x24>
    1a14:	b6 01       	movw	r22, r12
    1a16:	80 e2       	ldi	r24, 0x20	; 32
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 75 0e 	call	0x1cea	; 0x1cea <fputc>
    1a1e:	2a 94       	dec	r2
    1a20:	f6 cf       	rjmp	.-20     	; 0x1a0e <vfprintf+0x39a>
    1a22:	f6 01       	movw	r30, r12
    1a24:	86 81       	ldd	r24, Z+6	; 0x06
    1a26:	97 81       	ldd	r25, Z+7	; 0x07
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <vfprintf+0x3ba>
    1a2a:	8f ef       	ldi	r24, 0xFF	; 255
    1a2c:	9f ef       	ldi	r25, 0xFF	; 255
    1a2e:	2b 96       	adiw	r28, 0x0b	; 11
    1a30:	e2 e1       	ldi	r30, 0x12	; 18
    1a32:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__>

00001a36 <calloc>:
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	86 9f       	mul	r24, r22
    1a40:	80 01       	movw	r16, r0
    1a42:	87 9f       	mul	r24, r23
    1a44:	10 0d       	add	r17, r0
    1a46:	96 9f       	mul	r25, r22
    1a48:	10 0d       	add	r17, r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <malloc>
    1a52:	ec 01       	movw	r28, r24
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	29 f0       	breq	.+10     	; 0x1a62 <calloc+0x2c>
    1a58:	a8 01       	movw	r20, r16
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <memset>
    1a62:	ce 01       	movw	r24, r28
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	08 95       	ret

00001a6e <malloc>:
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	82 30       	cpi	r24, 0x02	; 2
    1a78:	91 05       	cpc	r25, r1
    1a7a:	10 f4       	brcc	.+4      	; 0x1a80 <malloc+0x12>
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	e0 91 8a 03 	lds	r30, 0x038A	; 0x80038a <__flp>
    1a84:	f0 91 8b 03 	lds	r31, 0x038B	; 0x80038b <__flp+0x1>
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	a0 e0       	ldi	r26, 0x00	; 0
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	30 97       	sbiw	r30, 0x00	; 0
    1a92:	19 f1       	breq	.+70     	; 0x1ada <malloc+0x6c>
    1a94:	40 81       	ld	r20, Z
    1a96:	51 81       	ldd	r21, Z+1	; 0x01
    1a98:	02 81       	ldd	r16, Z+2	; 0x02
    1a9a:	13 81       	ldd	r17, Z+3	; 0x03
    1a9c:	48 17       	cp	r20, r24
    1a9e:	59 07       	cpc	r21, r25
    1aa0:	c8 f0       	brcs	.+50     	; 0x1ad4 <malloc+0x66>
    1aa2:	84 17       	cp	r24, r20
    1aa4:	95 07       	cpc	r25, r21
    1aa6:	69 f4       	brne	.+26     	; 0x1ac2 <malloc+0x54>
    1aa8:	10 97       	sbiw	r26, 0x00	; 0
    1aaa:	31 f0       	breq	.+12     	; 0x1ab8 <malloc+0x4a>
    1aac:	12 96       	adiw	r26, 0x02	; 2
    1aae:	0c 93       	st	X, r16
    1ab0:	12 97       	sbiw	r26, 0x02	; 2
    1ab2:	13 96       	adiw	r26, 0x03	; 3
    1ab4:	1c 93       	st	X, r17
    1ab6:	27 c0       	rjmp	.+78     	; 0x1b06 <malloc+0x98>
    1ab8:	00 93 8a 03 	sts	0x038A, r16	; 0x80038a <__flp>
    1abc:	10 93 8b 03 	sts	0x038B, r17	; 0x80038b <__flp+0x1>
    1ac0:	22 c0       	rjmp	.+68     	; 0x1b06 <malloc+0x98>
    1ac2:	21 15       	cp	r18, r1
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	19 f0       	breq	.+6      	; 0x1ace <malloc+0x60>
    1ac8:	42 17       	cp	r20, r18
    1aca:	53 07       	cpc	r21, r19
    1acc:	18 f4       	brcc	.+6      	; 0x1ad4 <malloc+0x66>
    1ace:	9a 01       	movw	r18, r20
    1ad0:	bd 01       	movw	r22, r26
    1ad2:	ef 01       	movw	r28, r30
    1ad4:	df 01       	movw	r26, r30
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	db cf       	rjmp	.-74     	; 0x1a90 <malloc+0x22>
    1ada:	21 15       	cp	r18, r1
    1adc:	31 05       	cpc	r19, r1
    1ade:	f9 f0       	breq	.+62     	; 0x1b1e <malloc+0xb0>
    1ae0:	28 1b       	sub	r18, r24
    1ae2:	39 0b       	sbc	r19, r25
    1ae4:	24 30       	cpi	r18, 0x04	; 4
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	80 f4       	brcc	.+32     	; 0x1b0a <malloc+0x9c>
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	9b 81       	ldd	r25, Y+3	; 0x03
    1aee:	61 15       	cp	r22, r1
    1af0:	71 05       	cpc	r23, r1
    1af2:	21 f0       	breq	.+8      	; 0x1afc <malloc+0x8e>
    1af4:	fb 01       	movw	r30, r22
    1af6:	93 83       	std	Z+3, r25	; 0x03
    1af8:	82 83       	std	Z+2, r24	; 0x02
    1afa:	04 c0       	rjmp	.+8      	; 0x1b04 <malloc+0x96>
    1afc:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <__flp+0x1>
    1b00:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <__flp>
    1b04:	fe 01       	movw	r30, r28
    1b06:	32 96       	adiw	r30, 0x02	; 2
    1b08:	44 c0       	rjmp	.+136    	; 0x1b92 <malloc+0x124>
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e2 0f       	add	r30, r18
    1b0e:	f3 1f       	adc	r31, r19
    1b10:	81 93       	st	Z+, r24
    1b12:	91 93       	st	Z+, r25
    1b14:	22 50       	subi	r18, 0x02	; 2
    1b16:	31 09       	sbc	r19, r1
    1b18:	39 83       	std	Y+1, r19	; 0x01
    1b1a:	28 83       	st	Y, r18
    1b1c:	3a c0       	rjmp	.+116    	; 0x1b92 <malloc+0x124>
    1b1e:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <__brkval>
    1b22:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <__brkval+0x1>
    1b26:	23 2b       	or	r18, r19
    1b28:	41 f4       	brne	.+16     	; 0x1b3a <malloc+0xcc>
    1b2a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1b2e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1b32:	30 93 89 03 	sts	0x0389, r19	; 0x800389 <__brkval+0x1>
    1b36:	20 93 88 03 	sts	0x0388, r18	; 0x800388 <__brkval>
    1b3a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b3e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1b42:	21 15       	cp	r18, r1
    1b44:	31 05       	cpc	r19, r1
    1b46:	41 f4       	brne	.+16     	; 0x1b58 <malloc+0xea>
    1b48:	2d b7       	in	r18, 0x3d	; 61
    1b4a:	3e b7       	in	r19, 0x3e	; 62
    1b4c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1b50:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1b54:	24 1b       	sub	r18, r20
    1b56:	35 0b       	sbc	r19, r21
    1b58:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <__brkval>
    1b5c:	f0 91 89 03 	lds	r31, 0x0389	; 0x800389 <__brkval+0x1>
    1b60:	e2 17       	cp	r30, r18
    1b62:	f3 07       	cpc	r31, r19
    1b64:	a0 f4       	brcc	.+40     	; 0x1b8e <malloc+0x120>
    1b66:	2e 1b       	sub	r18, r30
    1b68:	3f 0b       	sbc	r19, r31
    1b6a:	28 17       	cp	r18, r24
    1b6c:	39 07       	cpc	r19, r25
    1b6e:	78 f0       	brcs	.+30     	; 0x1b8e <malloc+0x120>
    1b70:	ac 01       	movw	r20, r24
    1b72:	4e 5f       	subi	r20, 0xFE	; 254
    1b74:	5f 4f       	sbci	r21, 0xFF	; 255
    1b76:	24 17       	cp	r18, r20
    1b78:	35 07       	cpc	r19, r21
    1b7a:	48 f0       	brcs	.+18     	; 0x1b8e <malloc+0x120>
    1b7c:	4e 0f       	add	r20, r30
    1b7e:	5f 1f       	adc	r21, r31
    1b80:	50 93 89 03 	sts	0x0389, r21	; 0x800389 <__brkval+0x1>
    1b84:	40 93 88 03 	sts	0x0388, r20	; 0x800388 <__brkval>
    1b88:	81 93       	st	Z+, r24
    1b8a:	91 93       	st	Z+, r25
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <malloc+0x124>
    1b8e:	e0 e0       	ldi	r30, 0x00	; 0
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	cf 01       	movw	r24, r30
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	08 95       	ret

00001b9e <free>:
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <free+0xa>
    1ba6:	81 c0       	rjmp	.+258    	; 0x1caa <free+0x10c>
    1ba8:	fc 01       	movw	r30, r24
    1baa:	32 97       	sbiw	r30, 0x02	; 2
    1bac:	13 82       	std	Z+3, r1	; 0x03
    1bae:	12 82       	std	Z+2, r1	; 0x02
    1bb0:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <__flp>
    1bb4:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <__flp+0x1>
    1bb8:	10 97       	sbiw	r26, 0x00	; 0
    1bba:	81 f4       	brne	.+32     	; 0x1bdc <free+0x3e>
    1bbc:	20 81       	ld	r18, Z
    1bbe:	31 81       	ldd	r19, Z+1	; 0x01
    1bc0:	82 0f       	add	r24, r18
    1bc2:	93 1f       	adc	r25, r19
    1bc4:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <__brkval>
    1bc8:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <__brkval+0x1>
    1bcc:	28 17       	cp	r18, r24
    1bce:	39 07       	cpc	r19, r25
    1bd0:	51 f5       	brne	.+84     	; 0x1c26 <free+0x88>
    1bd2:	f0 93 89 03 	sts	0x0389, r31	; 0x800389 <__brkval+0x1>
    1bd6:	e0 93 88 03 	sts	0x0388, r30	; 0x800388 <__brkval>
    1bda:	67 c0       	rjmp	.+206    	; 0x1caa <free+0x10c>
    1bdc:	ed 01       	movw	r28, r26
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	ce 17       	cp	r28, r30
    1be4:	df 07       	cpc	r29, r31
    1be6:	40 f4       	brcc	.+16     	; 0x1bf8 <free+0x5a>
    1be8:	4a 81       	ldd	r20, Y+2	; 0x02
    1bea:	5b 81       	ldd	r21, Y+3	; 0x03
    1bec:	9e 01       	movw	r18, r28
    1bee:	41 15       	cp	r20, r1
    1bf0:	51 05       	cpc	r21, r1
    1bf2:	f1 f0       	breq	.+60     	; 0x1c30 <free+0x92>
    1bf4:	ea 01       	movw	r28, r20
    1bf6:	f5 cf       	rjmp	.-22     	; 0x1be2 <free+0x44>
    1bf8:	d3 83       	std	Z+3, r29	; 0x03
    1bfa:	c2 83       	std	Z+2, r28	; 0x02
    1bfc:	40 81       	ld	r20, Z
    1bfe:	51 81       	ldd	r21, Z+1	; 0x01
    1c00:	84 0f       	add	r24, r20
    1c02:	95 1f       	adc	r25, r21
    1c04:	c8 17       	cp	r28, r24
    1c06:	d9 07       	cpc	r29, r25
    1c08:	59 f4       	brne	.+22     	; 0x1c20 <free+0x82>
    1c0a:	88 81       	ld	r24, Y
    1c0c:	99 81       	ldd	r25, Y+1	; 0x01
    1c0e:	84 0f       	add	r24, r20
    1c10:	95 1f       	adc	r25, r21
    1c12:	02 96       	adiw	r24, 0x02	; 2
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1c:	93 83       	std	Z+3, r25	; 0x03
    1c1e:	82 83       	std	Z+2, r24	; 0x02
    1c20:	21 15       	cp	r18, r1
    1c22:	31 05       	cpc	r19, r1
    1c24:	29 f4       	brne	.+10     	; 0x1c30 <free+0x92>
    1c26:	f0 93 8b 03 	sts	0x038B, r31	; 0x80038b <__flp+0x1>
    1c2a:	e0 93 8a 03 	sts	0x038A, r30	; 0x80038a <__flp>
    1c2e:	3d c0       	rjmp	.+122    	; 0x1caa <free+0x10c>
    1c30:	e9 01       	movw	r28, r18
    1c32:	fb 83       	std	Y+3, r31	; 0x03
    1c34:	ea 83       	std	Y+2, r30	; 0x02
    1c36:	49 91       	ld	r20, Y+
    1c38:	59 91       	ld	r21, Y+
    1c3a:	c4 0f       	add	r28, r20
    1c3c:	d5 1f       	adc	r29, r21
    1c3e:	ec 17       	cp	r30, r28
    1c40:	fd 07       	cpc	r31, r29
    1c42:	61 f4       	brne	.+24     	; 0x1c5c <free+0xbe>
    1c44:	80 81       	ld	r24, Z
    1c46:	91 81       	ldd	r25, Z+1	; 0x01
    1c48:	84 0f       	add	r24, r20
    1c4a:	95 1f       	adc	r25, r21
    1c4c:	02 96       	adiw	r24, 0x02	; 2
    1c4e:	e9 01       	movw	r28, r18
    1c50:	99 83       	std	Y+1, r25	; 0x01
    1c52:	88 83       	st	Y, r24
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	9b 83       	std	Y+3, r25	; 0x03
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
    1c5c:	e0 e0       	ldi	r30, 0x00	; 0
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	12 96       	adiw	r26, 0x02	; 2
    1c62:	8d 91       	ld	r24, X+
    1c64:	9c 91       	ld	r25, X
    1c66:	13 97       	sbiw	r26, 0x03	; 3
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	19 f0       	breq	.+6      	; 0x1c72 <free+0xd4>
    1c6c:	fd 01       	movw	r30, r26
    1c6e:	dc 01       	movw	r26, r24
    1c70:	f7 cf       	rjmp	.-18     	; 0x1c60 <free+0xc2>
    1c72:	8d 91       	ld	r24, X+
    1c74:	9c 91       	ld	r25, X
    1c76:	11 97       	sbiw	r26, 0x01	; 1
    1c78:	9d 01       	movw	r18, r26
    1c7a:	2e 5f       	subi	r18, 0xFE	; 254
    1c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7e:	82 0f       	add	r24, r18
    1c80:	93 1f       	adc	r25, r19
    1c82:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <__brkval>
    1c86:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <__brkval+0x1>
    1c8a:	28 17       	cp	r18, r24
    1c8c:	39 07       	cpc	r19, r25
    1c8e:	69 f4       	brne	.+26     	; 0x1caa <free+0x10c>
    1c90:	30 97       	sbiw	r30, 0x00	; 0
    1c92:	29 f4       	brne	.+10     	; 0x1c9e <free+0x100>
    1c94:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <__flp+0x1>
    1c98:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <__flp>
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <free+0x104>
    1c9e:	13 82       	std	Z+3, r1	; 0x03
    1ca0:	12 82       	std	Z+2, r1	; 0x02
    1ca2:	b0 93 89 03 	sts	0x0389, r27	; 0x800389 <__brkval+0x1>
    1ca6:	a0 93 88 03 	sts	0x0388, r26	; 0x800388 <__brkval>
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	08 95       	ret

00001cb0 <strnlen_P>:
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	05 90       	lpm	r0, Z+
    1cb4:	61 50       	subi	r22, 0x01	; 1
    1cb6:	70 40       	sbci	r23, 0x00	; 0
    1cb8:	01 10       	cpse	r0, r1
    1cba:	d8 f7       	brcc	.-10     	; 0x1cb2 <strnlen_P+0x2>
    1cbc:	80 95       	com	r24
    1cbe:	90 95       	com	r25
    1cc0:	8e 0f       	add	r24, r30
    1cc2:	9f 1f       	adc	r25, r31
    1cc4:	08 95       	ret

00001cc6 <memset>:
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	01 c0       	rjmp	.+2      	; 0x1ccc <memset+0x6>
    1cca:	6d 93       	st	X+, r22
    1ccc:	41 50       	subi	r20, 0x01	; 1
    1cce:	50 40       	sbci	r21, 0x00	; 0
    1cd0:	e0 f7       	brcc	.-8      	; 0x1cca <memset+0x4>
    1cd2:	08 95       	ret

00001cd4 <strnlen>:
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	61 50       	subi	r22, 0x01	; 1
    1cd8:	70 40       	sbci	r23, 0x00	; 0
    1cda:	01 90       	ld	r0, Z+
    1cdc:	01 10       	cpse	r0, r1
    1cde:	d8 f7       	brcc	.-10     	; 0x1cd6 <strnlen+0x2>
    1ce0:	80 95       	com	r24
    1ce2:	90 95       	com	r25
    1ce4:	8e 0f       	add	r24, r30
    1ce6:	9f 1f       	adc	r25, r31
    1ce8:	08 95       	ret

00001cea <fputc>:
    1cea:	0f 93       	push	r16
    1cec:	1f 93       	push	r17
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	fb 01       	movw	r30, r22
    1cf4:	23 81       	ldd	r18, Z+3	; 0x03
    1cf6:	21 fd       	sbrc	r18, 1
    1cf8:	03 c0       	rjmp	.+6      	; 0x1d00 <fputc+0x16>
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	9f ef       	ldi	r25, 0xFF	; 255
    1cfe:	2c c0       	rjmp	.+88     	; 0x1d58 <fputc+0x6e>
    1d00:	22 ff       	sbrs	r18, 2
    1d02:	16 c0       	rjmp	.+44     	; 0x1d30 <fputc+0x46>
    1d04:	46 81       	ldd	r20, Z+6	; 0x06
    1d06:	57 81       	ldd	r21, Z+7	; 0x07
    1d08:	24 81       	ldd	r18, Z+4	; 0x04
    1d0a:	35 81       	ldd	r19, Z+5	; 0x05
    1d0c:	42 17       	cp	r20, r18
    1d0e:	53 07       	cpc	r21, r19
    1d10:	44 f4       	brge	.+16     	; 0x1d22 <fputc+0x38>
    1d12:	a0 81       	ld	r26, Z
    1d14:	b1 81       	ldd	r27, Z+1	; 0x01
    1d16:	9d 01       	movw	r18, r26
    1d18:	2f 5f       	subi	r18, 0xFF	; 255
    1d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1c:	31 83       	std	Z+1, r19	; 0x01
    1d1e:	20 83       	st	Z, r18
    1d20:	8c 93       	st	X, r24
    1d22:	26 81       	ldd	r18, Z+6	; 0x06
    1d24:	37 81       	ldd	r19, Z+7	; 0x07
    1d26:	2f 5f       	subi	r18, 0xFF	; 255
    1d28:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2a:	37 83       	std	Z+7, r19	; 0x07
    1d2c:	26 83       	std	Z+6, r18	; 0x06
    1d2e:	14 c0       	rjmp	.+40     	; 0x1d58 <fputc+0x6e>
    1d30:	8b 01       	movw	r16, r22
    1d32:	ec 01       	movw	r28, r24
    1d34:	fb 01       	movw	r30, r22
    1d36:	00 84       	ldd	r0, Z+8	; 0x08
    1d38:	f1 85       	ldd	r31, Z+9	; 0x09
    1d3a:	e0 2d       	mov	r30, r0
    1d3c:	09 95       	icall
    1d3e:	89 2b       	or	r24, r25
    1d40:	e1 f6       	brne	.-72     	; 0x1cfa <fputc+0x10>
    1d42:	d8 01       	movw	r26, r16
    1d44:	16 96       	adiw	r26, 0x06	; 6
    1d46:	8d 91       	ld	r24, X+
    1d48:	9c 91       	ld	r25, X
    1d4a:	17 97       	sbiw	r26, 0x07	; 7
    1d4c:	01 96       	adiw	r24, 0x01	; 1
    1d4e:	17 96       	adiw	r26, 0x07	; 7
    1d50:	9c 93       	st	X, r25
    1d52:	8e 93       	st	-X, r24
    1d54:	16 97       	sbiw	r26, 0x06	; 6
    1d56:	ce 01       	movw	r24, r28
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	08 95       	ret

00001d62 <__ultoa_invert>:
    1d62:	fa 01       	movw	r30, r20
    1d64:	aa 27       	eor	r26, r26
    1d66:	28 30       	cpi	r18, 0x08	; 8
    1d68:	51 f1       	breq	.+84     	; 0x1dbe <__ultoa_invert+0x5c>
    1d6a:	20 31       	cpi	r18, 0x10	; 16
    1d6c:	81 f1       	breq	.+96     	; 0x1dce <__ultoa_invert+0x6c>
    1d6e:	e8 94       	clt
    1d70:	6f 93       	push	r22
    1d72:	6e 7f       	andi	r22, 0xFE	; 254
    1d74:	6e 5f       	subi	r22, 0xFE	; 254
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	8f 4f       	sbci	r24, 0xFF	; 255
    1d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7c:	af 4f       	sbci	r26, 0xFF	; 255
    1d7e:	b1 e0       	ldi	r27, 0x01	; 1
    1d80:	3e d0       	rcall	.+124    	; 0x1dfe <__ultoa_invert+0x9c>
    1d82:	b4 e0       	ldi	r27, 0x04	; 4
    1d84:	3c d0       	rcall	.+120    	; 0x1dfe <__ultoa_invert+0x9c>
    1d86:	67 0f       	add	r22, r23
    1d88:	78 1f       	adc	r23, r24
    1d8a:	89 1f       	adc	r24, r25
    1d8c:	9a 1f       	adc	r25, r26
    1d8e:	a1 1d       	adc	r26, r1
    1d90:	68 0f       	add	r22, r24
    1d92:	79 1f       	adc	r23, r25
    1d94:	8a 1f       	adc	r24, r26
    1d96:	91 1d       	adc	r25, r1
    1d98:	a1 1d       	adc	r26, r1
    1d9a:	6a 0f       	add	r22, r26
    1d9c:	71 1d       	adc	r23, r1
    1d9e:	81 1d       	adc	r24, r1
    1da0:	91 1d       	adc	r25, r1
    1da2:	a1 1d       	adc	r26, r1
    1da4:	20 d0       	rcall	.+64     	; 0x1de6 <__ultoa_invert+0x84>
    1da6:	09 f4       	brne	.+2      	; 0x1daa <__ultoa_invert+0x48>
    1da8:	68 94       	set
    1daa:	3f 91       	pop	r19
    1dac:	2a e0       	ldi	r18, 0x0A	; 10
    1dae:	26 9f       	mul	r18, r22
    1db0:	11 24       	eor	r1, r1
    1db2:	30 19       	sub	r19, r0
    1db4:	30 5d       	subi	r19, 0xD0	; 208
    1db6:	31 93       	st	Z+, r19
    1db8:	de f6       	brtc	.-74     	; 0x1d70 <__ultoa_invert+0xe>
    1dba:	cf 01       	movw	r24, r30
    1dbc:	08 95       	ret
    1dbe:	46 2f       	mov	r20, r22
    1dc0:	47 70       	andi	r20, 0x07	; 7
    1dc2:	40 5d       	subi	r20, 0xD0	; 208
    1dc4:	41 93       	st	Z+, r20
    1dc6:	b3 e0       	ldi	r27, 0x03	; 3
    1dc8:	0f d0       	rcall	.+30     	; 0x1de8 <__ultoa_invert+0x86>
    1dca:	c9 f7       	brne	.-14     	; 0x1dbe <__ultoa_invert+0x5c>
    1dcc:	f6 cf       	rjmp	.-20     	; 0x1dba <__ultoa_invert+0x58>
    1dce:	46 2f       	mov	r20, r22
    1dd0:	4f 70       	andi	r20, 0x0F	; 15
    1dd2:	40 5d       	subi	r20, 0xD0	; 208
    1dd4:	4a 33       	cpi	r20, 0x3A	; 58
    1dd6:	18 f0       	brcs	.+6      	; 0x1dde <__ultoa_invert+0x7c>
    1dd8:	49 5d       	subi	r20, 0xD9	; 217
    1dda:	31 fd       	sbrc	r19, 1
    1ddc:	40 52       	subi	r20, 0x20	; 32
    1dde:	41 93       	st	Z+, r20
    1de0:	02 d0       	rcall	.+4      	; 0x1de6 <__ultoa_invert+0x84>
    1de2:	a9 f7       	brne	.-22     	; 0x1dce <__ultoa_invert+0x6c>
    1de4:	ea cf       	rjmp	.-44     	; 0x1dba <__ultoa_invert+0x58>
    1de6:	b4 e0       	ldi	r27, 0x04	; 4
    1de8:	a6 95       	lsr	r26
    1dea:	97 95       	ror	r25
    1dec:	87 95       	ror	r24
    1dee:	77 95       	ror	r23
    1df0:	67 95       	ror	r22
    1df2:	ba 95       	dec	r27
    1df4:	c9 f7       	brne	.-14     	; 0x1de8 <__ultoa_invert+0x86>
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	61 05       	cpc	r22, r1
    1dfa:	71 05       	cpc	r23, r1
    1dfc:	08 95       	ret
    1dfe:	9b 01       	movw	r18, r22
    1e00:	ac 01       	movw	r20, r24
    1e02:	0a 2e       	mov	r0, r26
    1e04:	06 94       	lsr	r0
    1e06:	57 95       	ror	r21
    1e08:	47 95       	ror	r20
    1e0a:	37 95       	ror	r19
    1e0c:	27 95       	ror	r18
    1e0e:	ba 95       	dec	r27
    1e10:	c9 f7       	brne	.-14     	; 0x1e04 <__ultoa_invert+0xa2>
    1e12:	62 0f       	add	r22, r18
    1e14:	73 1f       	adc	r23, r19
    1e16:	84 1f       	adc	r24, r20
    1e18:	95 1f       	adc	r25, r21
    1e1a:	a0 1d       	adc	r26, r0
    1e1c:	08 95       	ret

00001e1e <__prologue_saves__>:
    1e1e:	2f 92       	push	r2
    1e20:	3f 92       	push	r3
    1e22:	4f 92       	push	r4
    1e24:	5f 92       	push	r5
    1e26:	6f 92       	push	r6
    1e28:	7f 92       	push	r7
    1e2a:	8f 92       	push	r8
    1e2c:	9f 92       	push	r9
    1e2e:	af 92       	push	r10
    1e30:	bf 92       	push	r11
    1e32:	cf 92       	push	r12
    1e34:	df 92       	push	r13
    1e36:	ef 92       	push	r14
    1e38:	ff 92       	push	r15
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	ca 1b       	sub	r28, r26
    1e48:	db 0b       	sbc	r29, r27
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	09 94       	ijmp

00001e56 <__epilogue_restores__>:
    1e56:	2a 88       	ldd	r2, Y+18	; 0x12
    1e58:	39 88       	ldd	r3, Y+17	; 0x11
    1e5a:	48 88       	ldd	r4, Y+16	; 0x10
    1e5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e60:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e62:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e64:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e66:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e68:	b9 84       	ldd	r11, Y+9	; 0x09
    1e6a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e6c:	df 80       	ldd	r13, Y+7	; 0x07
    1e6e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e70:	fd 80       	ldd	r15, Y+5	; 0x05
    1e72:	0c 81       	ldd	r16, Y+4	; 0x04
    1e74:	1b 81       	ldd	r17, Y+3	; 0x03
    1e76:	aa 81       	ldd	r26, Y+2	; 0x02
    1e78:	b9 81       	ldd	r27, Y+1	; 0x01
    1e7a:	ce 0f       	add	r28, r30
    1e7c:	d1 1d       	adc	r29, r1
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	ed 01       	movw	r28, r26
    1e8a:	08 95       	ret

00001e8c <_exit>:
    1e8c:	f8 94       	cli

00001e8e <__stop_program>:
    1e8e:	ff cf       	rjmp	.-2      	; 0x1e8e <__stop_program>
